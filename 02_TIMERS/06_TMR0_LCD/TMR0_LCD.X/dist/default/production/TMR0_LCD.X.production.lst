

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Sun Jul 10 19:13:49 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    43                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    44  0000                     
    45                           ; Version 2.35
    46                           ; Generated 05/05/2021 GMT
    47                           ; 
    48                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution. Publication is not required when
    62                           ;        this file is used in an embedded application.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC18F45K50 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     _LATDbits	set	3980
    81  0000                     _ANSELD	set	3934
    82  0000                     _SLRCON	set	3962
    83  0000                     _LATD	set	3980
    84  0000                     _OSCCONbits	set	4051
    85  0000                     _TMR0	set	4054
    86  0000                     _T0CONbits	set	4053
    87  0000                     _INTCONbits	set	4082
    88  0000                     _TRISD	set	3989
    89                           
    90                           	psect	smallconst
    91  000800                     __psmallconst:
    92                           	callstack 0
    93  000800  00                 	db	0
    94  000801                     STR_1:
    95  000801  54                 	db	84	;'T'
    96  000802  4D                 	db	77	;'M'
    97  000803  52                 	db	82	;'R'
    98  000804  30                 	db	48	;'0'
    99  000805  3A                 	db	58	;':'
   100  000806  25                 	db	37
   101  000807  30                 	db	48	;'0'
   102  000808  33                 	db	51	;'3'
   103  000809  75                 	db	117	;'u'
   104  00080A  00                 	db	0
   105  00080B  00                 	db	0	; dummy byte at the end
   106  0000                     
   107                           ; #config settings
   108                           
   109                           	psect	cinit
   110  00161A                     __pcinit:
   111                           	callstack 0
   112  00161A                     start_initialization:
   113                           	callstack 0
   114  00161A                     __initialization:
   115                           	callstack 0
   116                           
   117                           ; Clear objects allocated to BANK0 (55 bytes)
   118  00161A  EE00  F060         	lfsr	0,__pbssBANK0
   119  00161E  0E37               	movlw	55
   120  001620                     clear_0:
   121  001620  6AEE               	clrf	postinc0,c
   122  001622  06E8               	decf	wreg,f,c
   123  001624  E1FD               	bnz	clear_0
   124                           
   125                           ; Clear objects allocated to COMRAM (1 bytes)
   126  001626  6A5E               	clrf	__pbssCOMRAM& (0+255),c
   127  001628                     end_of_initialization:
   128                           	callstack 0
   129  001628                     __end_of__initialization:
   130                           	callstack 0
   131  001628  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   132  00162A  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   133  00162C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   134  00162E  6EF8               	movwf	tblptru,c
   135  001630  0100               	movlb	0
   136  001632  EFF7  F008         	goto	_main	;jump to C main() function
   137                           
   138                           	psect	bssCOMRAM
   139  00005E                     __pbssCOMRAM:
   140                           	callstack 0
   141  00005E                     _contador:
   142                           	callstack 0
   143  00005E                     	ds	1
   144                           
   145                           	psect	bssBANK0
   146  000060                     __pbssBANK0:
   147                           	callstack 0
   148  000060                     _nout:
   149                           	callstack 0
   150  000060                     	ds	2
   151  000062                     _width:
   152                           	callstack 0
   153  000062                     	ds	2
   154  000064                     _prec:
   155                           	callstack 0
   156  000064                     	ds	2
   157  000066                     _flags:
   158                           	callstack 0
   159  000066                     	ds	2
   160  000068                     _flag:
   161                           	callstack 0
   162  000068                     	ds	1
   163  000069                     _dbuf:
   164                           	callstack 0
   165  000069                     	ds	32
   166  000089                     _str_contador:
   167                           	callstack 0
   168  000089                     	ds	14
   169                           
   170                           	psect	cstackBANK0
   171  000097                     __pcstackBANK0:
   172                           	callstack 0
   173  000097                     sprintf@ap:
   174                           	callstack 0
   175                           
   176                           ; 2 bytes @ 0x0
   177  000097                     	ds	2
   178  000099                     sprintf@f:
   179                           	callstack 0
   180                           
   181                           ; 11 bytes @ 0x2
   182  000099                     	ds	11
   183                           
   184                           	psect	cstackCOMRAM
   185  000001                     __pcstackCOMRAM:
   186                           	callstack 0
   187  000001                     ?_strlen:
   188                           	callstack 0
   189  000001                     ?_isdigit:
   190                           	callstack 0
   191  000001                     ?_isspace:
   192                           	callstack 0
   193  000001                     ?___wmul:
   194                           	callstack 0
   195  000001                     ?___lodiv:
   196                           	callstack 0
   197  000001                     ?___lomod:
   198                           	callstack 0
   199  000001                     Lcd_Port@a:
   200                           	callstack 0
   201  000001                     ___wmul@multiplier:
   202                           	callstack 0
   203  000001                     isdigit@c:
   204                           	callstack 0
   205  000001                     isspace@c:
   206                           	callstack 0
   207  000001                     fputc@c:
   208                           	callstack 0
   209  000001                     strlen@s:
   210                           	callstack 0
   211  000001                     ___lodiv@dividend:
   212                           	callstack 0
   213  000001                     ___lomod@dividend:
   214                           	callstack 0
   215                           
   216                           ; 8 bytes @ 0x0
   217  000001                     	ds	1
   218  000002                     ??_Lcd_Cmd:
   219  000002                     Lcd_Write_Char@temp:
   220                           	callstack 0
   221                           
   222                           ; 1 bytes @ 0x1
   223  000002                     	ds	1
   224  000003                     ??_isdigit:
   225  000003                     ??_isspace:
   226  000003                     Lcd_Cmd@a:
   227                           	callstack 0
   228  000003                     Lcd_Write_Char@y:
   229                           	callstack 0
   230  000003                     ___wmul@multiplicand:
   231                           	callstack 0
   232  000003                     fputc@fp:
   233                           	callstack 0
   234  000003                     strlen@a:
   235                           	callstack 0
   236                           
   237                           ; 2 bytes @ 0x2
   238  000003                     	ds	1
   239  000004                     ??_Lcd_Init:
   240  000004                     Lcd_Set_Cursor@b:
   241                           	callstack 0
   242  000004                     Lcd_Write_Char@a:
   243                           	callstack 0
   244                           
   245                           ; 1 bytes @ 0x3
   246  000004                     	ds	1
   247  000005                     ??_fputc:
   248  000005                     Lcd_Set_Cursor@a:
   249                           	callstack 0
   250  000005                     Lcd_Write_String@a:
   251                           	callstack 0
   252  000005                     ___wmul@product:
   253                           	callstack 0
   254                           
   255                           ; 2 bytes @ 0x4
   256  000005                     	ds	1
   257  000006                     Lcd_Set_Cursor@z:
   258                           	callstack 0
   259                           
   260                           ; 1 bytes @ 0x5
   261  000006                     	ds	1
   262  000007                     Lcd_Set_Cursor@y:
   263                           	callstack 0
   264  000007                     _isspace$869:
   265                           	callstack 0
   266  000007                     Lcd_Write_String@i:
   267                           	callstack 0
   268                           
   269                           ; 2 bytes @ 0x6
   270  000007                     	ds	1
   271  000008                     ?_atoi:
   272                           	callstack 0
   273  000008                     Lcd_Set_Cursor@temp:
   274                           	callstack 0
   275  000008                     atoi@s:
   276                           	callstack 0
   277                           
   278                           ; 2 bytes @ 0x7
   279  000008                     	ds	1
   280  000009                     ___lodiv@divisor:
   281                           	callstack 0
   282  000009                     ___lomod@divisor:
   283                           	callstack 0
   284                           
   285                           ; 8 bytes @ 0x8
   286  000009                     	ds	1
   287  00000A                     ??_atoi:
   288  00000A                     fputs@s:
   289                           	callstack 0
   290                           
   291                           ; 2 bytes @ 0x9
   292  00000A                     	ds	2
   293  00000C                     fputs@fp:
   294                           	callstack 0
   295                           
   296                           ; 2 bytes @ 0xB
   297  00000C                     	ds	2
   298  00000E                     fputs@c:
   299                           	callstack 0
   300  00000E                     atoi@neg:
   301                           	callstack 0
   302                           
   303                           ; 2 bytes @ 0xD
   304  00000E                     	ds	1
   305  00000F                     fputs@i:
   306                           	callstack 0
   307                           
   308                           ; 2 bytes @ 0xE
   309  00000F                     	ds	1
   310  000010                     atoi@n:
   311                           	callstack 0
   312                           
   313                           ; 2 bytes @ 0xF
   314  000010                     	ds	1
   315  000011                     ?_pad:
   316                           	callstack 0
   317  000011                     ___lomod@counter:
   318                           	callstack 0
   319  000011                     pad@fp:
   320                           	callstack 0
   321  000011                     ___lodiv@quotient:
   322                           	callstack 0
   323                           
   324                           ; 8 bytes @ 0x10
   325  000011                     	ds	2
   326  000013                     pad@buf:
   327                           	callstack 0
   328                           
   329                           ; 2 bytes @ 0x12
   330  000013                     	ds	2
   331  000015                     pad@p:
   332                           	callstack 0
   333                           
   334                           ; 2 bytes @ 0x14
   335  000015                     	ds	2
   336  000017                     ??_pad:
   337                           
   338                           ; 1 bytes @ 0x16
   339  000017                     	ds	1
   340  000018                     pad@i:
   341                           	callstack 0
   342                           
   343                           ; 2 bytes @ 0x17
   344  000018                     	ds	1
   345  000019                     ___lodiv@counter:
   346                           	callstack 0
   347                           
   348                           ; 1 bytes @ 0x18
   349  000019                     	ds	1
   350  00001A                     pad@w:
   351                           	callstack 0
   352                           
   353                           ; 2 bytes @ 0x19
   354  00001A                     	ds	2
   355  00001C                     ?_utoa:
   356                           	callstack 0
   357  00001C                     utoa@fp:
   358                           	callstack 0
   359                           
   360                           ; 2 bytes @ 0x1B
   361  00001C                     	ds	2
   362  00001E                     utoa@d:
   363                           	callstack 0
   364                           
   365                           ; 8 bytes @ 0x1D
   366  00001E                     	ds	8
   367  000026                     ??_utoa:
   368                           
   369                           ; 1 bytes @ 0x25
   370  000026                     	ds	8
   371  00002E                     utoa@p:
   372                           	callstack 0
   373                           
   374                           ; 2 bytes @ 0x2D
   375  00002E                     	ds	2
   376  000030                     utoa@w:
   377                           	callstack 0
   378                           
   379                           ; 2 bytes @ 0x2F
   380  000030                     	ds	2
   381  000032                     utoa@n:
   382                           	callstack 0
   383                           
   384                           ; 8 bytes @ 0x31
   385  000032                     	ds	8
   386  00003A                     utoa@i:
   387                           	callstack 0
   388                           
   389                           ; 2 bytes @ 0x39
   390  00003A                     	ds	2
   391  00003C                     ?_vfpfcnvrt:
   392                           	callstack 0
   393  00003C                     vfpfcnvrt@fp:
   394                           	callstack 0
   395                           
   396                           ; 2 bytes @ 0x3B
   397  00003C                     	ds	2
   398  00003E                     vfpfcnvrt@fmt:
   399                           	callstack 0
   400                           
   401                           ; 2 bytes @ 0x3D
   402  00003E                     	ds	2
   403  000040                     vfpfcnvrt@ap:
   404                           	callstack 0
   405                           
   406                           ; 2 bytes @ 0x3F
   407  000040                     	ds	2
   408  000042                     ??_vfpfcnvrt:
   409                           
   410                           ; 1 bytes @ 0x41
   411  000042                     	ds	4
   412  000046                     vfpfcnvrt@llu:
   413                           	callstack 0
   414                           
   415                           ; 8 bytes @ 0x45
   416  000046                     	ds	8
   417  00004E                     vfpfcnvrt@done:
   418                           	callstack 0
   419                           
   420                           ; 2 bytes @ 0x4D
   421  00004E                     	ds	2
   422  000050                     ?_vfprintf:
   423                           	callstack 0
   424  000050                     vfprintf@fp:
   425                           	callstack 0
   426                           
   427                           ; 2 bytes @ 0x4F
   428  000050                     	ds	2
   429  000052                     vfprintf@fmt:
   430                           	callstack 0
   431                           
   432                           ; 2 bytes @ 0x51
   433  000052                     	ds	2
   434  000054                     vfprintf@ap:
   435                           	callstack 0
   436                           
   437                           ; 2 bytes @ 0x53
   438  000054                     	ds	2
   439  000056                     vfprintf@cfmt:
   440                           	callstack 0
   441                           
   442                           ; 2 bytes @ 0x55
   443  000056                     	ds	2
   444  000058                     ?_sprintf:
   445                           	callstack 0
   446  000058                     sprintf@s:
   447                           	callstack 0
   448                           
   449                           ; 2 bytes @ 0x57
   450  000058                     	ds	2
   451  00005A                     sprintf@fmt:
   452                           	callstack 0
   453                           
   454                           ; 2 bytes @ 0x59
   455  00005A                     	ds	4
   456  00005E                     
   457                           ; 1 bytes @ 0x5D
   458 ;;
   459 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   460 ;;
   461 ;; *************** function _main *****************
   462 ;; Defined at:
   463 ;;		line 25 in file "main.c"
   464 ;; Parameters:    Size  Location     Type
   465 ;;		None
   466 ;; Auto vars:     Size  Location     Type
   467 ;;		None
   468 ;; Return value:  Size  Location     Type
   469 ;;                  1    wreg      void 
   470 ;; Registers used:
   471 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   472 ;; Tracked objects:
   473 ;;		On entry : 0/0
   474 ;;		On exit  : 0/0
   475 ;;		Unchanged: 0/0
   476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   477 ;;      Params:         0       0       0       0       0       0       0       0       0
   478 ;;      Locals:         0       0       0       0       0       0       0       0       0
   479 ;;      Temps:          0       0       0       0       0       0       0       0       0
   480 ;;      Totals:         0       0       0       0       0       0       0       0       0
   481 ;;Total ram usage:        0 bytes
   482 ;; Hardware stack levels required when called: 9
   483 ;; This function calls:
   484 ;;		_Config_Clock
   485 ;;		_Config_Port
   486 ;;		_Config_TMR0_Temp
   487 ;;		_Config_TMRS_Interrupt
   488 ;;		_Lcd_Clear
   489 ;;		_Lcd_Init
   490 ;;		_Lcd_Set_Cursor
   491 ;;		_Lcd_Write_String
   492 ;;		_sprintf
   493 ;; This function is called by:
   494 ;;		Startup code after reset
   495 ;; This function uses a non-reentrant model
   496 ;;
   497                           
   498                           	psect	text0
   499  0011EE                     __ptext0:
   500                           	callstack 0
   501  0011EE                     _main:
   502                           	callstack 22
   503  0011EE                     
   504                           ;main.c: 27:     Config_Clock();
   505  0011EE  EC3A  F00B         	call	_Config_Clock	;wreg free
   506                           
   507                           ;main.c: 28:     Config_Port();
   508  0011F2  EC29  F00B         	call	_Config_Port	;wreg free
   509  0011F6                     
   510                           ;main.c: 29:     Config_TMRS_Interrupt();
   511  0011F6  EC41  F00B         	call	_Config_TMRS_Interrupt	;wreg free
   512  0011FA                     
   513                           ;main.c: 30:     Config_TMR0_Temp();
   514  0011FA  EC1B  F00B         	call	_Config_TMR0_Temp	;wreg free
   515  0011FE                     
   516                           ;main.c: 31:     Lcd_Init();
   517  0011FE  EC37  F009         	call	_Lcd_Init	;wreg free
   518  001202                     
   519                           ;main.c: 32:     Lcd_Clear();
   520  001202  EC33  F00B         	call	_Lcd_Clear	;wreg free
   521  001206                     l1843:
   522                           
   523                           ;main.c: 34:         if(flag){
   524  001206  0100               	movlb	0	; () banked
   525  001208  5168               	movf	_flag& (0+255),w,b
   526  00120A  B4D8               	btfsc	status,2,c
   527  00120C  EF0A  F009         	goto	u1001
   528  001210  EF0C  F009         	goto	u1000
   529  001214                     u1001:
   530  001214  EF03  F009         	goto	l1843
   531  001218                     u1000:
   532  001218                     
   533                           ; BSR set to: 0
   534                           ;main.c: 35:             contador++;
   535  001218  2A5E               	incf	_contador^0,f,c
   536  00121A                     
   537                           ; BSR set to: 0
   538                           ;main.c: 36:             sprintf(str_contador,"TMR0:%03u",contador);
   539  00121A  0E89               	movlw	low _str_contador
   540  00121C  6E58               	movwf	sprintf@s^0,c
   541  00121E  0E00               	movlw	high _str_contador
   542  001220  6E59               	movwf	(sprintf@s+1)^0,c
   543  001222  0E01               	movlw	low STR_1
   544  001224  6E5A               	movwf	sprintf@fmt^0,c
   545  001226  0E08               	movlw	high STR_1
   546  001228  6E5B               	movwf	(sprintf@fmt+1)^0,c
   547  00122A  C05E  F05C         	movff	_contador,?_sprintf+4
   548  00122E  6A5D               	clrf	(?_sprintf+5)^0,c
   549  001230  EC03  F00A         	call	_sprintf	;wreg free
   550  001234                     
   551                           ;main.c: 37:             Lcd_Set_Cursor(1,4);
   552  001234  0E04               	movlw	4
   553  001236  6E04               	movwf	Lcd_Set_Cursor@b^0,c
   554  001238  0E01               	movlw	1
   555  00123A  EC71  F009         	call	_Lcd_Set_Cursor
   556  00123E                     
   557                           ;main.c: 38:             Lcd_Write_String(str_contador);
   558  00123E  0E89               	movlw	low _str_contador
   559  001240  6E05               	movwf	Lcd_Write_String@a^0,c
   560  001242  0E00               	movlw	high _str_contador
   561  001244  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
   562  001246  EC77  F00A         	call	_Lcd_Write_String	;wreg free
   563  00124A                     
   564                           ;main.c: 39:             if(contador==40)contador=0;
   565  00124A  0E28               	movlw	40
   566  00124C  185E               	xorwf	_contador^0,w,c
   567  00124E  A4D8               	btfss	status,2,c
   568  001250  EF2C  F009         	goto	u1011
   569  001254  EF2E  F009         	goto	u1010
   570  001258                     u1011:
   571  001258  EF30  F009         	goto	l47
   572  00125C                     u1010:
   573  00125C  0E00               	movlw	0
   574  00125E  6E5E               	movwf	_contador^0,c
   575  001260                     l47:
   576                           
   577                           ;main.c: 40:             flag=0;
   578  001260  0E00               	movlw	0
   579  001262  0100               	movlb	0	; () banked
   580  001264  6F68               	movwf	_flag& (0+255),b
   581  001266  EF03  F009         	goto	l1843
   582  00126A  EF16  F000         	goto	start
   583  00126E                     __end_of_main:
   584                           	callstack 0
   585                           
   586 ;; *************** function _sprintf *****************
   587 ;; Defined at:
   588 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\nf_sprintf.c"
   589 ;; Parameters:    Size  Location     Type
   590 ;;  s               2   87[COMRAM] PTR unsigned char 
   591 ;;		 -> str_contador(14), 
   592 ;;  fmt             2   89[COMRAM] PTR const unsigned char 
   593 ;;		 -> STR_1(10), 
   594 ;; Auto vars:     Size  Location     Type
   595 ;;  f              11    2[BANK0 ] struct _IO_FILE
   596 ;;  ap              2    0[BANK0 ] PTR void [1]
   597 ;;		 -> ?_sprintf(2), 
   598 ;;  ret             2    0        int 
   599 ;; Return value:  Size  Location     Type
   600 ;;                  2   87[COMRAM] int 
   601 ;; Registers used:
   602 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   603 ;; Tracked objects:
   604 ;;		On entry : 0/0
   605 ;;		On exit  : 0/0
   606 ;;		Unchanged: 0/0
   607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   608 ;;      Params:         6       0       0       0       0       0       0       0       0
   609 ;;      Locals:         0      13       0       0       0       0       0       0       0
   610 ;;      Temps:          0       0       0       0       0       0       0       0       0
   611 ;;      Totals:         6      13       0       0       0       0       0       0       0
   612 ;;Total ram usage:       19 bytes
   613 ;; Hardware stack levels used: 1
   614 ;; Hardware stack levels required when called: 8
   615 ;; This function calls:
   616 ;;		_vfprintf
   617 ;; This function is called by:
   618 ;;		_main
   619 ;; This function uses a non-reentrant model
   620 ;;
   621                           
   622                           	psect	text1
   623  001406                     __ptext1:
   624                           	callstack 0
   625  001406                     _sprintf:
   626                           	callstack 22
   627  001406  0E5C               	movlw	low (?_sprintf+4)
   628  001408  0100               	movlb	0	; () banked
   629  00140A  6F97               	movwf	sprintf@ap& (0+255),b
   630  00140C  0E00               	movlw	high (?_sprintf+4)
   631  00140E  6F98               	movwf	(sprintf@ap+1)& (0+255),b
   632  001410  C058  F099         	movff	sprintf@s,sprintf@f
   633  001414  C059  F09A         	movff	sprintf@s+1,sprintf@f+1
   634  001418                     
   635                           ; BSR set to: 0
   636  001418  0E00               	movlw	0
   637  00141A  6F9D               	movwf	(sprintf@f+4)& (0+255),b
   638  00141C  0E00               	movlw	0
   639  00141E  6F9C               	movwf	(sprintf@f+3)& (0+255),b
   640  001420                     
   641                           ; BSR set to: 0
   642  001420  0E00               	movlw	0
   643  001422  6FA3               	movwf	(sprintf@f+10)& (0+255),b
   644  001424  0E00               	movlw	0
   645  001426  6FA2               	movwf	(sprintf@f+9)& (0+255),b
   646  001428                     
   647                           ; BSR set to: 0
   648  001428  0E99               	movlw	low sprintf@f
   649  00142A  6E50               	movwf	vfprintf@fp^0,c
   650  00142C  0E00               	movlw	high sprintf@f
   651  00142E  6E51               	movwf	(vfprintf@fp+1)^0,c
   652  001430  C05A  F052         	movff	sprintf@fmt,vfprintf@fmt
   653  001434  C05B  F053         	movff	sprintf@fmt+1,vfprintf@fmt+1
   654  001438  0E97               	movlw	low sprintf@ap
   655  00143A  6E54               	movwf	vfprintf@ap^0,c
   656  00143C  0E00               	movlw	high sprintf@ap
   657  00143E  6E55               	movwf	(vfprintf@ap+1)^0,c
   658  001440  ECA4  F009         	call	_vfprintf	;wreg free
   659  001444  0100               	movlb	0	; () banked
   660  001446  519C               	movf	(sprintf@f+3)& (0+255),w,b
   661  001448  2458               	addwf	sprintf@s^0,w,c
   662  00144A  6ED9               	movwf	fsr2l,c
   663  00144C  519D               	movf	(sprintf@f+4)& (0+255),w,b
   664  00144E  2059               	addwfc	(sprintf@s+1)^0,w,c
   665  001450  6EDA               	movwf	fsr2h,c
   666  001452  0E00               	movlw	0
   667  001454  6EDF               	movwf	indf2,c
   668  001456                     
   669                           ; BSR set to: 0
   670  001456  0012               	return		;funcret
   671  001458                     __end_of_sprintf:
   672                           	callstack 0
   673                           
   674 ;; *************** function _vfprintf *****************
   675 ;; Defined at:
   676 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
   677 ;; Parameters:    Size  Location     Type
   678 ;;  fp              2   79[COMRAM] PTR struct _IO_FILE
   679 ;;		 -> sprintf@f(11), 
   680 ;;  fmt             2   81[COMRAM] PTR const unsigned char 
   681 ;;		 -> STR_1(10), 
   682 ;;  ap              2   83[COMRAM] PTR PTR void 
   683 ;;		 -> sprintf@ap(2), 
   684 ;; Auto vars:     Size  Location     Type
   685 ;;  cfmt            2   85[COMRAM] PTR unsigned char 
   686 ;;		 -> STR_1(10), 
   687 ;; Return value:  Size  Location     Type
   688 ;;                  2   79[COMRAM] int 
   689 ;; Registers used:
   690 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   691 ;; Tracked objects:
   692 ;;		On entry : 0/0
   693 ;;		On exit  : 0/0
   694 ;;		Unchanged: 0/0
   695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   696 ;;      Params:         6       0       0       0       0       0       0       0       0
   697 ;;      Locals:         2       0       0       0       0       0       0       0       0
   698 ;;      Temps:          0       0       0       0       0       0       0       0       0
   699 ;;      Totals:         8       0       0       0       0       0       0       0       0
   700 ;;Total ram usage:        8 bytes
   701 ;; Hardware stack levels used: 1
   702 ;; Hardware stack levels required when called: 7
   703 ;; This function calls:
   704 ;;		_vfpfcnvrt
   705 ;; This function is called by:
   706 ;;		_sprintf
   707 ;; This function uses a non-reentrant model
   708 ;;
   709                           
   710                           	psect	text2
   711  001348                     __ptext2:
   712                           	callstack 0
   713  001348                     _vfprintf:
   714                           	callstack 22
   715  001348                     
   716                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.36\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
   717  001348  C052  F056         	movff	vfprintf@fmt,vfprintf@cfmt
   718  00134C  C053  F057         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   719  001350                     
   720                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
   721  001350  0E00               	movlw	0
   722  001352  0100               	movlb	0	; () banked
   723  001354  6F61               	movwf	(_nout+1)& (0+255),b
   724  001356  0E00               	movlw	0
   725  001358  6F60               	movwf	_nout& (0+255),b
   726                           
   727                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   728  00135A  EFC2  F009         	goto	l1753
   729  00135E                     l1751:
   730                           
   731                           ; BSR set to: 0
   732                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
   733  00135E  C050  F03C         	movff	vfprintf@fp,vfpfcnvrt@fp
   734  001362  C051  F03D         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   735  001366  0E56               	movlw	low vfprintf@cfmt
   736  001368  6E3E               	movwf	vfpfcnvrt@fmt^0,c
   737  00136A  0E00               	movlw	high vfprintf@cfmt
   738  00136C  6E3F               	movwf	(vfpfcnvrt@fmt+1)^0,c
   739  00136E  C054  F040         	movff	vfprintf@ap,vfpfcnvrt@ap
   740  001372  C055  F041         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   741  001376  EC06  F004         	call	_vfpfcnvrt	;wreg free
   742  00137A  503C               	movf	?_vfpfcnvrt^0,w,c
   743  00137C  0100               	movlb	0	; () banked
   744  00137E  2760               	addwf	_nout& (0+255),f,b
   745  001380  503D               	movf	(?_vfpfcnvrt+1)^0,w,c
   746  001382  2361               	addwfc	(_nout+1)& (0+255),f,b
   747  001384                     l1753:
   748                           
   749                           ; BSR set to: 0
   750                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   751  001384  C056  FFF6         	movff	vfprintf@cfmt,tblptrl
   752  001388  C057  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   753  00138C                     	if	0	;tblptru may be non-zero
   754  00138C                     	endif
   755  00138C                     	if	0	;tblptru may be non-zero
   756  00138C                     	endif
   757  00138C  0008               	tblrd		*
   758  00138E  50F5               	movf	tablat,w,c
   759  001390  0900               	iorlw	0
   760  001392  A4D8               	btfss	status,2,c
   761  001394  EFCE  F009         	goto	u961
   762  001398  EFD0  F009         	goto	u960
   763  00139C                     u961:
   764  00139C  EFAF  F009         	goto	l1751
   765  0013A0                     u960:
   766  0013A0                     
   767                           ; BSR set to: 0
   768                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
   769  0013A0  C060  F050         	movff	_nout,?_vfprintf
   770  0013A4  C061  F051         	movff	_nout+1,?_vfprintf+1
   771  0013A8                     
   772                           ; BSR set to: 0
   773  0013A8  0012               	return		;funcret
   774  0013AA                     __end_of_vfprintf:
   775                           	callstack 0
   776                           
   777 ;; *************** function _vfpfcnvrt *****************
   778 ;; Defined at:
   779 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
   780 ;; Parameters:    Size  Location     Type
   781 ;;  fp              2   59[COMRAM] PTR struct _IO_FILE
   782 ;;		 -> sprintf@f(11), 
   783 ;;  fmt             2   61[COMRAM] PTR PTR unsigned char 
   784 ;;		 -> vfprintf@cfmt(2), 
   785 ;;  ap              2   63[COMRAM] PTR PTR void 
   786 ;;		 -> sprintf@ap(2), 
   787 ;; Auto vars:     Size  Location     Type
   788 ;;  llu             8   69[COMRAM] unsigned long long 
   789 ;;  ll              8    0        long long 
   790 ;;  f               4    0        long long 
   791 ;;  vp              3    0        PTR void 
   792 ;;  ct              3    0        unsigned char [3]
   793 ;;  cp              3    0        PTR unsigned char 
   794 ;;  done            2   77[COMRAM] int 
   795 ;;  i               2    0        int 
   796 ;;  c               1    0        unsigned char 
   797 ;; Return value:  Size  Location     Type
   798 ;;                  2   59[COMRAM] int 
   799 ;; Registers used:
   800 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   801 ;; Tracked objects:
   802 ;;		On entry : 0/0
   803 ;;		On exit  : 0/0
   804 ;;		Unchanged: 0/0
   805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   806 ;;      Params:         6       0       0       0       0       0       0       0       0
   807 ;;      Locals:        10       0       0       0       0       0       0       0       0
   808 ;;      Temps:          4       0       0       0       0       0       0       0       0
   809 ;;      Totals:        20       0       0       0       0       0       0       0       0
   810 ;;Total ram usage:       20 bytes
   811 ;; Hardware stack levels used: 1
   812 ;; Hardware stack levels required when called: 6
   813 ;; This function calls:
   814 ;;		_atoi
   815 ;;		_fputc
   816 ;;		_isdigit
   817 ;;		_utoa
   818 ;; This function is called by:
   819 ;;		_vfprintf
   820 ;; This function uses a non-reentrant model
   821 ;;
   822                           
   823                           	psect	text3
   824  00080C                     __ptext3:
   825                           	callstack 0
   826  00080C                     _vfpfcnvrt:
   827                           	callstack 22
   828  00080C                     
   829                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.36\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.36\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.36\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          6\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
   830  00080C  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   831  000810  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   832  000814  CFDE FFF6          	movff	postinc2,tblptrl
   833  000818  CFDD FFF7          	movff	postdec2,tblptrh
   834  00081C                     	if	0	;tblptru may be non-zero
   835  00081C                     	endif
   836  00081C                     	if	0	;tblptru may be non-zero
   837  00081C                     	endif
   838  00081C  0008               	tblrd		*
   839  00081E  50F5               	movf	tablat,w,c
   840  000820  0A25               	xorlw	37
   841  000822  A4D8               	btfss	status,2,c
   842  000824  EF16  F004         	goto	u881
   843  000828  EF18  F004         	goto	u880
   844  00082C                     u881:
   845  00082C  EF87  F005         	goto	l1703
   846  000830                     u880:
   847  000830                     
   848                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
   849  000830  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   850  000834  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   851  000838  2ADE               	incf	postinc2,f,c
   852  00083A  0E00               	movlw	0
   853  00083C  22DD               	addwfc	postdec2,f,c
   854  00083E                     
   855                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
   856  00083E  0E00               	movlw	0
   857  000840  0100               	movlb	0	; () banked
   858  000842  6F63               	movwf	(_width+1)& (0+255),b
   859  000844  0E00               	movlw	0
   860  000846  6F62               	movwf	_width& (0+255),b
   861  000848  C062  F066         	movff	_width,_flags
   862  00084C  C063  F067         	movff	_width+1,_flags+1
   863  000850                     
   864                           ; BSR set to: 0
   865                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
   866  000850  6964               	setf	_prec& (0+255),b
   867  000852  6965               	setf	(_prec+1)& (0+255),b
   868  000854                     
   869                           ; BSR set to: 0
   870                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 710:         done
      +                           = 0;
   871  000854  0E00               	movlw	0
   872  000856  6E4F               	movwf	(vfpfcnvrt@done+1)^0,c
   873  000858  0E00               	movlw	0
   874  00085A  6E4E               	movwf	vfpfcnvrt@done^0,c
   875                           
   876                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 711:         whil
      +                          e (!done) {
   877  00085C  EF7B  F004         	goto	l1659
   878  000860                     l1633:
   879                           
   880                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 714:             
      +                                  flags |= (1 << 0);
   881  000860  0100               	movlb	0	; () banked
   882  000862  8166               	bsf	_flags& (0+255),0,b
   883  000864                     l1635:
   884                           
   885                           ; BSR set to: 0
   886                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 715:             
      +                                  ++*fmt;
   887  000864  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   888  000868  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   889  00086C  2ADE               	incf	postinc2,f,c
   890  00086E  0E00               	movlw	0
   891  000870  22DD               	addwfc	postdec2,f,c
   892                           
   893                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 716:             
      +                                  break;
   894  000872  EF7B  F004         	goto	l1659
   895  000876                     l1637:
   896                           
   897                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 718:             
      +                                  flags |= (1 << 1);
   898  000876  0100               	movlb	0	; () banked
   899  000878  8366               	bsf	_flags& (0+255),1,b
   900  00087A  EF32  F004         	goto	l1635
   901  00087E                     l1641:
   902                           
   903                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 722:             
      +                                  flags |= (1 << 2);
   904  00087E  0100               	movlb	0	; () banked
   905  000880  8566               	bsf	_flags& (0+255),2,b
   906  000882  EF32  F004         	goto	l1635
   907  000886                     l1645:
   908                           
   909                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 726:             
      +                                  flags |= (1 << 3);
   910  000886  0100               	movlb	0	; () banked
   911  000888  8766               	bsf	_flags& (0+255),3,b
   912  00088A  EF32  F004         	goto	l1635
   913  00088E                     l1649:
   914                           
   915                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 730:             
      +                                  flags |= (1 << 4);
   916  00088E  0100               	movlb	0	; () banked
   917  000890  8966               	bsf	_flags& (0+255),4,b
   918  000892  EF32  F004         	goto	l1635
   919  000896                     l1653:
   920                           
   921                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 734:             
      +                                  done = 1;
   922  000896  0E00               	movlw	0
   923  000898  6E4F               	movwf	(vfpfcnvrt@done+1)^0,c
   924  00089A  0E01               	movlw	1
   925  00089C  6E4E               	movwf	vfpfcnvrt@done^0,c
   926                           
   927                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 735:             
      +                                  break;
   928  00089E  EF7B  F004         	goto	l1659
   929  0008A2                     l1657:
   930  0008A2  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   931  0008A6  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   932  0008AA  CFDE FFF6          	movff	postinc2,tblptrl
   933  0008AE  CFDD FFF7          	movff	postdec2,tblptrh
   934  0008B2                     	if	0	;tblptru may be non-zero
   935  0008B2                     	endif
   936  0008B2                     	if	0	;tblptru may be non-zero
   937  0008B2                     	endif
   938  0008B2  0008               	tblrd		*
   939  0008B4  50F5               	movf	tablat,w,c
   940  0008B6  6E42               	movwf	??_vfpfcnvrt^0,c
   941  0008B8  6A43               	clrf	(??_vfpfcnvrt+1)^0,c
   942                           
   943                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   944                           ; Switch size 1, requested type "simple"
   945                           ; Number of cases is 1, Range of values is 0 to 0
   946                           ; switch strategies available:
   947                           ; Name         Instructions Cycles
   948                           ; simple_byte            4     3 (average)
   949                           ;	Chosen strategy is simple_byte
   950  0008BA  5043               	movf	(??_vfpfcnvrt+1)^0,w,c
   951  0008BC  0A00               	xorlw	0	; case 0
   952  0008BE  B4D8               	btfsc	status,2,c
   953  0008C0  EF64  F004         	goto	l1917
   954  0008C4  EF4B  F004         	goto	l1653
   955  0008C8                     l1917:
   956                           
   957                           ; Switch size 1, requested type "simple"
   958                           ; Number of cases is 5, Range of values is 32 to 48
   959                           ; switch strategies available:
   960                           ; Name         Instructions Cycles
   961                           ; simple_byte           16     9 (average)
   962                           ;	Chosen strategy is simple_byte
   963  0008C8  5042               	movf	??_vfpfcnvrt^0,w,c
   964  0008CA  0A20               	xorlw	32	; case 32
   965  0008CC  B4D8               	btfsc	status,2,c
   966  0008CE  EF43  F004         	goto	l1645
   967  0008D2  0A03               	xorlw	3	; case 35
   968  0008D4  B4D8               	btfsc	status,2,c
   969  0008D6  EF47  F004         	goto	l1649
   970  0008DA  0A08               	xorlw	8	; case 43
   971  0008DC  B4D8               	btfsc	status,2,c
   972  0008DE  EF3F  F004         	goto	l1641
   973  0008E2  0A06               	xorlw	6	; case 45
   974  0008E4  B4D8               	btfsc	status,2,c
   975  0008E6  EF30  F004         	goto	l1633
   976  0008EA  0A1D               	xorlw	29	; case 48
   977  0008EC  B4D8               	btfsc	status,2,c
   978  0008EE  EF3B  F004         	goto	l1637
   979  0008F2  EF4B  F004         	goto	l1653
   980  0008F6                     l1659:
   981                           
   982                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 711:         whil
      +                          e (!done) {
   983  0008F6  504E               	movf	vfpfcnvrt@done^0,w,c
   984  0008F8  104F               	iorwf	(vfpfcnvrt@done+1)^0,w,c
   985  0008FA  B4D8               	btfsc	status,2,c
   986  0008FC  EF82  F004         	goto	u891
   987  000900  EF84  F004         	goto	u890
   988  000904                     u891:
   989  000904  EF51  F004         	goto	l1657
   990  000908                     u890:
   991  000908                     
   992                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 738:         if (
      +                          flags & (1 << 0)) {
   993  000908  0100               	movlb	0	; () banked
   994  00090A  A166               	btfss	_flags& (0+255),0,b
   995  00090C  EF8A  F004         	goto	u901
   996  000910  EF8C  F004         	goto	u900
   997  000914                     u901:
   998  000914  EF8D  F004         	goto	l1663
   999  000918                     u900:
  1000  000918                     
  1001                           ; BSR set to: 0
  1002                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 739:             
      +                          flags &= ~(1 << 1);
  1003  000918  9366               	bcf	_flags& (0+255),1,b
  1004  00091A                     l1663:
  1005                           
  1006                           ; BSR set to: 0
  1007                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 745:         if (
      +                          (*fmt)[0] == '*') {
  1008  00091A  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1009  00091E  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1010  000922  CFDE FFF6          	movff	postinc2,tblptrl
  1011  000926  CFDD FFF7          	movff	postdec2,tblptrh
  1012  00092A                     	if	0	;tblptru may be non-zero
  1013  00092A                     	endif
  1014  00092A                     	if	0	;tblptru may be non-zero
  1015  00092A                     	endif
  1016  00092A  0008               	tblrd		*
  1017  00092C  50F5               	movf	tablat,w,c
  1018  00092E  0A2A               	xorlw	42
  1019  000930  A4D8               	btfss	status,2,c
  1020  000932  EF9D  F004         	goto	u911
  1021  000936  EF9F  F004         	goto	u910
  1022  00093A                     u911:
  1023  00093A  EFC8  F004         	goto	l1671
  1024  00093E                     u910:
  1025  00093E                     
  1026                           ; BSR set to: 0
  1027                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 746:             
      +                          ++*fmt;
  1028  00093E  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1029  000942  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1030  000946  2ADE               	incf	postinc2,f,c
  1031  000948  0E00               	movlw	0
  1032  00094A  22DD               	addwfc	postdec2,f,c
  1033                           
  1034                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 747:             
      +                          width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1035  00094C  C040  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1036  000950  C041  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1037  000954  CFDF F042          	movff	indf2,??_vfpfcnvrt
  1038  000958  0E02               	movlw	2
  1039  00095A  26DE               	addwf	postinc2,f,c
  1040  00095C  CFDF F043          	movff	indf2,??_vfpfcnvrt+1
  1041  000960  0E00               	movlw	0
  1042  000962  22DD               	addwfc	postdec2,f,c
  1043  000964  C042  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1044  000968  C043  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1045  00096C  CFDE F062          	movff	postinc2,_width
  1046  000970  CFDD F063          	movff	postdec2,_width+1
  1047  000974                     
  1048                           ; BSR set to: 0
  1049                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 748:             
      +                          if (width < 0) {
  1050  000974  BF63               	btfsc	(_width+1)& (0+255),7,b
  1051  000976  EFC1  F004         	goto	u920
  1052  00097A  EFBF  F004         	goto	u921
  1053  00097E                     u921:
  1054  00097E  EFFE  F004         	goto	l1679
  1055  000982                     u920:
  1056  000982                     
  1057                           ; BSR set to: 0
  1058                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 749:             
      +                              flags |= (1 << 0);
  1059  000982  8166               	bsf	_flags& (0+255),0,b
  1060                           
  1061                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 750:             
      +                              width = -width;
  1062  000984  6D62               	negf	_width& (0+255),b
  1063  000986  1F63               	comf	(_width+1)& (0+255),f,b
  1064  000988  B0D8               	btfsc	status,0,c
  1065  00098A  2B63               	incf	(_width+1)& (0+255),f,b
  1066  00098C  EFFE  F004         	goto	l1679
  1067  000990                     l1671:
  1068                           
  1069                           ; BSR set to: 0
  1070                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 753:             
      +                          width = atoi(*fmt);
  1071  000990  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1072  000994  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1073  000998  CFDE F008          	movff	postinc2,atoi@s
  1074  00099C  CFDD F009          	movff	postdec2,atoi@s+1
  1075  0009A0  ECA4  F006         	call	_atoi	;wreg free
  1076  0009A4  C008  F062         	movff	?_atoi,_width
  1077  0009A8  C009  F063         	movff	?_atoi+1,_width+1
  1078                           
  1079                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 754:             
      +                          while ((0 && isdigit((*fmt)[0]), ((unsigned)((*fmt)[0])-'0') < 10)) {
  1080  0009AC  EFDF  F004         	goto	l1677
  1081  0009B0                     l1673:
  1082                           
  1083                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 755:             
      +                              ++*fmt;
  1084  0009B0  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1085  0009B4  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1086  0009B8  2ADE               	incf	postinc2,f,c
  1087  0009BA  0E00               	movlw	0
  1088  0009BC  22DD               	addwfc	postdec2,f,c
  1089  0009BE                     l1677:
  1090  0009BE  0ED0               	movlw	208
  1091  0009C0  6E42               	movwf	??_vfpfcnvrt^0,c
  1092  0009C2  0EFF               	movlw	255
  1093  0009C4  6E43               	movwf	(??_vfpfcnvrt+1)^0,c
  1094  0009C6  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1095  0009CA  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1096  0009CE  CFDE FFF6          	movff	postinc2,tblptrl
  1097  0009D2  CFDD FFF7          	movff	postdec2,tblptrh
  1098  0009D6                     	if	0	;tblptru may be non-zero
  1099  0009D6                     	endif
  1100  0009D6                     	if	0	;tblptru may be non-zero
  1101  0009D6                     	endif
  1102  0009D6  0008               	tblrd		*
  1103  0009D8  50F5               	movf	tablat,w,c
  1104  0009DA  6E44               	movwf	(??_vfpfcnvrt+2)^0,c
  1105  0009DC  6A45               	clrf	(??_vfpfcnvrt+3)^0,c
  1106  0009DE  5042               	movf	??_vfpfcnvrt^0,w,c
  1107  0009E0  2644               	addwf	(??_vfpfcnvrt+2)^0,f,c
  1108  0009E2  5043               	movf	(??_vfpfcnvrt+1)^0,w,c
  1109  0009E4  2245               	addwfc	(??_vfpfcnvrt+3)^0,f,c
  1110  0009E6  5045               	movf	(??_vfpfcnvrt+3)^0,w,c
  1111  0009E8  E109               	bnz	u930
  1112  0009EA  0E0A               	movlw	10
  1113  0009EC  5C44               	subwf	(??_vfpfcnvrt+2)^0,w,c
  1114  0009EE  A0D8               	btfss	status,0,c
  1115  0009F0  EFFC  F004         	goto	u931
  1116  0009F4  EFFE  F004         	goto	u930
  1117  0009F8                     u931:
  1118  0009F8  EFD8  F004         	goto	l1673
  1119  0009FC                     u930:
  1120  0009FC                     l1679:
  1121                           
  1122                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1204:         if 
      +                          (*fmt[0] == 'u') {
  1123  0009FC  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1124  000A00  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1125  000A04  CFDE FFF6          	movff	postinc2,tblptrl
  1126  000A08  CFDD FFF7          	movff	postdec2,tblptrh
  1127  000A0C                     	if	0	;tblptru may be non-zero
  1128  000A0C                     	endif
  1129  000A0C                     	if	0	;tblptru may be non-zero
  1130  000A0C                     	endif
  1131  000A0C  0008               	tblrd		*
  1132  000A0E  50F5               	movf	tablat,w,c
  1133  000A10  0A75               	xorlw	117
  1134  000A12  A4D8               	btfss	status,2,c
  1135  000A14  EF0E  F005         	goto	u941
  1136  000A18  EF10  F005         	goto	u940
  1137  000A1C                     u941:
  1138  000A1C  EF51  F005         	goto	l1687
  1139  000A20                     u940:
  1140  000A20                     
  1141                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1206:            
      +                           ++*fmt;
  1142  000A20  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1143  000A24  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1144  000A28  2ADE               	incf	postinc2,f,c
  1145  000A2A  0E00               	movlw	0
  1146  000A2C  22DD               	addwfc	postdec2,f,c
  1147                           
  1148                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1207:            
      +                           llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned in
      +                          t)0));
  1149  000A2E  C040  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1150  000A32  C041  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1151  000A36  CFDF F042          	movff	indf2,??_vfpfcnvrt
  1152  000A3A  0E02               	movlw	2
  1153  000A3C  26DE               	addwf	postinc2,f,c
  1154  000A3E  CFDF F043          	movff	indf2,??_vfpfcnvrt+1
  1155  000A42  0E00               	movlw	0
  1156  000A44  22DD               	addwfc	postdec2,f,c
  1157  000A46  C042  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1158  000A4A  C043  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1159  000A4E  CFDE F044          	movff	postinc2,??_vfpfcnvrt+2
  1160  000A52  CFDD F045          	movff	postdec2,??_vfpfcnvrt+3
  1161  000A56  C044  F046         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  1162  000A5A  C045  F047         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  1163  000A5E  6A48               	clrf	(vfpfcnvrt@llu+2)^0,c
  1164  000A60  6A49               	clrf	(vfpfcnvrt@llu+3)^0,c
  1165  000A62  6A4A               	clrf	(vfpfcnvrt@llu+4)^0,c
  1166  000A64  6A4B               	clrf	(vfpfcnvrt@llu+5)^0,c
  1167  000A66  6A4C               	clrf	(vfpfcnvrt@llu+6)^0,c
  1168  000A68  6A4D               	clrf	(vfpfcnvrt@llu+7)^0,c
  1169  000A6A                     
  1170                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1209:            
      +                           return utoa(fp, llu);
  1171  000A6A  C03C  F01C         	movff	vfpfcnvrt@fp,utoa@fp
  1172  000A6E  C03D  F01D         	movff	vfpfcnvrt@fp+1,utoa@fp+1
  1173  000A72  C046  F01E         	movff	vfpfcnvrt@llu,utoa@d
  1174  000A76  C047  F01F         	movff	vfpfcnvrt@llu+1,utoa@d+1
  1175  000A7A  C048  F020         	movff	vfpfcnvrt@llu+2,utoa@d+2
  1176  000A7E  C049  F021         	movff	vfpfcnvrt@llu+3,utoa@d+3
  1177  000A82  C04A  F022         	movff	vfpfcnvrt@llu+4,utoa@d+4
  1178  000A86  C04B  F023         	movff	vfpfcnvrt@llu+5,utoa@d+5
  1179  000A8A  C04C  F024         	movff	vfpfcnvrt@llu+6,utoa@d+6
  1180  000A8E  C04D  F025         	movff	vfpfcnvrt@llu+7,utoa@d+7
  1181  000A92  ECA3  F005         	call	_utoa	;wreg free
  1182  000A96  C01C  F03C         	movff	?_utoa,?_vfpfcnvrt
  1183  000A9A  C01D  F03D         	movff	?_utoa+1,?_vfpfcnvrt+1
  1184  000A9E  EFA2  F005         	goto	l868
  1185  000AA2                     l1687:
  1186                           
  1187                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  1188  000AA2  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1189  000AA6  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1190  000AAA  CFDE FFF6          	movff	postinc2,tblptrl
  1191  000AAE  CFDD FFF7          	movff	postdec2,tblptrh
  1192  000AB2                     	if	0	;tblptru may be non-zero
  1193  000AB2                     	endif
  1194  000AB2                     	if	0	;tblptru may be non-zero
  1195  000AB2                     	endif
  1196  000AB2  0008               	tblrd		*
  1197  000AB4  50F5               	movf	tablat,w,c
  1198  000AB6  0A25               	xorlw	37
  1199  000AB8  A4D8               	btfss	status,2,c
  1200  000ABA  EF61  F005         	goto	u951
  1201  000ABE  EF63  F005         	goto	u950
  1202  000AC2                     u951:
  1203  000AC2  EF7A  F005         	goto	l1697
  1204  000AC6                     u950:
  1205  000AC6                     
  1206                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  1207  000AC6  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1208  000ACA  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1209  000ACE  2ADE               	incf	postinc2,f,c
  1210  000AD0  0E00               	movlw	0
  1211  000AD2  22DD               	addwfc	postdec2,f,c
  1212  000AD4                     
  1213                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  1214  000AD4  0E00               	movlw	0
  1215  000AD6  6E02               	movwf	(fputc@c+1)^0,c
  1216  000AD8  0E25               	movlw	37
  1217  000ADA  6E01               	movwf	fputc@c^0,c
  1218  000ADC  C03C  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1219  000AE0  C03D  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1220  000AE4  EC2F  F008         	call	_fputc	;wreg free
  1221  000AE8                     l1693:
  1222                           
  1223                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  1224  000AE8  0E00               	movlw	0
  1225  000AEA  6E3D               	movwf	(?_vfpfcnvrt+1)^0,c
  1226  000AEC  0E01               	movlw	1
  1227  000AEE  6E3C               	movwf	?_vfpfcnvrt^0,c
  1228  000AF0  EFA2  F005         	goto	l868
  1229  000AF4                     l1697:
  1230                           
  1231                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  1232  000AF4  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1233  000AF8  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1234  000AFC  2ADE               	incf	postinc2,f,c
  1235  000AFE  0E00               	movlw	0
  1236  000B00  22DD               	addwfc	postdec2,f,c
  1237  000B02                     
  1238                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  1239  000B02  0E00               	movlw	0
  1240  000B04  6E3D               	movwf	(?_vfpfcnvrt+1)^0,c
  1241  000B06  0E00               	movlw	0
  1242  000B08  6E3C               	movwf	?_vfpfcnvrt^0,c
  1243  000B0A  EFA2  F005         	goto	l868
  1244  000B0E                     l1703:
  1245                           
  1246                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  1247  000B0E  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1248  000B12  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1249  000B16  CFDE FFF6          	movff	postinc2,tblptrl
  1250  000B1A  CFDD FFF7          	movff	postdec2,tblptrh
  1251  000B1E                     	if	0	;tblptru may be non-zero
  1252  000B1E                     	endif
  1253  000B1E                     	if	0	;tblptru may be non-zero
  1254  000B1E                     	endif
  1255  000B1E  0008               	tblrd		*
  1256  000B20  50F5               	movf	tablat,w,c
  1257  000B22  6E01               	movwf	fputc@c^0,c
  1258  000B24  6A02               	clrf	(fputc@c+1)^0,c
  1259  000B26  C03C  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1260  000B2A  C03D  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1261  000B2E  EC2F  F008         	call	_fputc	;wreg free
  1262  000B32                     
  1263                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  1264  000B32  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1265  000B36  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1266  000B3A  2ADE               	incf	postinc2,f,c
  1267  000B3C  0E00               	movlw	0
  1268  000B3E  22DD               	addwfc	postdec2,f,c
  1269  000B40  EF74  F005         	goto	l1693
  1270  000B44                     l868:
  1271  000B44  0012               	return		;funcret
  1272  000B46                     __end_of_vfpfcnvrt:
  1273                           	callstack 0
  1274                           
  1275 ;; *************** function _utoa *****************
  1276 ;; Defined at:
  1277 ;;		line 615 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
  1278 ;; Parameters:    Size  Location     Type
  1279 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1280 ;;		 -> sprintf@f(11), 
  1281 ;;  d               8   29[COMRAM] unsigned long long 
  1282 ;; Auto vars:     Size  Location     Type
  1283 ;;  n               8   49[COMRAM] unsigned long long 
  1284 ;;  i               2   57[COMRAM] int 
  1285 ;;  w               2   47[COMRAM] int 
  1286 ;;  p               2   45[COMRAM] int 
  1287 ;; Return value:  Size  Location     Type
  1288 ;;                  2   27[COMRAM] int 
  1289 ;; Registers used:
  1290 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1291 ;; Tracked objects:
  1292 ;;		On entry : 0/0
  1293 ;;		On exit  : 0/0
  1294 ;;		Unchanged: 0/0
  1295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1296 ;;      Params:        10       0       0       0       0       0       0       0       0
  1297 ;;      Locals:        14       0       0       0       0       0       0       0       0
  1298 ;;      Temps:          8       0       0       0       0       0       0       0       0
  1299 ;;      Totals:        32       0       0       0       0       0       0       0       0
  1300 ;;Total ram usage:       32 bytes
  1301 ;; Hardware stack levels used: 1
  1302 ;; Hardware stack levels required when called: 5
  1303 ;; This function calls:
  1304 ;;		___lodiv
  1305 ;;		___lomod
  1306 ;;		_pad
  1307 ;; This function is called by:
  1308 ;;		_vfpfcnvrt
  1309 ;; This function uses a non-reentrant model
  1310 ;;
  1311                           
  1312                           	psect	text4
  1313  000B46                     __ptext4:
  1314                           	callstack 0
  1315  000B46                     _utoa:
  1316                           	callstack 22
  1317  000B46                     
  1318                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 615: static int u
      +                          toa(FILE *fp, unsigned long long d);C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99
      +                          \common\doprnt.c: 616: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\dop
      +                          rnt.c: 617:     int i, p, w;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common
      +                          \doprnt.c: 618:     unsigned long long n;;C:\Program Files\Microchip\xc8\v2.36\pic\sourc
      +                          es\c99\common\doprnt.c: 621:     if (!(prec < 0)) {
  1319  000B46  0100               	movlb	0	; () banked
  1320  000B48  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1321  000B4A  EFA9  F005         	goto	u731
  1322  000B4E  EFAB  F005         	goto	u730
  1323  000B52                     u731:
  1324  000B52  EFAC  F005         	goto	l1543
  1325  000B56                     u730:
  1326  000B56                     
  1327                           ; BSR set to: 0
  1328                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 622:         flag
      +                          s &= ~(1 << 1);
  1329  000B56  9366               	bcf	_flags& (0+255),1,b
  1330  000B58                     l1543:
  1331                           
  1332                           ; BSR set to: 0
  1333                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 624:     p = (0 <
      +                           prec) ? prec : 1;
  1334  000B58  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1335  000B5A  EFB9  F005         	goto	u740
  1336  000B5E  5165               	movf	(_prec+1)& (0+255),w,b
  1337  000B60  E106               	bnz	u741
  1338  000B62  0564               	decf	_prec& (0+255),w,b
  1339  000B64  B0D8               	btfsc	status,0,c
  1340  000B66  EFB7  F005         	goto	u741
  1341  000B6A  EFB9  F005         	goto	u740
  1342  000B6E                     u741:
  1343  000B6E  EFBF  F005         	goto	l833
  1344  000B72                     u740:
  1345  000B72                     
  1346                           ; BSR set to: 0
  1347  000B72  0E00               	movlw	0
  1348  000B74  6E2F               	movwf	(utoa@p+1)^0,c
  1349  000B76  0E01               	movlw	1
  1350  000B78  6E2E               	movwf	utoa@p^0,c
  1351  000B7A  EFC3  F005         	goto	l835
  1352  000B7E                     l833:
  1353                           
  1354                           ; BSR set to: 0
  1355  000B7E  C064  F02E         	movff	_prec,utoa@p
  1356  000B82  C065  F02F         	movff	_prec+1,utoa@p+1
  1357  000B86                     l835:
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 625:     w = widt
      +                          h;
  1361  000B86  C062  F030         	movff	_width,utoa@w
  1362  000B8A  C063  F031         	movff	_width+1,utoa@w+1
  1363                           
  1364                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 628:     n = d;
  1365  000B8E  C01E  F032         	movff	utoa@d,utoa@n
  1366  000B92  C01F  F033         	movff	utoa@d+1,utoa@n+1
  1367  000B96  C020  F034         	movff	utoa@d+2,utoa@n+2
  1368  000B9A  C021  F035         	movff	utoa@d+3,utoa@n+3
  1369  000B9E  C022  F036         	movff	utoa@d+4,utoa@n+4
  1370  000BA2  C023  F037         	movff	utoa@d+5,utoa@n+5
  1371  000BA6  C024  F038         	movff	utoa@d+6,utoa@n+6
  1372  000BAA  C025  F039         	movff	utoa@d+7,utoa@n+7
  1373  000BAE                     
  1374                           ; BSR set to: 0
  1375                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 629:     i = size
      +                          of(dbuf) - 1;
  1376  000BAE  0E00               	movlw	0
  1377  000BB0  6E3B               	movwf	(utoa@i+1)^0,c
  1378  000BB2  0E1F               	movlw	31
  1379  000BB4  6E3A               	movwf	utoa@i^0,c
  1380  000BB6                     
  1381                           ; BSR set to: 0
  1382                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 630:     dbuf[i] 
      +                          = '\0';
  1383  000BB6  0E00               	movlw	0
  1384  000BB8  6F88               	movwf	(_dbuf+31)& (0+255),b
  1385                           
  1386                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 631:     while (i
      +                           && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1387  000BBA  EF55  F006         	goto	l1561
  1388  000BBE                     l1551:
  1389                           
  1390                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 632:         --i;
  1391  000BBE  063A               	decf	utoa@i^0,f,c
  1392  000BC0  A0D8               	btfss	status,0,c
  1393  000BC2  063B               	decf	(utoa@i+1)^0,f,c
  1394  000BC4                     
  1395                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 633:         dbuf
      +                          [i] = '0' + (n % 10);
  1396  000BC4  0E69               	movlw	low _dbuf
  1397  000BC6  243A               	addwf	utoa@i^0,w,c
  1398  000BC8  6ED9               	movwf	fsr2l,c
  1399  000BCA  0E00               	movlw	high _dbuf
  1400  000BCC  203B               	addwfc	(utoa@i+1)^0,w,c
  1401  000BCE  6EDA               	movwf	fsr2h,c
  1402  000BD0  C032  F001         	movff	utoa@n,___lomod@dividend
  1403  000BD4  C033  F002         	movff	utoa@n+1,___lomod@dividend+1
  1404  000BD8  C034  F003         	movff	utoa@n+2,___lomod@dividend+2
  1405  000BDC  C035  F004         	movff	utoa@n+3,___lomod@dividend+3
  1406  000BE0  C036  F005         	movff	utoa@n+4,___lomod@dividend+4
  1407  000BE4  C037  F006         	movff	utoa@n+5,___lomod@dividend+5
  1408  000BE8  C038  F007         	movff	utoa@n+6,___lomod@dividend+6
  1409  000BEC  C039  F008         	movff	utoa@n+7,___lomod@dividend+7
  1410  000BF0  0E0A               	movlw	10
  1411  000BF2  6E09               	movwf	___lomod@divisor^0,c
  1412  000BF4  0E00               	movlw	0
  1413  000BF6  6E0A               	movwf	(___lomod@divisor+1)^0,c
  1414  000BF8  0E00               	movlw	0
  1415  000BFA  6E0B               	movwf	(___lomod@divisor+2)^0,c
  1416  000BFC  0E00               	movlw	0
  1417  000BFE  6E0C               	movwf	(___lomod@divisor+3)^0,c
  1418  000C00  0E00               	movlw	0
  1419  000C02  6E0D               	movwf	(___lomod@divisor+4)^0,c
  1420  000C04  0E00               	movlw	0
  1421  000C06  6E0E               	movwf	(___lomod@divisor+5)^0,c
  1422  000C08  0E00               	movlw	0
  1423  000C0A  6E0F               	movwf	(___lomod@divisor+6)^0,c
  1424  000C0C  0E00               	movlw	0
  1425  000C0E  6E10               	movwf	(___lomod@divisor+7)^0,c
  1426  000C10  ECC7  F007         	call	___lomod	;wreg free
  1427  000C14  C001  F026         	movff	?___lomod,??_utoa
  1428  000C18  C002  F027         	movff	?___lomod+1,??_utoa+1
  1429  000C1C  C003  F028         	movff	?___lomod+2,??_utoa+2
  1430  000C20  C004  F029         	movff	?___lomod+3,??_utoa+3
  1431  000C24  C005  F02A         	movff	?___lomod+4,??_utoa+4
  1432  000C28  C006  F02B         	movff	?___lomod+5,??_utoa+5
  1433  000C2C  C007  F02C         	movff	?___lomod+6,??_utoa+6
  1434  000C30  C008  F02D         	movff	?___lomod+7,??_utoa+7
  1435  000C34  5026               	movf	??_utoa^0,w,c
  1436  000C36  0F30               	addlw	48
  1437  000C38  6EDF               	movwf	indf2,c
  1438  000C3A                     
  1439                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 634:         --p;
  1440  000C3A  062E               	decf	utoa@p^0,f,c
  1441  000C3C  A0D8               	btfss	status,0,c
  1442  000C3E  062F               	decf	(utoa@p+1)^0,f,c
  1443  000C40                     
  1444                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 635:         --w;
  1445  000C40  0630               	decf	utoa@w^0,f,c
  1446  000C42  A0D8               	btfss	status,0,c
  1447  000C44  0631               	decf	(utoa@w+1)^0,f,c
  1448  000C46                     
  1449                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 636:         n = 
      +                          n / 10;
  1450  000C46  C032  F001         	movff	utoa@n,___lodiv@dividend
  1451  000C4A  C033  F002         	movff	utoa@n+1,___lodiv@dividend+1
  1452  000C4E  C034  F003         	movff	utoa@n+2,___lodiv@dividend+2
  1453  000C52  C035  F004         	movff	utoa@n+3,___lodiv@dividend+3
  1454  000C56  C036  F005         	movff	utoa@n+4,___lodiv@dividend+4
  1455  000C5A  C037  F006         	movff	utoa@n+5,___lodiv@dividend+5
  1456  000C5E  C038  F007         	movff	utoa@n+6,___lodiv@dividend+6
  1457  000C62  C039  F008         	movff	utoa@n+7,___lodiv@dividend+7
  1458  000C66  0E0A               	movlw	10
  1459  000C68  6E09               	movwf	___lodiv@divisor^0,c
  1460  000C6A  0E00               	movlw	0
  1461  000C6C  6E0A               	movwf	(___lodiv@divisor+1)^0,c
  1462  000C6E  0E00               	movlw	0
  1463  000C70  6E0B               	movwf	(___lodiv@divisor+2)^0,c
  1464  000C72  0E00               	movlw	0
  1465  000C74  6E0C               	movwf	(___lodiv@divisor+3)^0,c
  1466  000C76  0E00               	movlw	0
  1467  000C78  6E0D               	movwf	(___lodiv@divisor+4)^0,c
  1468  000C7A  0E00               	movlw	0
  1469  000C7C  6E0E               	movwf	(___lodiv@divisor+5)^0,c
  1470  000C7E  0E00               	movlw	0
  1471  000C80  6E0F               	movwf	(___lodiv@divisor+6)^0,c
  1472  000C82  0E00               	movlw	0
  1473  000C84  6E10               	movwf	(___lodiv@divisor+7)^0,c
  1474  000C86  EC4F  F007         	call	___lodiv	;wreg free
  1475  000C8A  C001  F032         	movff	?___lodiv,utoa@n
  1476  000C8E  C002  F033         	movff	?___lodiv+1,utoa@n+1
  1477  000C92  C003  F034         	movff	?___lodiv+2,utoa@n+2
  1478  000C96  C004  F035         	movff	?___lodiv+3,utoa@n+3
  1479  000C9A  C005  F036         	movff	?___lodiv+4,utoa@n+4
  1480  000C9E  C006  F037         	movff	?___lodiv+5,utoa@n+5
  1481  000CA2  C007  F038         	movff	?___lodiv+6,utoa@n+6
  1482  000CA6  C008  F039         	movff	?___lodiv+7,utoa@n+7
  1483  000CAA                     l1561:
  1484                           
  1485                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 631:     while (i
      +                           && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1486  000CAA  503A               	movf	utoa@i^0,w,c
  1487  000CAC  103B               	iorwf	(utoa@i+1)^0,w,c
  1488  000CAE  B4D8               	btfsc	status,2,c
  1489  000CB0  EF5C  F006         	goto	u751
  1490  000CB4  EF5E  F006         	goto	u750
  1491  000CB8                     u751:
  1492  000CB8  EF8F  F006         	goto	l1571
  1493  000CBC                     u750:
  1494  000CBC  5032               	movf	utoa@n^0,w,c
  1495  000CBE  1033               	iorwf	(utoa@n+1)^0,w,c
  1496  000CC0  1034               	iorwf	(utoa@n+2)^0,w,c
  1497  000CC2  1035               	iorwf	(utoa@n+3)^0,w,c
  1498  000CC4  1036               	iorwf	(utoa@n+4)^0,w,c
  1499  000CC6  1037               	iorwf	(utoa@n+5)^0,w,c
  1500  000CC8  1038               	iorwf	(utoa@n+6)^0,w,c
  1501  000CCA  1039               	iorwf	(utoa@n+7)^0,w,c
  1502  000CCC  A4D8               	btfss	status,2,c
  1503  000CCE  EF6B  F006         	goto	u761
  1504  000CD2  EF6D  F006         	goto	u760
  1505  000CD6                     u761:
  1506  000CD6  EFDF  F005         	goto	l1551
  1507  000CDA                     u760:
  1508  000CDA  BE2F               	btfsc	(utoa@p+1)^0,7,c
  1509  000CDC  EF7A  F006         	goto	u770
  1510  000CE0  502F               	movf	(utoa@p+1)^0,w,c
  1511  000CE2  E106               	bnz	u771
  1512  000CE4  042E               	decf	utoa@p^0,w,c
  1513  000CE6  B0D8               	btfsc	status,0,c
  1514  000CE8  EF78  F006         	goto	u771
  1515  000CEC  EF7A  F006         	goto	u770
  1516  000CF0                     u771:
  1517  000CF0  EFDF  F005         	goto	l1551
  1518  000CF4                     u770:
  1519  000CF4  BE31               	btfsc	(utoa@w+1)^0,7,c
  1520  000CF6  EF85  F006         	goto	u781
  1521  000CFA  5031               	movf	(utoa@w+1)^0,w,c
  1522  000CFC  E108               	bnz	u780
  1523  000CFE  0430               	decf	utoa@w^0,w,c
  1524  000D00  A0D8               	btfss	status,0,c
  1525  000D02  EF85  F006         	goto	u781
  1526  000D06  EF87  F006         	goto	u780
  1527  000D0A                     u781:
  1528  000D0A  EF8F  F006         	goto	l1571
  1529  000D0E                     u780:
  1530  000D0E  0100               	movlb	0	; () banked
  1531  000D10  B366               	btfsc	_flags& (0+255),1,b
  1532  000D12  EF8D  F006         	goto	u791
  1533  000D16  EF8F  F006         	goto	u790
  1534  000D1A                     u791:
  1535  000D1A  EFDF  F005         	goto	l1551
  1536  000D1E                     u790:
  1537  000D1E                     l1571:
  1538                           
  1539                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 640:     return p
      +                          ad(fp, &dbuf[i], w);
  1540  000D1E  C01C  F011         	movff	utoa@fp,pad@fp
  1541  000D22  C01D  F012         	movff	utoa@fp+1,pad@fp+1
  1542  000D26  0E69               	movlw	low _dbuf
  1543  000D28  243A               	addwf	utoa@i^0,w,c
  1544  000D2A  6E13               	movwf	pad@buf^0,c
  1545  000D2C  0E00               	movlw	high _dbuf
  1546  000D2E  203B               	addwfc	(utoa@i+1)^0,w,c
  1547  000D30  6E14               	movwf	(pad@buf+1)^0,c
  1548  000D32  C030  F015         	movff	utoa@w,pad@p
  1549  000D36  C031  F016         	movff	utoa@w+1,pad@p+1
  1550  000D3A  EC94  F008         	call	_pad	;wreg free
  1551  000D3E  C011  F01C         	movff	?_pad,?_utoa
  1552  000D42  C012  F01D         	movff	?_pad+1,?_utoa+1
  1553  000D46  0012               	return		;funcret
  1554  000D48                     __end_of_utoa:
  1555                           	callstack 0
  1556                           
  1557 ;; *************** function _pad *****************
  1558 ;; Defined at:
  1559 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
  1560 ;; Parameters:    Size  Location     Type
  1561 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1562 ;;		 -> sprintf@f(11), 
  1563 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1564 ;;		 -> dbuf(32), 
  1565 ;;  p               2   20[COMRAM] int 
  1566 ;; Auto vars:     Size  Location     Type
  1567 ;;  w               2   25[COMRAM] int 
  1568 ;;  i               2   23[COMRAM] int 
  1569 ;; Return value:  Size  Location     Type
  1570 ;;                  2   16[COMRAM] int 
  1571 ;; Registers used:
  1572 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1573 ;; Tracked objects:
  1574 ;;		On entry : 0/0
  1575 ;;		On exit  : 0/0
  1576 ;;		Unchanged: 0/0
  1577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1578 ;;      Params:         6       0       0       0       0       0       0       0       0
  1579 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1580 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1581 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1582 ;;Total ram usage:       11 bytes
  1583 ;; Hardware stack levels used: 1
  1584 ;; Hardware stack levels required when called: 4
  1585 ;; This function calls:
  1586 ;;		_fputc
  1587 ;;		_fputs
  1588 ;;		_strlen
  1589 ;; This function is called by:
  1590 ;;		_utoa
  1591 ;; This function uses a non-reentrant model
  1592 ;;
  1593                           
  1594                           	psect	text5
  1595  001128                     __ptext5:
  1596                           	callstack 0
  1597  001128                     _pad:
  1598                           	callstack 22
  1599  001128                     
  1600                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  1601  001128  0100               	movlb	0	; () banked
  1602  00112A  A166               	btfss	_flags& (0+255),0,b
  1603  00112C  EF9A  F008         	goto	u651
  1604  001130  EF9C  F008         	goto	u650
  1605  001134                     u651:
  1606  001134  EFA6  F008         	goto	l1505
  1607  001138                     u650:
  1608  001138                     
  1609                           ; BSR set to: 0
  1610                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  1611  001138  C013  F00A         	movff	pad@buf,fputs@s
  1612  00113C  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1613  001140  C011  F00C         	movff	pad@fp,fputs@fp
  1614  001144  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1615  001148  EC55  F00A         	call	_fputs	;wreg free
  1616  00114C                     l1505:
  1617                           
  1618                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  1619  00114C  BE16               	btfsc	(pad@p+1)^0,7,c
  1620  00114E  EFAB  F008         	goto	u661
  1621  001152  EFAD  F008         	goto	u660
  1622  001156                     u661:
  1623  001156  EFB3  F008         	goto	l1509
  1624  00115A                     u660:
  1625  00115A  C015  F01A         	movff	pad@p,pad@w
  1626  00115E  C016  F01B         	movff	pad@p+1,pad@w+1
  1627  001162  EFB7  F008         	goto	l823
  1628  001166                     l1509:
  1629  001166  0E00               	movlw	0
  1630  001168  6E1B               	movwf	(pad@w+1)^0,c
  1631  00116A  0E00               	movlw	0
  1632  00116C  6E1A               	movwf	pad@w^0,c
  1633  00116E                     l823:
  1634                           
  1635                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  1636  00116E  0E00               	movlw	0
  1637  001170  6E19               	movwf	(pad@i+1)^0,c
  1638  001172  0E00               	movlw	0
  1639  001174  6E18               	movwf	pad@i^0,c
  1640                           
  1641                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1642  001176  EFC9  F008         	goto	l1515
  1643  00117A                     l1511:
  1644                           
  1645                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  1646  00117A  0E00               	movlw	0
  1647  00117C  6E02               	movwf	(fputc@c+1)^0,c
  1648  00117E  0E20               	movlw	32
  1649  001180  6E01               	movwf	fputc@c^0,c
  1650  001182  C011  F003         	movff	pad@fp,fputc@fp
  1651  001186  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1652  00118A  EC2F  F008         	call	_fputc	;wreg free
  1653  00118E                     
  1654                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 86:         ++i;
  1655  00118E  4A18               	infsnz	pad@i^0,f,c
  1656  001190  2A19               	incf	(pad@i+1)^0,f,c
  1657  001192                     l1515:
  1658                           
  1659                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1660  001192  501A               	movf	pad@w^0,w,c
  1661  001194  5C18               	subwf	pad@i^0,w,c
  1662  001196  5019               	movf	(pad@i+1)^0,w,c
  1663  001198  0A80               	xorlw	128
  1664  00119A  6E17               	movwf	??_pad^0,c
  1665  00119C  501B               	movf	(pad@w+1)^0,w,c
  1666  00119E  0A80               	xorlw	128
  1667  0011A0  5817               	subwfb	??_pad^0,w,c
  1668  0011A2  A0D8               	btfss	status,0,c
  1669  0011A4  EFD6  F008         	goto	u671
  1670  0011A8  EFD8  F008         	goto	u670
  1671  0011AC                     u671:
  1672  0011AC  EFBD  F008         	goto	l1511
  1673  0011B0                     u670:
  1674  0011B0                     
  1675                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  1676  0011B0  0100               	movlb	0	; () banked
  1677  0011B2  B166               	btfsc	_flags& (0+255),0,b
  1678  0011B4  EFDE  F008         	goto	u681
  1679  0011B8  EFE0  F008         	goto	u680
  1680  0011BC                     u681:
  1681  0011BC  EFEA  F008         	goto	l1519
  1682  0011C0                     u680:
  1683  0011C0                     
  1684                           ; BSR set to: 0
  1685                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  1686  0011C0  C013  F00A         	movff	pad@buf,fputs@s
  1687  0011C4  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1688  0011C8  C011  F00C         	movff	pad@fp,fputs@fp
  1689  0011CC  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1690  0011D0  EC55  F00A         	call	_fputs	;wreg free
  1691  0011D4                     l1519:
  1692                           
  1693                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  1694  0011D4  C013  F001         	movff	pad@buf,strlen@s
  1695  0011D8  C014  F002         	movff	pad@buf+1,strlen@s+1
  1696  0011DC  ECCF  F00A         	call	_strlen	;wreg free
  1697  0011E0  501A               	movf	pad@w^0,w,c
  1698  0011E2  2401               	addwf	?_strlen^0,w,c
  1699  0011E4  6E11               	movwf	?_pad^0,c
  1700  0011E6  501B               	movf	(pad@w+1)^0,w,c
  1701  0011E8  2002               	addwfc	(?_strlen+1)^0,w,c
  1702  0011EA  6E12               	movwf	(?_pad+1)^0,c
  1703  0011EC  0012               	return		;funcret
  1704  0011EE                     __end_of_pad:
  1705                           	callstack 0
  1706                           
  1707 ;; *************** function _strlen *****************
  1708 ;; Defined at:
  1709 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\strlen.c"
  1710 ;; Parameters:    Size  Location     Type
  1711 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1712 ;;		 -> dbuf(32), 
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1715 ;;		 -> dbuf(32), 
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  2    0[COMRAM] unsigned int 
  1718 ;; Registers used:
  1719 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1725 ;;      Params:         2       0       0       0       0       0       0       0       0
  1726 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1727 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1728 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1729 ;;Total ram usage:        4 bytes
  1730 ;; Hardware stack levels used: 1
  1731 ;; Hardware stack levels required when called: 1
  1732 ;; This function calls:
  1733 ;;		Nothing
  1734 ;; This function is called by:
  1735 ;;		_pad
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           	psect	text6
  1740  00159E                     __ptext6:
  1741                           	callstack 0
  1742  00159E                     _strlen:
  1743                           	callstack 24
  1744  00159E  C001  F003         	movff	strlen@s,strlen@a
  1745  0015A2  C002  F004         	movff	strlen@s+1,strlen@a+1
  1746  0015A6  EFD7  F00A         	goto	l1451
  1747  0015AA                     l1449:
  1748  0015AA  4A01               	infsnz	strlen@s^0,f,c
  1749  0015AC  2A02               	incf	(strlen@s+1)^0,f,c
  1750  0015AE                     l1451:
  1751  0015AE  C001  FFD9         	movff	strlen@s,fsr2l
  1752  0015B2  C002  FFDA         	movff	strlen@s+1,fsr2h
  1753  0015B6  50DF               	movf	indf2,w,c
  1754  0015B8  A4D8               	btfss	status,2,c
  1755  0015BA  EFE1  F00A         	goto	u571
  1756  0015BE  EFE3  F00A         	goto	u570
  1757  0015C2                     u571:
  1758  0015C2  EFD5  F00A         	goto	l1449
  1759  0015C6                     u570:
  1760  0015C6  5003               	movf	strlen@a^0,w,c
  1761  0015C8  5C01               	subwf	strlen@s^0,w,c
  1762  0015CA  6E01               	movwf	?_strlen^0,c
  1763  0015CC  5004               	movf	(strlen@a+1)^0,w,c
  1764  0015CE  5802               	subwfb	(strlen@s+1)^0,w,c
  1765  0015D0  6E02               	movwf	(?_strlen+1)^0,c
  1766  0015D2  0012               	return		;funcret
  1767  0015D4                     __end_of_strlen:
  1768                           	callstack 0
  1769                           
  1770 ;; *************** function _fputs *****************
  1771 ;; Defined at:
  1772 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\nf_fputs.c"
  1773 ;; Parameters:    Size  Location     Type
  1774 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1775 ;;		 -> dbuf(32), 
  1776 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1777 ;;		 -> sprintf@f(11), 
  1778 ;; Auto vars:     Size  Location     Type
  1779 ;;  i               2   14[COMRAM] int 
  1780 ;;  c               1   13[COMRAM] unsigned char 
  1781 ;; Return value:  Size  Location     Type
  1782 ;;                  2    9[COMRAM] int 
  1783 ;; Registers used:
  1784 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1790 ;;      Params:         4       0       0       0       0       0       0       0       0
  1791 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1792 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1793 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1794 ;;Total ram usage:        7 bytes
  1795 ;; Hardware stack levels used: 1
  1796 ;; Hardware stack levels required when called: 3
  1797 ;; This function calls:
  1798 ;;		_fputc
  1799 ;; This function is called by:
  1800 ;;		_pad
  1801 ;; This function uses a non-reentrant model
  1802 ;;
  1803                           
  1804                           	psect	text7
  1805  0014AA                     __ptext7:
  1806                           	callstack 0
  1807  0014AA                     _fputs:
  1808                           	callstack 22
  1809  0014AA  0E00               	movlw	0
  1810  0014AC  6E10               	movwf	(fputs@i+1)^0,c
  1811  0014AE  0E00               	movlw	0
  1812  0014B0  6E0F               	movwf	fputs@i^0,c
  1813  0014B2  EF66  F00A         	goto	l1445
  1814  0014B6                     l1441:
  1815  0014B6  C00E  F001         	movff	fputs@c,fputc@c
  1816  0014BA  6A02               	clrf	(fputc@c+1)^0,c
  1817  0014BC  C00C  F003         	movff	fputs@fp,fputc@fp
  1818  0014C0  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1819  0014C4  EC2F  F008         	call	_fputc	;wreg free
  1820  0014C8  4A0F               	infsnz	fputs@i^0,f,c
  1821  0014CA  2A10               	incf	(fputs@i+1)^0,f,c
  1822  0014CC                     l1445:
  1823  0014CC  500F               	movf	fputs@i^0,w,c
  1824  0014CE  240A               	addwf	fputs@s^0,w,c
  1825  0014D0  6ED9               	movwf	fsr2l,c
  1826  0014D2  5010               	movf	(fputs@i+1)^0,w,c
  1827  0014D4  200B               	addwfc	(fputs@s+1)^0,w,c
  1828  0014D6  6EDA               	movwf	fsr2h,c
  1829  0014D8  50DF               	movf	indf2,w,c
  1830  0014DA  6E0E               	movwf	fputs@c^0,c
  1831  0014DC  500E               	movf	fputs@c^0,w,c
  1832  0014DE  A4D8               	btfss	status,2,c
  1833  0014E0  EF74  F00A         	goto	u561
  1834  0014E4  EF76  F00A         	goto	u560
  1835  0014E8                     u561:
  1836  0014E8  EF5B  F00A         	goto	l1441
  1837  0014EC                     u560:
  1838  0014EC  0012               	return		;funcret
  1839  0014EE                     __end_of_fputs:
  1840                           	callstack 0
  1841                           
  1842 ;; *************** function _fputc *****************
  1843 ;; Defined at:
  1844 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\nf_fputc.c"
  1845 ;; Parameters:    Size  Location     Type
  1846 ;;  c               2    0[COMRAM] int 
  1847 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1848 ;;		 -> sprintf@f(11), 
  1849 ;; Auto vars:     Size  Location     Type
  1850 ;;		None
  1851 ;; Return value:  Size  Location     Type
  1852 ;;                  2    0[COMRAM] int 
  1853 ;; Registers used:
  1854 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1855 ;; Tracked objects:
  1856 ;;		On entry : 0/0
  1857 ;;		On exit  : 0/0
  1858 ;;		Unchanged: 0/0
  1859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1860 ;;      Params:         4       0       0       0       0       0       0       0       0
  1861 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1862 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1863 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1864 ;;Total ram usage:        9 bytes
  1865 ;; Hardware stack levels used: 1
  1866 ;; Hardware stack levels required when called: 2
  1867 ;; This function calls:
  1868 ;;		_putch
  1869 ;; This function is called by:
  1870 ;;		_pad
  1871 ;;		_vfpfcnvrt
  1872 ;;		_fputs
  1873 ;; This function uses a non-reentrant model
  1874 ;;
  1875                           
  1876                           	psect	text8
  1877  00105E                     __ptext8:
  1878                           	callstack 0
  1879  00105E                     _fputc:
  1880                           	callstack 22
  1881  00105E  5003               	movf	fputc@fp^0,w,c
  1882  001060  1004               	iorwf	(fputc@fp+1)^0,w,c
  1883  001062  B4D8               	btfsc	status,2,c
  1884  001064  EF36  F008         	goto	u521
  1885  001068  EF38  F008         	goto	u520
  1886  00106C                     u521:
  1887  00106C  EF41  F008         	goto	l1429
  1888  001070                     u520:
  1889  001070  5003               	movf	fputc@fp^0,w,c
  1890  001072  1004               	iorwf	(fputc@fp+1)^0,w,c
  1891  001074  A4D8               	btfss	status,2,c
  1892  001076  EF3F  F008         	goto	u531
  1893  00107A  EF41  F008         	goto	u530
  1894  00107E                     u531:
  1895  00107E  EF46  F008         	goto	l1431
  1896  001082                     u530:
  1897  001082                     l1429:
  1898  001082  5001               	movf	fputc@c^0,w,c
  1899  001084  EC46  F00B         	call	_putch
  1900  001088  EF93  F008         	goto	l926
  1901  00108C                     l1431:
  1902  00108C  EE20 F009          	lfsr	2,9
  1903  001090  5003               	movf	fputc@fp^0,w,c
  1904  001092  26D9               	addwf	fsr2l,f,c
  1905  001094  5004               	movf	(fputc@fp+1)^0,w,c
  1906  001096  22DA               	addwfc	fsr2h,f,c
  1907  001098  50DE               	movf	postinc2,w,c
  1908  00109A  10DE               	iorwf	postinc2,w,c
  1909  00109C  B4D8               	btfsc	status,2,c
  1910  00109E  EF53  F008         	goto	u541
  1911  0010A2  EF55  F008         	goto	u540
  1912  0010A6                     u541:
  1913  0010A6  EF70  F008         	goto	l1435
  1914  0010AA                     u540:
  1915  0010AA  EE20 F009          	lfsr	2,9
  1916  0010AE  5003               	movf	fputc@fp^0,w,c
  1917  0010B0  26D9               	addwf	fsr2l,f,c
  1918  0010B2  5004               	movf	(fputc@fp+1)^0,w,c
  1919  0010B4  22DA               	addwfc	fsr2h,f,c
  1920  0010B6  EE10 F003          	lfsr	1,3
  1921  0010BA  5003               	movf	fputc@fp^0,w,c
  1922  0010BC  26E1               	addwf	fsr1l,f,c
  1923  0010BE  5004               	movf	(fputc@fp+1)^0,w,c
  1924  0010C0  22E2               	addwfc	fsr1h,f,c
  1925  0010C2  50DE               	movf	postinc2,w,c
  1926  0010C4  5CE6               	subwf	postinc1,w,c
  1927  0010C6  50E6               	movf	postinc1,w,c
  1928  0010C8  0A80               	xorlw	128
  1929  0010CA  6E09               	movwf	(??_fputc+4)^0,c
  1930  0010CC  50DE               	movf	postinc2,w,c
  1931  0010CE  0A80               	xorlw	128
  1932  0010D0  5809               	subwfb	(??_fputc+4)^0,w,c
  1933  0010D2  B0D8               	btfsc	status,0,c
  1934  0010D4  EF6E  F008         	goto	u551
  1935  0010D8  EF70  F008         	goto	u550
  1936  0010DC                     u551:
  1937  0010DC  EF93  F008         	goto	l926
  1938  0010E0                     u550:
  1939  0010E0                     l1435:
  1940  0010E0  EE20 F003          	lfsr	2,3
  1941  0010E4  5003               	movf	fputc@fp^0,w,c
  1942  0010E6  26D9               	addwf	fsr2l,f,c
  1943  0010E8  5004               	movf	(fputc@fp+1)^0,w,c
  1944  0010EA  22DA               	addwfc	fsr2h,f,c
  1945  0010EC  CFDE F005          	movff	postinc2,??_fputc
  1946  0010F0  CFDD F006          	movff	postdec2,??_fputc+1
  1947  0010F4  C003  FFD9         	movff	fputc@fp,fsr2l
  1948  0010F8  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1949  0010FC  CFDE F007          	movff	postinc2,??_fputc+2
  1950  001100  CFDD F008          	movff	postdec2,??_fputc+3
  1951  001104  5005               	movf	??_fputc^0,w,c
  1952  001106  2407               	addwf	(??_fputc+2)^0,w,c
  1953  001108  6ED9               	movwf	fsr2l,c
  1954  00110A  5006               	movf	(??_fputc+1)^0,w,c
  1955  00110C  2008               	addwfc	(??_fputc+3)^0,w,c
  1956  00110E  6EDA               	movwf	fsr2h,c
  1957  001110  C001  FFDF         	movff	fputc@c,indf2
  1958  001114  EE20 F003          	lfsr	2,3
  1959  001118  5003               	movf	fputc@fp^0,w,c
  1960  00111A  26D9               	addwf	fsr2l,f,c
  1961  00111C  5004               	movf	(fputc@fp+1)^0,w,c
  1962  00111E  22DA               	addwfc	fsr2h,f,c
  1963  001120  2ADE               	incf	postinc2,f,c
  1964  001122  0E00               	movlw	0
  1965  001124  22DD               	addwfc	postdec2,f,c
  1966  001126                     l926:
  1967  001126  0012               	return		;funcret
  1968  001128                     __end_of_fputc:
  1969                           	callstack 0
  1970                           
  1971 ;; *************** function _putch *****************
  1972 ;; Defined at:
  1973 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\putch.c"
  1974 ;; Parameters:    Size  Location     Type
  1975 ;;  c               1    wreg     unsigned char 
  1976 ;; Auto vars:     Size  Location     Type
  1977 ;;  c               1    0[COMRAM] unsigned char 
  1978 ;; Return value:  Size  Location     Type
  1979 ;;                  1    wreg      void 
  1980 ;; Registers used:
  1981 ;;		wreg
  1982 ;; Tracked objects:
  1983 ;;		On entry : 0/0
  1984 ;;		On exit  : 0/0
  1985 ;;		Unchanged: 0/0
  1986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1987 ;;      Params:         0       0       0       0       0       0       0       0       0
  1988 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1989 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1990 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1991 ;;Total ram usage:        0 bytes
  1992 ;; Hardware stack levels used: 1
  1993 ;; Hardware stack levels required when called: 1
  1994 ;; This function calls:
  1995 ;;		Nothing
  1996 ;; This function is called by:
  1997 ;;		_fputc
  1998 ;; This function uses a non-reentrant model
  1999 ;;
  2000                           
  2001                           	psect	text9
  2002  00168C                     __ptext9:
  2003                           	callstack 0
  2004  00168C                     _putch:
  2005                           	callstack 22
  2006  00168C  0012               	return		;funcret
  2007  00168E                     __end_of_putch:
  2008                           	callstack 0
  2009                           
  2010 ;; *************** function ___lomod *****************
  2011 ;; Defined at:
  2012 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lomod.c"
  2013 ;; Parameters:    Size  Location     Type
  2014 ;;  dividend        8    0[COMRAM] unsigned long long 
  2015 ;;  divisor         8    8[COMRAM] unsigned long long 
  2016 ;; Auto vars:     Size  Location     Type
  2017 ;;  counter         1   16[COMRAM] unsigned char 
  2018 ;; Return value:  Size  Location     Type
  2019 ;;                  8    0[COMRAM] unsigned long long 
  2020 ;; Registers used:
  2021 ;;		wreg, status,2, status,0
  2022 ;; Tracked objects:
  2023 ;;		On entry : 0/0
  2024 ;;		On exit  : 0/0
  2025 ;;		Unchanged: 0/0
  2026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2027 ;;      Params:        16       0       0       0       0       0       0       0       0
  2028 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2029 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2030 ;;      Totals:        17       0       0       0       0       0       0       0       0
  2031 ;;Total ram usage:       17 bytes
  2032 ;; Hardware stack levels used: 1
  2033 ;; Hardware stack levels required when called: 1
  2034 ;; This function calls:
  2035 ;;		Nothing
  2036 ;; This function is called by:
  2037 ;;		_utoa
  2038 ;; This function uses a non-reentrant model
  2039 ;;
  2040                           
  2041                           	psect	text10
  2042  000F8E                     __ptext10:
  2043                           	callstack 0
  2044  000F8E                     ___lomod:
  2045                           	callstack 25
  2046  000F8E  5009               	movf	___lomod@divisor^0,w,c
  2047  000F90  100A               	iorwf	(___lomod@divisor+1)^0,w,c
  2048  000F92  100B               	iorwf	(___lomod@divisor+2)^0,w,c
  2049  000F94  100C               	iorwf	(___lomod@divisor+3)^0,w,c
  2050  000F96  100D               	iorwf	(___lomod@divisor+4)^0,w,c
  2051  000F98  100E               	iorwf	(___lomod@divisor+5)^0,w,c
  2052  000F9A  100F               	iorwf	(___lomod@divisor+6)^0,w,c
  2053  000F9C  1010               	iorwf	(___lomod@divisor+7)^0,w,c
  2054  000F9E  B4D8               	btfsc	status,2,c
  2055  000FA0  EFD4  F007         	goto	u621
  2056  000FA4  EFD6  F007         	goto	u620
  2057  000FA8                     u621:
  2058  000FA8  EF1E  F008         	goto	l564
  2059  000FAC                     u620:
  2060  000FAC  0E01               	movlw	1
  2061  000FAE  6E11               	movwf	___lomod@counter^0,c
  2062  000FB0  EFE4  F007         	goto	l1491
  2063  000FB4                     l1489:
  2064  000FB4  90D8               	bcf	status,0,c
  2065  000FB6  3609               	rlcf	___lomod@divisor^0,f,c
  2066  000FB8  360A               	rlcf	(___lomod@divisor+1)^0,f,c
  2067  000FBA  360B               	rlcf	(___lomod@divisor+2)^0,f,c
  2068  000FBC  360C               	rlcf	(___lomod@divisor+3)^0,f,c
  2069  000FBE  360D               	rlcf	(___lomod@divisor+4)^0,f,c
  2070  000FC0  360E               	rlcf	(___lomod@divisor+5)^0,f,c
  2071  000FC2  360F               	rlcf	(___lomod@divisor+6)^0,f,c
  2072  000FC4  3610               	rlcf	(___lomod@divisor+7)^0,f,c
  2073  000FC6  2A11               	incf	___lomod@counter^0,f,c
  2074  000FC8                     l1491:
  2075  000FC8  AE10               	btfss	(___lomod@divisor+7)^0,7,c
  2076  000FCA  EFE9  F007         	goto	u631
  2077  000FCE  EFEB  F007         	goto	u630
  2078  000FD2                     u631:
  2079  000FD2  EFDA  F007         	goto	l1489
  2080  000FD6                     u630:
  2081  000FD6                     l1493:
  2082  000FD6  5009               	movf	___lomod@divisor^0,w,c
  2083  000FD8  5C01               	subwf	___lomod@dividend^0,w,c
  2084  000FDA  500A               	movf	(___lomod@divisor+1)^0,w,c
  2085  000FDC  5802               	subwfb	(___lomod@dividend+1)^0,w,c
  2086  000FDE  500B               	movf	(___lomod@divisor+2)^0,w,c
  2087  000FE0  5803               	subwfb	(___lomod@dividend+2)^0,w,c
  2088  000FE2  500C               	movf	(___lomod@divisor+3)^0,w,c
  2089  000FE4  5804               	subwfb	(___lomod@dividend+3)^0,w,c
  2090  000FE6  500D               	movf	(___lomod@divisor+4)^0,w,c
  2091  000FE8  5805               	subwfb	(___lomod@dividend+4)^0,w,c
  2092  000FEA  500E               	movf	(___lomod@divisor+5)^0,w,c
  2093  000FEC  5806               	subwfb	(___lomod@dividend+5)^0,w,c
  2094  000FEE  500F               	movf	(___lomod@divisor+6)^0,w,c
  2095  000FF0  5807               	subwfb	(___lomod@dividend+6)^0,w,c
  2096  000FF2  5010               	movf	(___lomod@divisor+7)^0,w,c
  2097  000FF4  5808               	subwfb	(___lomod@dividend+7)^0,w,c
  2098  000FF6  A0D8               	btfss	status,0,c
  2099  000FF8  EF00  F008         	goto	u641
  2100  000FFC  EF02  F008         	goto	u640
  2101  001000                     u641:
  2102  001000  EF12  F008         	goto	l1497
  2103  001004                     u640:
  2104  001004  5009               	movf	___lomod@divisor^0,w,c
  2105  001006  5E01               	subwf	___lomod@dividend^0,f,c
  2106  001008  500A               	movf	(___lomod@divisor+1)^0,w,c
  2107  00100A  5A02               	subwfb	(___lomod@dividend+1)^0,f,c
  2108  00100C  500B               	movf	(___lomod@divisor+2)^0,w,c
  2109  00100E  5A03               	subwfb	(___lomod@dividend+2)^0,f,c
  2110  001010  500C               	movf	(___lomod@divisor+3)^0,w,c
  2111  001012  5A04               	subwfb	(___lomod@dividend+3)^0,f,c
  2112  001014  500D               	movf	(___lomod@divisor+4)^0,w,c
  2113  001016  5A05               	subwfb	(___lomod@dividend+4)^0,f,c
  2114  001018  500E               	movf	(___lomod@divisor+5)^0,w,c
  2115  00101A  5A06               	subwfb	(___lomod@dividend+5)^0,f,c
  2116  00101C  500F               	movf	(___lomod@divisor+6)^0,w,c
  2117  00101E  5A07               	subwfb	(___lomod@dividend+6)^0,f,c
  2118  001020  5010               	movf	(___lomod@divisor+7)^0,w,c
  2119  001022  5A08               	subwfb	(___lomod@dividend+7)^0,f,c
  2120  001024                     l1497:
  2121  001024  90D8               	bcf	status,0,c
  2122  001026  3210               	rrcf	(___lomod@divisor+7)^0,f,c
  2123  001028  320F               	rrcf	(___lomod@divisor+6)^0,f,c
  2124  00102A  320E               	rrcf	(___lomod@divisor+5)^0,f,c
  2125  00102C  320D               	rrcf	(___lomod@divisor+4)^0,f,c
  2126  00102E  320C               	rrcf	(___lomod@divisor+3)^0,f,c
  2127  001030  320B               	rrcf	(___lomod@divisor+2)^0,f,c
  2128  001032  320A               	rrcf	(___lomod@divisor+1)^0,f,c
  2129  001034  3209               	rrcf	___lomod@divisor^0,f,c
  2130  001036  2E11               	decfsz	___lomod@counter^0,f,c
  2131  001038  EFEB  F007         	goto	l1493
  2132  00103C                     l564:
  2133  00103C  C001  F001         	movff	___lomod@dividend,?___lomod
  2134  001040  C002  F002         	movff	___lomod@dividend+1,?___lomod+1
  2135  001044  C003  F003         	movff	___lomod@dividend+2,?___lomod+2
  2136  001048  C004  F004         	movff	___lomod@dividend+3,?___lomod+3
  2137  00104C  C005  F005         	movff	___lomod@dividend+4,?___lomod+4
  2138  001050  C006  F006         	movff	___lomod@dividend+5,?___lomod+5
  2139  001054  C007  F007         	movff	___lomod@dividend+6,?___lomod+6
  2140  001058  C008  F008         	movff	___lomod@dividend+7,?___lomod+7
  2141  00105C  0012               	return		;funcret
  2142  00105E                     __end_of___lomod:
  2143                           	callstack 0
  2144                           
  2145 ;; *************** function ___lodiv *****************
  2146 ;; Defined at:
  2147 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lodiv.c"
  2148 ;; Parameters:    Size  Location     Type
  2149 ;;  dividend        8    0[COMRAM] unsigned long long 
  2150 ;;  divisor         8    8[COMRAM] unsigned long long 
  2151 ;; Auto vars:     Size  Location     Type
  2152 ;;  quotient        8   16[COMRAM] unsigned long long 
  2153 ;;  counter         1   24[COMRAM] unsigned char 
  2154 ;; Return value:  Size  Location     Type
  2155 ;;                  8    0[COMRAM] unsigned long long 
  2156 ;; Registers used:
  2157 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2158 ;; Tracked objects:
  2159 ;;		On entry : 0/0
  2160 ;;		On exit  : 0/0
  2161 ;;		Unchanged: 0/0
  2162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2163 ;;      Params:        16       0       0       0       0       0       0       0       0
  2164 ;;      Locals:         9       0       0       0       0       0       0       0       0
  2165 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2166 ;;      Totals:        25       0       0       0       0       0       0       0       0
  2167 ;;Total ram usage:       25 bytes
  2168 ;; Hardware stack levels used: 1
  2169 ;; Hardware stack levels required when called: 1
  2170 ;; This function calls:
  2171 ;;		Nothing
  2172 ;; This function is called by:
  2173 ;;		_utoa
  2174 ;; This function uses a non-reentrant model
  2175 ;;
  2176                           
  2177                           	psect	text11
  2178  000E9E                     __ptext11:
  2179                           	callstack 0
  2180  000E9E                     ___lodiv:
  2181                           	callstack 25
  2182  000E9E  EE20  F011         	lfsr	2,___lodiv@quotient
  2183  000EA2  0E07               	movlw	7
  2184  000EA4                     u581:
  2185  000EA4  6ADE               	clrf	postinc2,c
  2186  000EA6  06E8               	decf	wreg,f,c
  2187  000EA8  E2FD               	bc	u581
  2188  000EAA  5009               	movf	___lodiv@divisor^0,w,c
  2189  000EAC  100A               	iorwf	(___lodiv@divisor+1)^0,w,c
  2190  000EAE  100B               	iorwf	(___lodiv@divisor+2)^0,w,c
  2191  000EB0  100C               	iorwf	(___lodiv@divisor+3)^0,w,c
  2192  000EB2  100D               	iorwf	(___lodiv@divisor+4)^0,w,c
  2193  000EB4  100E               	iorwf	(___lodiv@divisor+5)^0,w,c
  2194  000EB6  100F               	iorwf	(___lodiv@divisor+6)^0,w,c
  2195  000EB8  1010               	iorwf	(___lodiv@divisor+7)^0,w,c
  2196  000EBA  B4D8               	btfsc	status,2,c
  2197  000EBC  EF62  F007         	goto	u591
  2198  000EC0  EF64  F007         	goto	u590
  2199  000EC4                     u591:
  2200  000EC4  EFB6  F007         	goto	l554
  2201  000EC8                     u590:
  2202  000EC8  0E01               	movlw	1
  2203  000ECA  6E19               	movwf	___lodiv@counter^0,c
  2204  000ECC  EF72  F007         	goto	l1471
  2205  000ED0                     l1469:
  2206  000ED0  90D8               	bcf	status,0,c
  2207  000ED2  3609               	rlcf	___lodiv@divisor^0,f,c
  2208  000ED4  360A               	rlcf	(___lodiv@divisor+1)^0,f,c
  2209  000ED6  360B               	rlcf	(___lodiv@divisor+2)^0,f,c
  2210  000ED8  360C               	rlcf	(___lodiv@divisor+3)^0,f,c
  2211  000EDA  360D               	rlcf	(___lodiv@divisor+4)^0,f,c
  2212  000EDC  360E               	rlcf	(___lodiv@divisor+5)^0,f,c
  2213  000EDE  360F               	rlcf	(___lodiv@divisor+6)^0,f,c
  2214  000EE0  3610               	rlcf	(___lodiv@divisor+7)^0,f,c
  2215  000EE2  2A19               	incf	___lodiv@counter^0,f,c
  2216  000EE4                     l1471:
  2217  000EE4  AE10               	btfss	(___lodiv@divisor+7)^0,7,c
  2218  000EE6  EF77  F007         	goto	u601
  2219  000EEA  EF79  F007         	goto	u600
  2220  000EEE                     u601:
  2221  000EEE  EF68  F007         	goto	l1469
  2222  000EF2                     u600:
  2223  000EF2                     l1473:
  2224  000EF2  90D8               	bcf	status,0,c
  2225  000EF4  3611               	rlcf	___lodiv@quotient^0,f,c
  2226  000EF6  3612               	rlcf	(___lodiv@quotient+1)^0,f,c
  2227  000EF8  3613               	rlcf	(___lodiv@quotient+2)^0,f,c
  2228  000EFA  3614               	rlcf	(___lodiv@quotient+3)^0,f,c
  2229  000EFC  3615               	rlcf	(___lodiv@quotient+4)^0,f,c
  2230  000EFE  3616               	rlcf	(___lodiv@quotient+5)^0,f,c
  2231  000F00  3617               	rlcf	(___lodiv@quotient+6)^0,f,c
  2232  000F02  3618               	rlcf	(___lodiv@quotient+7)^0,f,c
  2233  000F04  5009               	movf	___lodiv@divisor^0,w,c
  2234  000F06  5C01               	subwf	___lodiv@dividend^0,w,c
  2235  000F08  500A               	movf	(___lodiv@divisor+1)^0,w,c
  2236  000F0A  5802               	subwfb	(___lodiv@dividend+1)^0,w,c
  2237  000F0C  500B               	movf	(___lodiv@divisor+2)^0,w,c
  2238  000F0E  5803               	subwfb	(___lodiv@dividend+2)^0,w,c
  2239  000F10  500C               	movf	(___lodiv@divisor+3)^0,w,c
  2240  000F12  5804               	subwfb	(___lodiv@dividend+3)^0,w,c
  2241  000F14  500D               	movf	(___lodiv@divisor+4)^0,w,c
  2242  000F16  5805               	subwfb	(___lodiv@dividend+4)^0,w,c
  2243  000F18  500E               	movf	(___lodiv@divisor+5)^0,w,c
  2244  000F1A  5806               	subwfb	(___lodiv@dividend+5)^0,w,c
  2245  000F1C  500F               	movf	(___lodiv@divisor+6)^0,w,c
  2246  000F1E  5807               	subwfb	(___lodiv@dividend+6)^0,w,c
  2247  000F20  5010               	movf	(___lodiv@divisor+7)^0,w,c
  2248  000F22  5808               	subwfb	(___lodiv@dividend+7)^0,w,c
  2249  000F24  A0D8               	btfss	status,0,c
  2250  000F26  EF97  F007         	goto	u611
  2251  000F2A  EF99  F007         	goto	u610
  2252  000F2E                     u611:
  2253  000F2E  EFAA  F007         	goto	l1481
  2254  000F32                     u610:
  2255  000F32  5009               	movf	___lodiv@divisor^0,w,c
  2256  000F34  5E01               	subwf	___lodiv@dividend^0,f,c
  2257  000F36  500A               	movf	(___lodiv@divisor+1)^0,w,c
  2258  000F38  5A02               	subwfb	(___lodiv@dividend+1)^0,f,c
  2259  000F3A  500B               	movf	(___lodiv@divisor+2)^0,w,c
  2260  000F3C  5A03               	subwfb	(___lodiv@dividend+2)^0,f,c
  2261  000F3E  500C               	movf	(___lodiv@divisor+3)^0,w,c
  2262  000F40  5A04               	subwfb	(___lodiv@dividend+3)^0,f,c
  2263  000F42  500D               	movf	(___lodiv@divisor+4)^0,w,c
  2264  000F44  5A05               	subwfb	(___lodiv@dividend+4)^0,f,c
  2265  000F46  500E               	movf	(___lodiv@divisor+5)^0,w,c
  2266  000F48  5A06               	subwfb	(___lodiv@dividend+5)^0,f,c
  2267  000F4A  500F               	movf	(___lodiv@divisor+6)^0,w,c
  2268  000F4C  5A07               	subwfb	(___lodiv@dividend+6)^0,f,c
  2269  000F4E  5010               	movf	(___lodiv@divisor+7)^0,w,c
  2270  000F50  5A08               	subwfb	(___lodiv@dividend+7)^0,f,c
  2271  000F52  8011               	bsf	___lodiv@quotient^0,0,c
  2272  000F54                     l1481:
  2273  000F54  90D8               	bcf	status,0,c
  2274  000F56  3210               	rrcf	(___lodiv@divisor+7)^0,f,c
  2275  000F58  320F               	rrcf	(___lodiv@divisor+6)^0,f,c
  2276  000F5A  320E               	rrcf	(___lodiv@divisor+5)^0,f,c
  2277  000F5C  320D               	rrcf	(___lodiv@divisor+4)^0,f,c
  2278  000F5E  320C               	rrcf	(___lodiv@divisor+3)^0,f,c
  2279  000F60  320B               	rrcf	(___lodiv@divisor+2)^0,f,c
  2280  000F62  320A               	rrcf	(___lodiv@divisor+1)^0,f,c
  2281  000F64  3209               	rrcf	___lodiv@divisor^0,f,c
  2282  000F66  2E19               	decfsz	___lodiv@counter^0,f,c
  2283  000F68  EF79  F007         	goto	l1473
  2284  000F6C                     l554:
  2285  000F6C  C011  F001         	movff	___lodiv@quotient,?___lodiv
  2286  000F70  C012  F002         	movff	___lodiv@quotient+1,?___lodiv+1
  2287  000F74  C013  F003         	movff	___lodiv@quotient+2,?___lodiv+2
  2288  000F78  C014  F004         	movff	___lodiv@quotient+3,?___lodiv+3
  2289  000F7C  C015  F005         	movff	___lodiv@quotient+4,?___lodiv+4
  2290  000F80  C016  F006         	movff	___lodiv@quotient+5,?___lodiv+5
  2291  000F84  C017  F007         	movff	___lodiv@quotient+6,?___lodiv+6
  2292  000F88  C018  F008         	movff	___lodiv@quotient+7,?___lodiv+7
  2293  000F8C  0012               	return		;funcret
  2294  000F8E                     __end_of___lodiv:
  2295                           	callstack 0
  2296                           
  2297 ;; *************** function _atoi *****************
  2298 ;; Defined at:
  2299 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\atoi.c"
  2300 ;; Parameters:    Size  Location     Type
  2301 ;;  s               2    7[COMRAM] PTR const unsigned char 
  2302 ;;		 -> STR_1(10), 
  2303 ;; Auto vars:     Size  Location     Type
  2304 ;;  n               2   15[COMRAM] int 
  2305 ;;  neg             2   13[COMRAM] int 
  2306 ;; Return value:  Size  Location     Type
  2307 ;;                  2    7[COMRAM] int 
  2308 ;; Registers used:
  2309 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2310 ;; Tracked objects:
  2311 ;;		On entry : 0/0
  2312 ;;		On exit  : 0/0
  2313 ;;		Unchanged: 0/0
  2314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2315 ;;      Params:         2       0       0       0       0       0       0       0       0
  2316 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2317 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2318 ;;      Totals:        10       0       0       0       0       0       0       0       0
  2319 ;;Total ram usage:       10 bytes
  2320 ;; Hardware stack levels used: 1
  2321 ;; Hardware stack levels required when called: 2
  2322 ;; This function calls:
  2323 ;;		___wmul
  2324 ;;		_isdigit
  2325 ;;		_isspace
  2326 ;; This function is called by:
  2327 ;;		_vfpfcnvrt
  2328 ;; This function uses a non-reentrant model
  2329 ;;
  2330                           
  2331                           	psect	text12
  2332  000D48                     __ptext12:
  2333                           	callstack 0
  2334  000D48                     _atoi:
  2335                           	callstack 25
  2336  000D48  0E00               	movlw	0
  2337  000D4A  6E11               	movwf	(atoi@n+1)^0,c
  2338  000D4C  0E00               	movlw	0
  2339  000D4E  6E10               	movwf	atoi@n^0,c
  2340  000D50  0E00               	movlw	0
  2341  000D52  6E0F               	movwf	(atoi@neg+1)^0,c
  2342  000D54  0E00               	movlw	0
  2343  000D56  6E0E               	movwf	atoi@neg^0,c
  2344  000D58  EFB0  F006         	goto	l1581
  2345  000D5C                     l1577:
  2346  000D5C  4A08               	infsnz	atoi@s^0,f,c
  2347  000D5E  2A09               	incf	(atoi@s+1)^0,f,c
  2348  000D60                     l1581:
  2349  000D60  C008  FFF6         	movff	atoi@s,tblptrl
  2350  000D64  C009  FFF7         	movff	atoi@s+1,tblptrh
  2351  000D68                     	if	0	;tblptru may be non-zero
  2352  000D68                     	endif
  2353  000D68                     	if	0	;tblptru may be non-zero
  2354  000D68                     	endif
  2355  000D68  0008               	tblrd		*
  2356  000D6A  50F5               	movf	tablat,w,c
  2357  000D6C  0A20               	xorlw	32
  2358  000D6E  B4D8               	btfsc	status,2,c
  2359  000D70  EFBC  F006         	goto	u801
  2360  000D74  EFBE  F006         	goto	u800
  2361  000D78                     u801:
  2362  000D78  EFAE  F006         	goto	l1577
  2363  000D7C                     u800:
  2364  000D7C  0EF7               	movlw	247
  2365  000D7E  6E0A               	movwf	??_atoi^0,c
  2366  000D80  0EFF               	movlw	255
  2367  000D82  6E0B               	movwf	(??_atoi+1)^0,c
  2368  000D84  C008  FFF6         	movff	atoi@s,tblptrl
  2369  000D88  C009  FFF7         	movff	atoi@s+1,tblptrh
  2370  000D8C                     	if	0	;tblptru may be non-zero
  2371  000D8C                     	endif
  2372  000D8C                     	if	0	;tblptru may be non-zero
  2373  000D8C                     	endif
  2374  000D8C  0008               	tblrd		*
  2375  000D8E  50F5               	movf	tablat,w,c
  2376  000D90  6E0C               	movwf	(??_atoi+2)^0,c
  2377  000D92  6A0D               	clrf	(??_atoi+3)^0,c
  2378  000D94  500A               	movf	??_atoi^0,w,c
  2379  000D96  260C               	addwf	(??_atoi+2)^0,f,c
  2380  000D98  500B               	movf	(??_atoi+1)^0,w,c
  2381  000D9A  220D               	addwfc	(??_atoi+3)^0,f,c
  2382  000D9C  500D               	movf	(??_atoi+3)^0,w,c
  2383  000D9E  E109               	bnz	u810
  2384  000DA0  0E05               	movlw	5
  2385  000DA2  5C0C               	subwf	(??_atoi+2)^0,w,c
  2386  000DA4  A0D8               	btfss	status,0,c
  2387  000DA6  EFD7  F006         	goto	u811
  2388  000DAA  EFD9  F006         	goto	u810
  2389  000DAE                     u811:
  2390  000DAE  EFAE  F006         	goto	l1577
  2391  000DB2                     u810:
  2392  000DB2  EFE3  F006         	goto	l1589
  2393  000DB6                     l1585:
  2394  000DB6  0E00               	movlw	0
  2395  000DB8  6E0F               	movwf	(atoi@neg+1)^0,c
  2396  000DBA  0E01               	movlw	1
  2397  000DBC  6E0E               	movwf	atoi@neg^0,c
  2398  000DBE                     l1587:
  2399  000DBE  4A08               	infsnz	atoi@s^0,f,c
  2400  000DC0  2A09               	incf	(atoi@s+1)^0,f,c
  2401  000DC2  EF18  F007         	goto	l1597
  2402  000DC6                     l1589:
  2403  000DC6  C008  FFF6         	movff	atoi@s,tblptrl
  2404  000DCA  C009  FFF7         	movff	atoi@s+1,tblptrh
  2405  000DCE                     	if	0	;tblptru may be non-zero
  2406  000DCE                     	endif
  2407  000DCE                     	if	0	;tblptru may be non-zero
  2408  000DCE                     	endif
  2409  000DCE  0008               	tblrd		*
  2410  000DD0  50F5               	movf	tablat,w,c
  2411  000DD2  6E0A               	movwf	??_atoi^0,c
  2412  000DD4  6A0B               	clrf	(??_atoi+1)^0,c
  2413                           
  2414                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2415                           ; Switch size 1, requested type "simple"
  2416                           ; Number of cases is 1, Range of values is 0 to 0
  2417                           ; switch strategies available:
  2418                           ; Name         Instructions Cycles
  2419                           ; simple_byte            4     3 (average)
  2420                           ;	Chosen strategy is simple_byte
  2421  000DD6  500B               	movf	(??_atoi+1)^0,w,c
  2422  000DD8  0A00               	xorlw	0	; case 0
  2423  000DDA  B4D8               	btfsc	status,2,c
  2424  000DDC  EFF2  F006         	goto	l1919
  2425  000DE0  EF18  F007         	goto	l1597
  2426  000DE4                     l1919:
  2427                           
  2428                           ; Switch size 1, requested type "simple"
  2429                           ; Number of cases is 2, Range of values is 43 to 45
  2430                           ; switch strategies available:
  2431                           ; Name         Instructions Cycles
  2432                           ; simple_byte            7     4 (average)
  2433                           ;	Chosen strategy is simple_byte
  2434  000DE4  500A               	movf	??_atoi^0,w,c
  2435  000DE6  0A2B               	xorlw	43	; case 43
  2436  000DE8  B4D8               	btfsc	status,2,c
  2437  000DEA  EFDF  F006         	goto	l1587
  2438  000DEE  0A06               	xorlw	6	; case 45
  2439  000DF0  B4D8               	btfsc	status,2,c
  2440  000DF2  EFDB  F006         	goto	l1585
  2441  000DF6  EF18  F007         	goto	l1597
  2442  000DFA                     l1591:
  2443  000DFA  C010  F001         	movff	atoi@n,___wmul@multiplier
  2444  000DFE  C011  F002         	movff	atoi@n+1,___wmul@multiplier+1
  2445  000E02  0E00               	movlw	0
  2446  000E04  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2447  000E06  0E0A               	movlw	10
  2448  000E08  6E03               	movwf	___wmul@multiplicand^0,c
  2449  000E0A  ECEA  F00A         	call	___wmul	;wreg free
  2450  000E0E  C008  FFF6         	movff	atoi@s,tblptrl
  2451  000E12  C009  FFF7         	movff	atoi@s+1,tblptrh
  2452  000E16                     	if	0	;tblptru may be non-zero
  2453  000E16                     	endif
  2454  000E16                     	if	0	;tblptru may be non-zero
  2455  000E16                     	endif
  2456  000E16  0008               	tblrd		*
  2457  000E18  50F5               	movf	tablat,w,c
  2458  000E1A  5E01               	subwf	?___wmul^0,f,c
  2459  000E1C  0E00               	movlw	0
  2460  000E1E  5A02               	subwfb	(?___wmul+1)^0,f,c
  2461  000E20  0E30               	movlw	48
  2462  000E22  2401               	addwf	?___wmul^0,w,c
  2463  000E24  6E10               	movwf	atoi@n^0,c
  2464  000E26  0E00               	movlw	0
  2465  000E28  2002               	addwfc	(?___wmul+1)^0,w,c
  2466  000E2A  6E11               	movwf	(atoi@n+1)^0,c
  2467  000E2C  EFDF  F006         	goto	l1587
  2468  000E30                     l1597:
  2469  000E30  0ED0               	movlw	208
  2470  000E32  6E0A               	movwf	??_atoi^0,c
  2471  000E34  0EFF               	movlw	255
  2472  000E36  6E0B               	movwf	(??_atoi+1)^0,c
  2473  000E38  C008  FFF6         	movff	atoi@s,tblptrl
  2474  000E3C  C009  FFF7         	movff	atoi@s+1,tblptrh
  2475  000E40                     	if	0	;tblptru may be non-zero
  2476  000E40                     	endif
  2477  000E40                     	if	0	;tblptru may be non-zero
  2478  000E40                     	endif
  2479  000E40  0008               	tblrd		*
  2480  000E42  50F5               	movf	tablat,w,c
  2481  000E44  6E0C               	movwf	(??_atoi+2)^0,c
  2482  000E46  6A0D               	clrf	(??_atoi+3)^0,c
  2483  000E48  500A               	movf	??_atoi^0,w,c
  2484  000E4A  260C               	addwf	(??_atoi+2)^0,f,c
  2485  000E4C  500B               	movf	(??_atoi+1)^0,w,c
  2486  000E4E  220D               	addwfc	(??_atoi+3)^0,f,c
  2487  000E50  500D               	movf	(??_atoi+3)^0,w,c
  2488  000E52  E109               	bnz	u820
  2489  000E54  0E0A               	movlw	10
  2490  000E56  5C0C               	subwf	(??_atoi+2)^0,w,c
  2491  000E58  A0D8               	btfss	status,0,c
  2492  000E5A  EF31  F007         	goto	u821
  2493  000E5E  EF33  F007         	goto	u820
  2494  000E62                     u821:
  2495  000E62  EFFD  F006         	goto	l1591
  2496  000E66                     u820:
  2497  000E66  500E               	movf	atoi@neg^0,w,c
  2498  000E68  100F               	iorwf	(atoi@neg+1)^0,w,c
  2499  000E6A  A4D8               	btfss	status,2,c
  2500  000E6C  EF3A  F007         	goto	u831
  2501  000E70  EF3C  F007         	goto	u830
  2502  000E74                     u831:
  2503  000E74  EF4A  F007         	goto	l897
  2504  000E78                     u830:
  2505  000E78  C010  F00A         	movff	atoi@n,??_atoi
  2506  000E7C  C011  F00B         	movff	atoi@n+1,??_atoi+1
  2507  000E80  1E0A               	comf	??_atoi^0,f,c
  2508  000E82  1E0B               	comf	(??_atoi+1)^0,f,c
  2509  000E84  4A0A               	infsnz	??_atoi^0,f,c
  2510  000E86  2A0B               	incf	(??_atoi+1)^0,f,c
  2511  000E88  C00A  F008         	movff	??_atoi,?_atoi
  2512  000E8C  C00B  F009         	movff	??_atoi+1,?_atoi+1
  2513  000E90  EF4E  F007         	goto	l900
  2514  000E94                     l897:
  2515  000E94  C010  F008         	movff	atoi@n,?_atoi
  2516  000E98  C011  F009         	movff	atoi@n+1,?_atoi+1
  2517  000E9C                     l900:
  2518  000E9C  0012               	return		;funcret
  2519  000E9E                     __end_of_atoi:
  2520                           	callstack 0
  2521                           
  2522 ;; *************** function _isspace *****************
  2523 ;; Defined at:
  2524 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\isspace.c"
  2525 ;; Parameters:    Size  Location     Type
  2526 ;;  c               2    0[COMRAM] int 
  2527 ;; Auto vars:     Size  Location     Type
  2528 ;;		None
  2529 ;; Return value:  Size  Location     Type
  2530 ;;                  2    0[COMRAM] int 
  2531 ;; Registers used:
  2532 ;;		wreg, status,2, status,0
  2533 ;; Tracked objects:
  2534 ;;		On entry : 0/0
  2535 ;;		On exit  : 0/0
  2536 ;;		Unchanged: 0/0
  2537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2538 ;;      Params:         2       0       0       0       0       0       0       0       0
  2539 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2540 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2541 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2542 ;;Total ram usage:        7 bytes
  2543 ;; Hardware stack levels used: 1
  2544 ;; Hardware stack levels required when called: 1
  2545 ;; This function calls:
  2546 ;;		Nothing
  2547 ;; This function is called by:
  2548 ;;		_atoi
  2549 ;; This function uses a non-reentrant model
  2550 ;;
  2551                           
  2552                           	psect	text13
  2553  001458                     __ptext13:
  2554                           	callstack 0
  2555  001458                     _isspace:
  2556                           	callstack 25
  2557  001458  0E01               	movlw	1
  2558  00145A  6E07               	movwf	_isspace$869^0,c
  2559  00145C  0E20               	movlw	32
  2560  00145E  1801               	xorwf	isspace@c^0,w,c
  2561  001460  1002               	iorwf	(isspace@c+1)^0,w,c
  2562  001462  B4D8               	btfsc	status,2,c
  2563  001464  EF36  F00A         	goto	u711
  2564  001468  EF38  F00A         	goto	u710
  2565  00146C                     u711:
  2566  00146C  EF51  F00A         	goto	l1535
  2567  001470                     u710:
  2568  001470  0EF7               	movlw	247
  2569  001472  6E03               	movwf	??_isspace^0,c
  2570  001474  0EFF               	movlw	255
  2571  001476  6E04               	movwf	(??_isspace+1)^0,c
  2572  001478  C001  F005         	movff	isspace@c,??_isspace+2
  2573  00147C  C002  F006         	movff	isspace@c+1,??_isspace+3
  2574  001480  5003               	movf	??_isspace^0,w,c
  2575  001482  2605               	addwf	(??_isspace+2)^0,f,c
  2576  001484  5004               	movf	(??_isspace+1)^0,w,c
  2577  001486  2206               	addwfc	(??_isspace+3)^0,f,c
  2578  001488  5006               	movf	(??_isspace+3)^0,w,c
  2579  00148A  E109               	bnz	u720
  2580  00148C  0E05               	movlw	5
  2581  00148E  5C05               	subwf	(??_isspace+2)^0,w,c
  2582  001490  A0D8               	btfss	status,0,c
  2583  001492  EF4D  F00A         	goto	u721
  2584  001496  EF4F  F00A         	goto	u720
  2585  00149A                     u721:
  2586  00149A  EF51  F00A         	goto	l1535
  2587  00149E                     u720:
  2588  00149E  0E00               	movlw	0
  2589  0014A0  6E07               	movwf	_isspace$869^0,c
  2590  0014A2                     l1535:
  2591  0014A2  C007  F001         	movff	_isspace$869,?_isspace
  2592  0014A6  6A02               	clrf	(?_isspace+1)^0,c
  2593  0014A8  0012               	return		;funcret
  2594  0014AA                     __end_of_isspace:
  2595                           	callstack 0
  2596                           
  2597 ;; *************** function _isdigit *****************
  2598 ;; Defined at:
  2599 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\isdigit.c"
  2600 ;; Parameters:    Size  Location     Type
  2601 ;;  c               2    0[COMRAM] int 
  2602 ;; Auto vars:     Size  Location     Type
  2603 ;;		None
  2604 ;; Return value:  Size  Location     Type
  2605 ;;                  2    0[COMRAM] int 
  2606 ;; Registers used:
  2607 ;;		wreg, status,2, status,0
  2608 ;; Tracked objects:
  2609 ;;		On entry : 0/0
  2610 ;;		On exit  : 0/0
  2611 ;;		Unchanged: 0/0
  2612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2613 ;;      Params:         2       0       0       0       0       0       0       0       0
  2614 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2615 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2616 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2617 ;;Total ram usage:        6 bytes
  2618 ;; Hardware stack levels used: 1
  2619 ;; Hardware stack levels required when called: 1
  2620 ;; This function calls:
  2621 ;;		Nothing
  2622 ;; This function is called by:
  2623 ;;		_vfpfcnvrt
  2624 ;;		_atoi
  2625 ;; This function uses a non-reentrant model
  2626 ;;
  2627                           
  2628                           	psect	text14
  2629  00152E                     __ptext14:
  2630                           	callstack 0
  2631  00152E                     _isdigit:
  2632                           	callstack 26
  2633  00152E  0ED0               	movlw	208
  2634  001530  6E03               	movwf	??_isdigit^0,c
  2635  001532  0EFF               	movlw	255
  2636  001534  6E04               	movwf	(??_isdigit+1)^0,c
  2637  001536  C001  F005         	movff	isdigit@c,??_isdigit+2
  2638  00153A  C002  F006         	movff	isdigit@c+1,??_isdigit+3
  2639  00153E  5003               	movf	??_isdigit^0,w,c
  2640  001540  2605               	addwf	(??_isdigit+2)^0,f,c
  2641  001542  5004               	movf	(??_isdigit+1)^0,w,c
  2642  001544  2206               	addwfc	(??_isdigit+3)^0,f,c
  2643  001546  5006               	movf	(??_isdigit+3)^0,w,c
  2644  001548  E10A               	bnz	u690
  2645  00154A  0E0A               	movlw	10
  2646  00154C  5C05               	subwf	(??_isdigit+2)^0,w,c
  2647  00154E  A0D8               	btfss	status,0,c
  2648  001550  EFAC  F00A         	goto	u691
  2649  001554  EFAF  F00A         	goto	u690
  2650  001558                     u691:
  2651  001558  0E01               	movlw	1
  2652  00155A  EFB0  F00A         	goto	u700
  2653  00155E                     u690:
  2654  00155E  0E00               	movlw	0
  2655  001560                     u700:
  2656  001560  6E01               	movwf	?_isdigit^0,c
  2657  001562  6A02               	clrf	(?_isdigit+1)^0,c
  2658  001564  0012               	return		;funcret
  2659  001566                     __end_of_isdigit:
  2660                           	callstack 0
  2661                           
  2662 ;; *************** function ___wmul *****************
  2663 ;; Defined at:
  2664 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul16.c"
  2665 ;; Parameters:    Size  Location     Type
  2666 ;;  multiplier      2    0[COMRAM] unsigned int 
  2667 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2668 ;; Auto vars:     Size  Location     Type
  2669 ;;  product         2    4[COMRAM] unsigned int 
  2670 ;; Return value:  Size  Location     Type
  2671 ;;                  2    0[COMRAM] unsigned int 
  2672 ;; Registers used:
  2673 ;;		wreg, status,2, status,0, prodl, prodh
  2674 ;; Tracked objects:
  2675 ;;		On entry : 0/0
  2676 ;;		On exit  : 0/0
  2677 ;;		Unchanged: 0/0
  2678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2679 ;;      Params:         4       0       0       0       0       0       0       0       0
  2680 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2681 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2682 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2683 ;;Total ram usage:        6 bytes
  2684 ;; Hardware stack levels used: 1
  2685 ;; Hardware stack levels required when called: 1
  2686 ;; This function calls:
  2687 ;;		Nothing
  2688 ;; This function is called by:
  2689 ;;		_atoi
  2690 ;; This function uses a non-reentrant model
  2691 ;;
  2692                           
  2693                           	psect	text15
  2694  0015D4                     __ptext15:
  2695                           	callstack 0
  2696  0015D4                     ___wmul:
  2697                           	callstack 25
  2698  0015D4  5001               	movf	___wmul@multiplier^0,w,c
  2699  0015D6  0203               	mulwf	___wmul@multiplicand^0,c
  2700  0015D8  CFF3 F005          	movff	prodl,___wmul@product
  2701  0015DC  CFF4 F006          	movff	prodh,___wmul@product+1
  2702  0015E0  5001               	movf	___wmul@multiplier^0,w,c
  2703  0015E2  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2704  0015E4  50F3               	movf	243,w,c
  2705  0015E6  2606               	addwf	(___wmul@product+1)^0,f,c
  2706  0015E8  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2707  0015EA  0203               	mulwf	___wmul@multiplicand^0,c
  2708  0015EC  50F3               	movf	243,w,c
  2709  0015EE  2606               	addwf	(___wmul@product+1)^0,f,c
  2710  0015F0  C005  F001         	movff	___wmul@product,?___wmul
  2711  0015F4  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2712  0015F8  0012               	return		;funcret
  2713  0015FA                     __end_of___wmul:
  2714                           	callstack 0
  2715                           
  2716 ;; *************** function _Lcd_Write_String *****************
  2717 ;; Defined at:
  2718 ;;		line 97 in file "lcd.c"
  2719 ;; Parameters:    Size  Location     Type
  2720 ;;  a               2    4[COMRAM] PTR unsigned char 
  2721 ;;		 -> str_contador(14), 
  2722 ;; Auto vars:     Size  Location     Type
  2723 ;;  i               2    6[COMRAM] int 
  2724 ;; Return value:  Size  Location     Type
  2725 ;;                  1    wreg      void 
  2726 ;; Registers used:
  2727 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2728 ;; Tracked objects:
  2729 ;;		On entry : 0/0
  2730 ;;		On exit  : 0/0
  2731 ;;		Unchanged: 0/0
  2732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2733 ;;      Params:         2       0       0       0       0       0       0       0       0
  2734 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2735 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2736 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2737 ;;Total ram usage:        4 bytes
  2738 ;; Hardware stack levels used: 1
  2739 ;; Hardware stack levels required when called: 3
  2740 ;; This function calls:
  2741 ;;		_Lcd_Write_Char
  2742 ;; This function is called by:
  2743 ;;		_main
  2744 ;; This function uses a non-reentrant model
  2745 ;;
  2746                           
  2747                           	psect	text16
  2748  0014EE                     __ptext16:
  2749                           	callstack 0
  2750  0014EE                     _Lcd_Write_String:
  2751                           	callstack 27
  2752  0014EE                     
  2753                           ;lcd.c: 97: void Lcd_Write_String(unsigned char *a);lcd.c: 98: {;lcd.c: 99:  int i;;lcd.
      +                          c: 100:  for(i=0;a[i]!='\0';i++)
  2754  0014EE  0E00               	movlw	0
  2755  0014F0  6E08               	movwf	(Lcd_Write_String@i+1)^0,c
  2756  0014F2  0E00               	movlw	0
  2757  0014F4  6E07               	movwf	Lcd_Write_String@i^0,c
  2758  0014F6  EF88  F00A         	goto	l1831
  2759  0014FA                     l1827:
  2760                           
  2761                           ;lcd.c: 101:     Lcd_Write_Char(a[i]);
  2762  0014FA  5007               	movf	Lcd_Write_String@i^0,w,c
  2763  0014FC  2405               	addwf	Lcd_Write_String@a^0,w,c
  2764  0014FE  6ED9               	movwf	fsr2l,c
  2765  001500  5008               	movf	(Lcd_Write_String@i+1)^0,w,c
  2766  001502  2006               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  2767  001504  6EDA               	movwf	fsr2h,c
  2768  001506  50DF               	movf	indf2,w,c
  2769  001508  ECB3  F00A         	call	_Lcd_Write_Char
  2770  00150C  4A07               	infsnz	Lcd_Write_String@i^0,f,c
  2771  00150E  2A08               	incf	(Lcd_Write_String@i+1)^0,f,c
  2772  001510                     l1831:
  2773  001510  5007               	movf	Lcd_Write_String@i^0,w,c
  2774  001512  2405               	addwf	Lcd_Write_String@a^0,w,c
  2775  001514  6ED9               	movwf	fsr2l,c
  2776  001516  5008               	movf	(Lcd_Write_String@i+1)^0,w,c
  2777  001518  2006               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  2778  00151A  6EDA               	movwf	fsr2h,c
  2779  00151C  50DF               	movf	indf2,w,c
  2780  00151E  A4D8               	btfss	status,2,c
  2781  001520  EF94  F00A         	goto	u991
  2782  001524  EF96  F00A         	goto	u990
  2783  001528                     u991:
  2784  001528  EF7D  F00A         	goto	l1827
  2785  00152C                     u990:
  2786  00152C  0012               	return		;funcret
  2787  00152E                     __end_of_Lcd_Write_String:
  2788                           	callstack 0
  2789                           
  2790 ;; *************** function _Lcd_Write_Char *****************
  2791 ;; Defined at:
  2792 ;;		line 81 in file "lcd.c"
  2793 ;; Parameters:    Size  Location     Type
  2794 ;;  a               1    wreg     unsigned char 
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;  a               1    3[COMRAM] unsigned char 
  2797 ;;  y               1    2[COMRAM] unsigned char 
  2798 ;;  temp            1    1[COMRAM] unsigned char 
  2799 ;; Return value:  Size  Location     Type
  2800 ;;                  1    wreg      void 
  2801 ;; Registers used:
  2802 ;;		wreg, status,2, status,0, cstack
  2803 ;; Tracked objects:
  2804 ;;		On entry : 0/0
  2805 ;;		On exit  : 0/0
  2806 ;;		Unchanged: 0/0
  2807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2808 ;;      Params:         0       0       0       0       0       0       0       0       0
  2809 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2810 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2811 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2812 ;;Total ram usage:        3 bytes
  2813 ;; Hardware stack levels used: 1
  2814 ;; Hardware stack levels required when called: 2
  2815 ;; This function calls:
  2816 ;;		_Lcd_Port
  2817 ;; This function is called by:
  2818 ;;		_Lcd_Write_String
  2819 ;; This function uses a non-reentrant model
  2820 ;;
  2821                           
  2822                           	psect	text17
  2823  001566                     __ptext17:
  2824                           	callstack 0
  2825  001566                     _Lcd_Write_Char:
  2826                           	callstack 27
  2827                           
  2828                           ;incstack = 0
  2829                           ;Lcd_Write_Char@a stored from wreg
  2830  001566  6E04               	movwf	Lcd_Write_Char@a^0,c
  2831  001568                     
  2832                           ;lcd.c: 81: void Lcd_Write_Char(unsigned char a);lcd.c: 82: {;lcd.c: 83:    char temp,y;
      +                          ;lcd.c: 84:    temp = a&0x0F;
  2833  001568  5004               	movf	Lcd_Write_Char@a^0,w,c
  2834  00156A  0B0F               	andlw	15
  2835  00156C  6E02               	movwf	Lcd_Write_Char@temp^0,c
  2836                           
  2837                           ;lcd.c: 85:    y = a&0xF0;
  2838  00156E  5004               	movf	Lcd_Write_Char@a^0,w,c
  2839  001570  0BF0               	andlw	240
  2840  001572  6E03               	movwf	Lcd_Write_Char@y^0,c
  2841  001574                     
  2842                           ;lcd.c: 86:    LATDbits.LATD2 = 1;
  2843  001574  848C               	bsf	140,2,c	;volatile
  2844  001576                     
  2845                           ;lcd.c: 87:    Lcd_Port(y>>4);
  2846  001576  3803               	swapf	Lcd_Write_Char@y^0,w,c
  2847  001578  0B0F               	andlw	15
  2848  00157A  ECD5  F009         	call	_Lcd_Port
  2849  00157E                     
  2850                           ;lcd.c: 88:    LATDbits.LATD3 = 1;
  2851  00157E  868C               	bsf	140,3,c	;volatile
  2852  001580                     
  2853                           ;lcd.c: 89:    _delay((unsigned long)((40)*(16000000/4000000.0)));
  2854  001580  0E35               	movlw	53
  2855  001582                     u1037:
  2856  001582  2EE8               	decfsz	wreg,f,c
  2857  001584  D7FE               	bra	u1037
  2858  001586  F000               	nop	
  2859  001588                     
  2860                           ;lcd.c: 90:    LATDbits.LATD3 = 0;
  2861  001588  968C               	bcf	140,3,c	;volatile
  2862  00158A                     
  2863                           ;lcd.c: 91:    Lcd_Port(temp);
  2864  00158A  5002               	movf	Lcd_Write_Char@temp^0,w,c
  2865  00158C  ECD5  F009         	call	_Lcd_Port
  2866  001590                     
  2867                           ;lcd.c: 92:    LATDbits.LATD3 = 1;
  2868  001590  868C               	bsf	140,3,c	;volatile
  2869  001592                     
  2870                           ;lcd.c: 93:    _delay((unsigned long)((40)*(16000000/4000000.0)));
  2871  001592  0E35               	movlw	53
  2872  001594                     u1047:
  2873  001594  2EE8               	decfsz	wreg,f,c
  2874  001596  D7FE               	bra	u1047
  2875  001598  F000               	nop	
  2876  00159A                     
  2877                           ;lcd.c: 94:    LATDbits.LATD3 = 0;
  2878  00159A  968C               	bcf	140,3,c	;volatile
  2879  00159C  0012               	return		;funcret
  2880  00159E                     __end_of_Lcd_Write_Char:
  2881                           	callstack 0
  2882                           
  2883 ;; *************** function _Lcd_Set_Cursor *****************
  2884 ;; Defined at:
  2885 ;;		line 41 in file "lcd.c"
  2886 ;; Parameters:    Size  Location     Type
  2887 ;;  a               1    wreg     unsigned char 
  2888 ;;  b               1    3[COMRAM] unsigned char 
  2889 ;; Auto vars:     Size  Location     Type
  2890 ;;  a               1    4[COMRAM] unsigned char 
  2891 ;;  temp            1    7[COMRAM] unsigned char 
  2892 ;;  y               1    6[COMRAM] unsigned char 
  2893 ;;  z               1    5[COMRAM] unsigned char 
  2894 ;; Return value:  Size  Location     Type
  2895 ;;                  1    wreg      void 
  2896 ;; Registers used:
  2897 ;;		wreg, status,2, status,0, cstack
  2898 ;; Tracked objects:
  2899 ;;		On entry : 0/0
  2900 ;;		On exit  : 0/0
  2901 ;;		Unchanged: 0/0
  2902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2903 ;;      Params:         1       0       0       0       0       0       0       0       0
  2904 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2905 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2906 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2907 ;;Total ram usage:        5 bytes
  2908 ;; Hardware stack levels used: 1
  2909 ;; Hardware stack levels required when called: 3
  2910 ;; This function calls:
  2911 ;;		_Lcd_Cmd
  2912 ;; This function is called by:
  2913 ;;		_main
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           	psect	text18
  2918  0012E2                     __ptext18:
  2919                           	callstack 0
  2920  0012E2                     _Lcd_Set_Cursor:
  2921                           	callstack 27
  2922                           
  2923                           ;incstack = 0
  2924                           ;Lcd_Set_Cursor@a stored from wreg
  2925  0012E2  6E05               	movwf	Lcd_Set_Cursor@a^0,c
  2926  0012E4                     
  2927                           ;lcd.c: 41: void Lcd_Set_Cursor(unsigned char a, unsigned char b);lcd.c: 42: {;lcd.c: 43
      +                          :  char temp,z,y;;lcd.c: 44:  if(a == 1)
  2928  0012E4  0405               	decf	Lcd_Set_Cursor@a^0,w,c
  2929  0012E6  A4D8               	btfss	status,2,c
  2930  0012E8  EF78  F009         	goto	u971
  2931  0012EC  EF7A  F009         	goto	u970
  2932  0012F0                     u971:
  2933  0012F0  EF8B  F009         	goto	l1817
  2934  0012F4                     u970:
  2935  0012F4                     
  2936                           ;lcd.c: 45:  {;lcd.c: 46:    temp = 0x80 + b - 1;
  2937  0012F4  5004               	movf	Lcd_Set_Cursor@b^0,w,c
  2938  0012F6  0F7F               	addlw	127
  2939  0012F8  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
  2940                           
  2941                           ;lcd.c: 47:   z = temp>>4;
  2942  0012FA  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
  2943  0012FC  0B0F               	andlw	15
  2944  0012FE  6E06               	movwf	Lcd_Set_Cursor@z^0,c
  2945                           
  2946                           ;lcd.c: 48:   y = temp & 0x0F;
  2947  001300  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
  2948  001302  0B0F               	andlw	15
  2949  001304  6E07               	movwf	Lcd_Set_Cursor@y^0,c
  2950  001306                     
  2951                           ;lcd.c: 49:   Lcd_Cmd(z);
  2952  001306  5006               	movf	Lcd_Set_Cursor@z^0,w,c
  2953  001308  ECFD  F00A         	call	_Lcd_Cmd
  2954  00130C                     
  2955                           ;lcd.c: 50:   Lcd_Cmd(y);
  2956  00130C  5007               	movf	Lcd_Set_Cursor@y^0,w,c
  2957  00130E  ECFD  F00A         	call	_Lcd_Cmd
  2958                           
  2959                           ;lcd.c: 51:  }
  2960  001312  EFA3  F009         	goto	l95
  2961  001316                     l1817:
  2962  001316  0E02               	movlw	2
  2963  001318  1805               	xorwf	Lcd_Set_Cursor@a^0,w,c
  2964  00131A  A4D8               	btfss	status,2,c
  2965  00131C  EF92  F009         	goto	u981
  2966  001320  EF94  F009         	goto	u980
  2967  001324                     u981:
  2968  001324  EFA3  F009         	goto	l95
  2969  001328                     u980:
  2970  001328                     
  2971                           ;lcd.c: 53:  {;lcd.c: 54:   temp = 0xC0 + b - 1;
  2972  001328  5004               	movf	Lcd_Set_Cursor@b^0,w,c
  2973  00132A  0FBF               	addlw	191
  2974  00132C  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
  2975                           
  2976                           ;lcd.c: 55:   z = temp>>4;
  2977  00132E  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
  2978  001330  0B0F               	andlw	15
  2979  001332  6E06               	movwf	Lcd_Set_Cursor@z^0,c
  2980                           
  2981                           ;lcd.c: 56:   y = temp & 0x0F;
  2982  001334  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
  2983  001336  0B0F               	andlw	15
  2984  001338  6E07               	movwf	Lcd_Set_Cursor@y^0,c
  2985  00133A                     
  2986                           ;lcd.c: 57:   Lcd_Cmd(z);
  2987  00133A  5006               	movf	Lcd_Set_Cursor@z^0,w,c
  2988  00133C  ECFD  F00A         	call	_Lcd_Cmd
  2989  001340                     
  2990                           ;lcd.c: 58:   Lcd_Cmd(y);
  2991  001340  5007               	movf	Lcd_Set_Cursor@y^0,w,c
  2992  001342  ECFD  F00A         	call	_Lcd_Cmd
  2993  001346                     l95:
  2994  001346  0012               	return		;funcret
  2995  001348                     __end_of_Lcd_Set_Cursor:
  2996                           	callstack 0
  2997                           
  2998 ;; *************** function _Lcd_Init *****************
  2999 ;; Defined at:
  3000 ;;		line 62 in file "lcd.c"
  3001 ;; Parameters:    Size  Location     Type
  3002 ;;		None
  3003 ;; Auto vars:     Size  Location     Type
  3004 ;;		None
  3005 ;; Return value:  Size  Location     Type
  3006 ;;                  1    wreg      void 
  3007 ;; Registers used:
  3008 ;;		wreg, status,2, cstack
  3009 ;; Tracked objects:
  3010 ;;		On entry : 0/0
  3011 ;;		On exit  : 0/0
  3012 ;;		Unchanged: 0/0
  3013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3014 ;;      Params:         0       0       0       0       0       0       0       0       0
  3015 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3016 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3017 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3018 ;;Total ram usage:        1 bytes
  3019 ;; Hardware stack levels used: 1
  3020 ;; Hardware stack levels required when called: 3
  3021 ;; This function calls:
  3022 ;;		_Lcd_Cmd
  3023 ;;		_Lcd_Port
  3024 ;; This function is called by:
  3025 ;;		_main
  3026 ;; This function uses a non-reentrant model
  3027 ;;
  3028                           
  3029                           	psect	text19
  3030  00126E                     __ptext19:
  3031                           	callstack 0
  3032  00126E                     _Lcd_Init:
  3033                           	callstack 27
  3034  00126E                     
  3035                           ;lcd.c: 64:   Lcd_Port(0x00);
  3036  00126E  0E00               	movlw	0
  3037  001270  ECD5  F009         	call	_Lcd_Port
  3038  001274                     
  3039                           ;lcd.c: 65:    _delay((unsigned long)((20)*(16000000/4000.0)));
  3040  001274  0E68               	movlw	104
  3041  001276  6E04               	movwf	??_Lcd_Init^0,c
  3042  001278  0EE4               	movlw	228
  3043  00127A                     u1057:
  3044  00127A  2EE8               	decfsz	wreg,f,c
  3045  00127C  D7FE               	bra	u1057
  3046  00127E  2E04               	decfsz	??_Lcd_Init^0,f,c
  3047  001280  D7FC               	bra	u1057
  3048  001282  D000               	nop2	
  3049  001284                     
  3050                           ;lcd.c: 66:   Lcd_Cmd(0x03);
  3051  001284  0E03               	movlw	3
  3052  001286  ECFD  F00A         	call	_Lcd_Cmd
  3053  00128A                     
  3054                           ;lcd.c: 67:  _delay((unsigned long)((5)*(16000000/4000.0)));
  3055  00128A  0E1A               	movlw	26
  3056  00128C  6E04               	movwf	??_Lcd_Init^0,c
  3057  00128E  0EF8               	movlw	248
  3058  001290                     u1067:
  3059  001290  2EE8               	decfsz	wreg,f,c
  3060  001292  D7FE               	bra	u1067
  3061  001294  2E04               	decfsz	??_Lcd_Init^0,f,c
  3062  001296  D7FC               	bra	u1067
  3063  001298  D000               	nop2	
  3064  00129A                     
  3065                           ;lcd.c: 68:   Lcd_Cmd(0x03);
  3066  00129A  0E03               	movlw	3
  3067  00129C  ECFD  F00A         	call	_Lcd_Cmd
  3068  0012A0                     
  3069                           ;lcd.c: 69:  _delay((unsigned long)((11)*(16000000/4000.0)));
  3070  0012A0  0E3A               	movlw	58
  3071  0012A2  6E04               	movwf	??_Lcd_Init^0,c
  3072  0012A4  0E23               	movlw	35
  3073  0012A6                     u1077:
  3074  0012A6  2EE8               	decfsz	wreg,f,c
  3075  0012A8  D7FE               	bra	u1077
  3076  0012AA  2E04               	decfsz	??_Lcd_Init^0,f,c
  3077  0012AC  D7FC               	bra	u1077
  3078  0012AE  F000               	nop	
  3079  0012B0                     
  3080                           ;lcd.c: 70:   Lcd_Cmd(0x03);
  3081  0012B0  0E03               	movlw	3
  3082  0012B2  ECFD  F00A         	call	_Lcd_Cmd
  3083  0012B6                     
  3084                           ;lcd.c: 72:   Lcd_Cmd(0x02);
  3085  0012B6  0E02               	movlw	2
  3086  0012B8  ECFD  F00A         	call	_Lcd_Cmd
  3087  0012BC                     
  3088                           ;lcd.c: 73:   Lcd_Cmd(0x02);
  3089  0012BC  0E02               	movlw	2
  3090  0012BE  ECFD  F00A         	call	_Lcd_Cmd
  3091  0012C2                     
  3092                           ;lcd.c: 74:   Lcd_Cmd(0x08);
  3093  0012C2  0E08               	movlw	8
  3094  0012C4  ECFD  F00A         	call	_Lcd_Cmd
  3095  0012C8                     
  3096                           ;lcd.c: 75:   Lcd_Cmd(0x00);
  3097  0012C8  0E00               	movlw	0
  3098  0012CA  ECFD  F00A         	call	_Lcd_Cmd
  3099  0012CE                     
  3100                           ;lcd.c: 76:   Lcd_Cmd(0x0C);
  3101  0012CE  0E0C               	movlw	12
  3102  0012D0  ECFD  F00A         	call	_Lcd_Cmd
  3103  0012D4                     
  3104                           ;lcd.c: 77:   Lcd_Cmd(0x00);
  3105  0012D4  0E00               	movlw	0
  3106  0012D6  ECFD  F00A         	call	_Lcd_Cmd
  3107  0012DA                     
  3108                           ;lcd.c: 78:   Lcd_Cmd(0x06);
  3109  0012DA  0E06               	movlw	6
  3110  0012DC  ECFD  F00A         	call	_Lcd_Cmd
  3111  0012E0  0012               	return		;funcret
  3112  0012E2                     __end_of_Lcd_Init:
  3113                           	callstack 0
  3114                           
  3115 ;; *************** function _Lcd_Clear *****************
  3116 ;; Defined at:
  3117 ;;		line 35 in file "lcd.c"
  3118 ;; Parameters:    Size  Location     Type
  3119 ;;		None
  3120 ;; Auto vars:     Size  Location     Type
  3121 ;;		None
  3122 ;; Return value:  Size  Location     Type
  3123 ;;                  1    wreg      void 
  3124 ;; Registers used:
  3125 ;;		wreg, status,2, cstack
  3126 ;; Tracked objects:
  3127 ;;		On entry : 0/0
  3128 ;;		On exit  : 0/0
  3129 ;;		Unchanged: 0/0
  3130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3131 ;;      Params:         0       0       0       0       0       0       0       0       0
  3132 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3133 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3134 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3135 ;;Total ram usage:        0 bytes
  3136 ;; Hardware stack levels used: 1
  3137 ;; Hardware stack levels required when called: 3
  3138 ;; This function calls:
  3139 ;;		_Lcd_Cmd
  3140 ;; This function is called by:
  3141 ;;		_main
  3142 ;; This function uses a non-reentrant model
  3143 ;;
  3144                           
  3145                           	psect	text20
  3146  001666                     __ptext20:
  3147                           	callstack 0
  3148  001666                     _Lcd_Clear:
  3149                           	callstack 27
  3150  001666                     
  3151                           ;lcd.c: 37:  Lcd_Cmd(0);
  3152  001666  0E00               	movlw	0
  3153  001668  ECFD  F00A         	call	_Lcd_Cmd
  3154                           
  3155                           ;lcd.c: 38:  Lcd_Cmd(1);
  3156  00166C  0E01               	movlw	1
  3157  00166E  ECFD  F00A         	call	_Lcd_Cmd
  3158  001672  0012               	return		;funcret
  3159  001674                     __end_of_Lcd_Clear:
  3160                           	callstack 0
  3161                           
  3162 ;; *************** function _Lcd_Cmd *****************
  3163 ;; Defined at:
  3164 ;;		line 26 in file "lcd.c"
  3165 ;; Parameters:    Size  Location     Type
  3166 ;;  a               1    wreg     unsigned char 
  3167 ;; Auto vars:     Size  Location     Type
  3168 ;;  a               1    2[COMRAM] unsigned char 
  3169 ;; Return value:  Size  Location     Type
  3170 ;;                  1    wreg      void 
  3171 ;; Registers used:
  3172 ;;		wreg, status,2, cstack
  3173 ;; Tracked objects:
  3174 ;;		On entry : 0/0
  3175 ;;		On exit  : 0/0
  3176 ;;		Unchanged: 0/0
  3177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3178 ;;      Params:         0       0       0       0       0       0       0       0       0
  3179 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3180 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3181 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3182 ;;Total ram usage:        2 bytes
  3183 ;; Hardware stack levels used: 1
  3184 ;; Hardware stack levels required when called: 2
  3185 ;; This function calls:
  3186 ;;		_Lcd_Port
  3187 ;; This function is called by:
  3188 ;;		_Lcd_Clear
  3189 ;;		_Lcd_Set_Cursor
  3190 ;;		_Lcd_Init
  3191 ;;		_Lcd_Shift_Right
  3192 ;;		_Lcd_Shift_Left
  3193 ;; This function uses a non-reentrant model
  3194 ;;
  3195                           
  3196                           	psect	text21
  3197  0015FA                     __ptext21:
  3198                           	callstack 0
  3199  0015FA                     _Lcd_Cmd:
  3200                           	callstack 27
  3201                           
  3202                           ;incstack = 0
  3203                           ;Lcd_Cmd@a stored from wreg
  3204  0015FA  6E03               	movwf	Lcd_Cmd@a^0,c
  3205  0015FC                     
  3206                           ;lcd.c: 26: void Lcd_Cmd(unsigned char a);lcd.c: 27: {;lcd.c: 28:  LATDbits.LATD2 = 0;
  3207  0015FC  948C               	bcf	140,2,c	;volatile
  3208  0015FE                     
  3209                           ;lcd.c: 29:  Lcd_Port(a);
  3210  0015FE  5003               	movf	Lcd_Cmd@a^0,w,c
  3211  001600  ECD5  F009         	call	_Lcd_Port
  3212  001604                     
  3213                           ;lcd.c: 30:  LATDbits.LATD3 = 1;
  3214  001604  868C               	bsf	140,3,c	;volatile
  3215  001606                     
  3216                           ;lcd.c: 31:         _delay((unsigned long)((4)*(16000000/4000.0)));
  3217  001606  0E15               	movlw	21
  3218  001608  6E02               	movwf	??_Lcd_Cmd^0,c
  3219  00160A  0EC6               	movlw	198
  3220  00160C                     u1087:
  3221  00160C  2EE8               	decfsz	wreg,f,c
  3222  00160E  D7FE               	bra	u1087
  3223  001610  2E02               	decfsz	??_Lcd_Cmd^0,f,c
  3224  001612  D7FC               	bra	u1087
  3225  001614  D000               	nop2	
  3226  001616                     
  3227                           ;lcd.c: 32:         LATDbits.LATD3 = 0;
  3228  001616  968C               	bcf	140,3,c	;volatile
  3229  001618  0012               	return		;funcret
  3230  00161A                     __end_of_Lcd_Cmd:
  3231                           	callstack 0
  3232                           
  3233 ;; *************** function _Lcd_Port *****************
  3234 ;; Defined at:
  3235 ;;		line 3 in file "lcd.c"
  3236 ;; Parameters:    Size  Location     Type
  3237 ;;  a               1    wreg     unsigned char 
  3238 ;; Auto vars:     Size  Location     Type
  3239 ;;  a               1    0[COMRAM] unsigned char 
  3240 ;; Return value:  Size  Location     Type
  3241 ;;                  1    wreg      void 
  3242 ;; Registers used:
  3243 ;;		wreg
  3244 ;; Tracked objects:
  3245 ;;		On entry : 0/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3249 ;;      Params:         0       0       0       0       0       0       0       0       0
  3250 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3251 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3252 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3253 ;;Total ram usage:        1 bytes
  3254 ;; Hardware stack levels used: 1
  3255 ;; Hardware stack levels required when called: 1
  3256 ;; This function calls:
  3257 ;;		Nothing
  3258 ;; This function is called by:
  3259 ;;		_Lcd_Cmd
  3260 ;;		_Lcd_Init
  3261 ;;		_Lcd_Write_Char
  3262 ;; This function uses a non-reentrant model
  3263 ;;
  3264                           
  3265                           	psect	text22
  3266  0013AA                     __ptext22:
  3267                           	callstack 0
  3268  0013AA                     _Lcd_Port:
  3269                           	callstack 27
  3270                           
  3271                           ;incstack = 0
  3272                           ;Lcd_Port@a stored from wreg
  3273  0013AA  6E01               	movwf	Lcd_Port@a^0,c
  3274  0013AC                     
  3275                           ;lcd.c: 3: void Lcd_Port(unsigned char a);lcd.c: 4: {;lcd.c: 5:  if(a & 1)
  3276  0013AC  A001               	btfss	Lcd_Port@a^0,0,c
  3277  0013AE  EFDB  F009         	goto	u841
  3278  0013B2  EFDD  F009         	goto	u840
  3279  0013B6                     u841:
  3280  0013B6  EFE0  F009         	goto	l75
  3281  0013BA                     u840:
  3282  0013BA                     
  3283                           ;lcd.c: 6:   LATDbits.LATD4 = 1;
  3284  0013BA  888C               	bsf	140,4,c	;volatile
  3285  0013BC  EFE1  F009         	goto	l1611
  3286  0013C0                     l75:
  3287                           
  3288                           ;lcd.c: 8:   LATDbits.LATD4 = 0;
  3289  0013C0  988C               	bcf	140,4,c	;volatile
  3290  0013C2                     l1611:
  3291                           
  3292                           ;lcd.c: 10:  if(a & 2)
  3293  0013C2  A201               	btfss	Lcd_Port@a^0,1,c
  3294  0013C4  EFE6  F009         	goto	u851
  3295  0013C8  EFE8  F009         	goto	u850
  3296  0013CC                     u851:
  3297  0013CC  EFEB  F009         	goto	l77
  3298  0013D0                     u850:
  3299  0013D0                     
  3300                           ;lcd.c: 11:   LATDbits.LATD5 = 1;
  3301  0013D0  8A8C               	bsf	140,5,c	;volatile
  3302  0013D2  EFEC  F009         	goto	l1615
  3303  0013D6                     l77:
  3304                           
  3305                           ;lcd.c: 13:   LATDbits.LATD5 = 0;
  3306  0013D6  9A8C               	bcf	140,5,c	;volatile
  3307  0013D8                     l1615:
  3308                           
  3309                           ;lcd.c: 15:  if(a & 4)
  3310  0013D8  A401               	btfss	Lcd_Port@a^0,2,c
  3311  0013DA  EFF1  F009         	goto	u861
  3312  0013DE  EFF3  F009         	goto	u860
  3313  0013E2                     u861:
  3314  0013E2  EFF6  F009         	goto	l79
  3315  0013E6                     u860:
  3316  0013E6                     
  3317                           ;lcd.c: 16:   LATDbits.LATD6 = 1;
  3318  0013E6  8C8C               	bsf	140,6,c	;volatile
  3319  0013E8  EFF7  F009         	goto	l1619
  3320  0013EC                     l79:
  3321                           
  3322                           ;lcd.c: 18:   LATDbits.LATD6 = 0;
  3323  0013EC  9C8C               	bcf	140,6,c	;volatile
  3324  0013EE                     l1619:
  3325                           
  3326                           ;lcd.c: 20:  if(a & 8)
  3327  0013EE  A601               	btfss	Lcd_Port@a^0,3,c
  3328  0013F0  EFFC  F009         	goto	u871
  3329  0013F4  EFFE  F009         	goto	u870
  3330  0013F8                     u871:
  3331  0013F8  EF01  F00A         	goto	l81
  3332  0013FC                     u870:
  3333  0013FC                     
  3334                           ;lcd.c: 21:   LATDbits.LATD7 = 1;
  3335  0013FC  8E8C               	bsf	140,7,c	;volatile
  3336  0013FE  EF02  F00A         	goto	l83
  3337  001402                     l81:
  3338                           
  3339                           ;lcd.c: 23:   LATDbits.LATD7 = 0;
  3340  001402  9E8C               	bcf	140,7,c	;volatile
  3341  001404                     l83:
  3342  001404  0012               	return		;funcret
  3343  001406                     __end_of_Lcd_Port:
  3344                           	callstack 0
  3345                           
  3346 ;; *************** function _Config_TMRS_Interrupt *****************
  3347 ;; Defined at:
  3348 ;;		line 66 in file "main.c"
  3349 ;; Parameters:    Size  Location     Type
  3350 ;;		None
  3351 ;; Auto vars:     Size  Location     Type
  3352 ;;		None
  3353 ;; Return value:  Size  Location     Type
  3354 ;;                  1    wreg      void 
  3355 ;; Registers used:
  3356 ;;		None
  3357 ;; Tracked objects:
  3358 ;;		On entry : 0/0
  3359 ;;		On exit  : 0/0
  3360 ;;		Unchanged: 0/0
  3361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3362 ;;      Params:         0       0       0       0       0       0       0       0       0
  3363 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3364 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3365 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3366 ;;Total ram usage:        0 bytes
  3367 ;; Hardware stack levels used: 1
  3368 ;; Hardware stack levels required when called: 1
  3369 ;; This function calls:
  3370 ;;		Nothing
  3371 ;; This function is called by:
  3372 ;;		_main
  3373 ;; This function uses a non-reentrant model
  3374 ;;
  3375                           
  3376                           	psect	text23
  3377  001682                     __ptext23:
  3378                           	callstack 0
  3379  001682                     _Config_TMRS_Interrupt:
  3380                           	callstack 29
  3381  001682                     
  3382                           ;main.c: 67:     INTCONbits.GIE = 1;
  3383  001682  8EF2               	bsf	242,7,c	;volatile
  3384                           
  3385                           ;main.c: 68:     INTCONbits.PEIE = 1;
  3386  001684  8CF2               	bsf	242,6,c	;volatile
  3387                           
  3388                           ;main.c: 71:     INTCONbits.TMR0IF = 0;
  3389  001686  94F2               	bcf	242,2,c	;volatile
  3390                           
  3391                           ;main.c: 72:     INTCONbits.TMR0IE = 1;
  3392  001688  8AF2               	bsf	242,5,c	;volatile
  3393  00168A  0012               	return		;funcret
  3394  00168C                     __end_of_Config_TMRS_Interrupt:
  3395                           	callstack 0
  3396                           
  3397 ;; *************** function _Config_TMR0_Temp *****************
  3398 ;; Defined at:
  3399 ;;		line 86 in file "main.c"
  3400 ;; Parameters:    Size  Location     Type
  3401 ;;		None
  3402 ;; Auto vars:     Size  Location     Type
  3403 ;;		None
  3404 ;; Return value:  Size  Location     Type
  3405 ;;                  1    wreg      void 
  3406 ;; Registers used:
  3407 ;;		wreg, status,2
  3408 ;; Tracked objects:
  3409 ;;		On entry : 0/0
  3410 ;;		On exit  : 0/0
  3411 ;;		Unchanged: 0/0
  3412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3413 ;;      Params:         0       0       0       0       0       0       0       0       0
  3414 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3415 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3416 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3417 ;;Total ram usage:        0 bytes
  3418 ;; Hardware stack levels used: 1
  3419 ;; Hardware stack levels required when called: 1
  3420 ;; This function calls:
  3421 ;;		Nothing
  3422 ;; This function is called by:
  3423 ;;		_main
  3424 ;; This function uses a non-reentrant model
  3425 ;;
  3426                           
  3427                           	psect	text24
  3428  001636                     __ptext24:
  3429                           	callstack 0
  3430  001636                     _Config_TMR0_Temp:
  3431                           	callstack 29
  3432  001636                     
  3433                           ;main.c: 88:     T0CONbits.TMR0ON = 0;
  3434  001636  9ED5               	bcf	213,7,c	;volatile
  3435                           
  3436                           ;main.c: 89:     T0CONbits.T08BIT = 0;
  3437  001638  9CD5               	bcf	213,6,c	;volatile
  3438                           
  3439                           ;main.c: 90:     T0CONbits.T0CS = 0;
  3440  00163A  9AD5               	bcf	213,5,c	;volatile
  3441                           
  3442                           ;main.c: 98:     T0CONbits.PSA = 0;
  3443  00163C  96D5               	bcf	213,3,c	;volatile
  3444  00163E                     
  3445                           ;main.c: 99:     T0CONbits.T0PS = 0b100;
  3446  00163E  50D5               	movf	213,w,c	;volatile
  3447  001640  0BF8               	andlw	-8
  3448  001642  0904               	iorlw	4
  3449  001644  6ED5               	movwf	213,c	;volatile
  3450                           
  3451                           ;main.c: 100:     TMR0 = 3036;
  3452  001646  0E0B               	movlw	11
  3453  001648  6ED7               	movwf	215,c	;volatile
  3454  00164A  0EDC               	movlw	220
  3455  00164C  6ED6               	movwf	214,c	;volatile
  3456  00164E                     
  3457                           ;main.c: 101:     T0CONbits.TMR0ON = 1;
  3458  00164E  8ED5               	bsf	213,7,c	;volatile
  3459  001650  0012               	return		;funcret
  3460  001652                     __end_of_Config_TMR0_Temp:
  3461                           	callstack 0
  3462                           
  3463 ;; *************** function _Config_Port *****************
  3464 ;; Defined at:
  3465 ;;		line 51 in file "main.c"
  3466 ;; Parameters:    Size  Location     Type
  3467 ;;		None
  3468 ;; Auto vars:     Size  Location     Type
  3469 ;;		None
  3470 ;; Return value:  Size  Location     Type
  3471 ;;                  1    wreg      void 
  3472 ;; Registers used:
  3473 ;;		wreg, status,2
  3474 ;; Tracked objects:
  3475 ;;		On entry : 0/0
  3476 ;;		On exit  : 0/0
  3477 ;;		Unchanged: 0/0
  3478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3479 ;;      Params:         0       0       0       0       0       0       0       0       0
  3480 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3481 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3482 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3483 ;;Total ram usage:        0 bytes
  3484 ;; Hardware stack levels used: 1
  3485 ;; Hardware stack levels required when called: 1
  3486 ;; This function calls:
  3487 ;;		Nothing
  3488 ;; This function is called by:
  3489 ;;		_main
  3490 ;; This function uses a non-reentrant model
  3491 ;;
  3492                           
  3493                           	psect	text25
  3494  001652                     __ptext25:
  3495                           	callstack 0
  3496  001652                     _Config_Port:
  3497                           	callstack 29
  3498  001652                     
  3499                           ;main.c: 53:     LATD = 0x00;
  3500  001652  0E00               	movlw	0
  3501  001654  6E8C               	movwf	140,c	;volatile
  3502                           
  3503                           ;main.c: 56:     SLRCON=0b00000000;
  3504  001656  0E00               	movlw	0
  3505  001658  6E7A               	movwf	122,c	;volatile
  3506                           
  3507                           ;main.c: 59:     ANSELD = 0x00;
  3508  00165A  0E00               	movlw	0
  3509  00165C  010F               	movlb	15	; () banked
  3510  00165E  6F5E               	movwf	94,b	;volatile
  3511                           
  3512                           ;main.c: 62:     TRISD = 0x00;
  3513  001660  0E00               	movlw	0
  3514  001662  6E95               	movwf	149,c	;volatile
  3515  001664                     
  3516                           ; BSR set to: 15
  3517  001664  0012               	return		;funcret
  3518  001666                     __end_of_Config_Port:
  3519                           	callstack 0
  3520                           
  3521 ;; *************** function _Config_Clock *****************
  3522 ;; Defined at:
  3523 ;;		line 46 in file "main.c"
  3524 ;; Parameters:    Size  Location     Type
  3525 ;;		None
  3526 ;; Auto vars:     Size  Location     Type
  3527 ;;		None
  3528 ;; Return value:  Size  Location     Type
  3529 ;;                  1    wreg      void 
  3530 ;; Registers used:
  3531 ;;		wreg, status,2
  3532 ;; Tracked objects:
  3533 ;;		On entry : 0/0
  3534 ;;		On exit  : 0/0
  3535 ;;		Unchanged: 0/0
  3536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3537 ;;      Params:         0       0       0       0       0       0       0       0       0
  3538 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3539 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3540 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3541 ;;Total ram usage:        0 bytes
  3542 ;; Hardware stack levels used: 1
  3543 ;; Hardware stack levels required when called: 1
  3544 ;; This function calls:
  3545 ;;		Nothing
  3546 ;; This function is called by:
  3547 ;;		_main
  3548 ;; This function uses a non-reentrant model
  3549 ;;
  3550                           
  3551                           	psect	text26
  3552  001674                     __ptext26:
  3553                           	callstack 0
  3554  001674                     _Config_Clock:
  3555                           	callstack 29
  3556  001674                     
  3557                           ;main.c: 47:     OSCCONbits.IRCF=0b111;
  3558  001674  0E70               	movlw	112
  3559  001676  12D3               	iorwf	211,f,c	;volatile
  3560                           
  3561                           ;main.c: 48:     OSCCONbits.SCS=0b10;
  3562  001678  50D3               	movf	211,w,c	;volatile
  3563  00167A  0BFC               	andlw	-4
  3564  00167C  0902               	iorlw	2
  3565  00167E  6ED3               	movwf	211,c	;volatile
  3566  001680  0012               	return		;funcret
  3567  001682                     __end_of_Config_Clock:
  3568                           	callstack 0
  3569                           
  3570 ;; *************** function _ISR_TMRS *****************
  3571 ;; Defined at:
  3572 ;;		line 76 in file "main.c"
  3573 ;; Parameters:    Size  Location     Type
  3574 ;;		None
  3575 ;; Auto vars:     Size  Location     Type
  3576 ;;		None
  3577 ;; Return value:  Size  Location     Type
  3578 ;;                  1    wreg      void 
  3579 ;; Registers used:
  3580 ;;		wreg, status,2
  3581 ;; Tracked objects:
  3582 ;;		On entry : 0/0
  3583 ;;		On exit  : 0/0
  3584 ;;		Unchanged: 0/0
  3585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3586 ;;      Params:         0       0       0       0       0       0       0       0       0
  3587 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3588 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3589 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3590 ;;Total ram usage:        0 bytes
  3591 ;; Hardware stack levels used: 1
  3592 ;; This function calls:
  3593 ;;		Nothing
  3594 ;; This function is called by:
  3595 ;;		Interrupt level 2
  3596 ;; This function uses a non-reentrant model
  3597 ;;
  3598                           
  3599                           	psect	intcode
  3600  000008                     __pintcode:
  3601                           	callstack 0
  3602  000008                     _ISR_TMRS:
  3603                           	callstack 22
  3604                           
  3605                           ;incstack = 0
  3606  000008  825F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3607  00000A                     
  3608                           ;main.c: 77:     if(INTCONbits.TMR0IF){
  3609  00000A  A4F2               	btfss	242,2,c	;volatile
  3610  00000C  EF0A  F000         	goto	i2u102_41
  3611  000010  EF0C  F000         	goto	i2u102_40
  3612  000014                     i2u102_41:
  3613  000014  EF14  F000         	goto	i2l65
  3614  000018                     i2u102_40:
  3615  000018                     
  3616                           ;main.c: 78:         TMR0 = 3036;
  3617  000018  0E0B               	movlw	11
  3618  00001A  6ED7               	movwf	215,c	;volatile
  3619  00001C  0EDC               	movlw	220
  3620  00001E  6ED6               	movwf	214,c	;volatile
  3621  000020                     
  3622                           ;main.c: 79:         INTCONbits.TMR0IF=0;
  3623  000020  94F2               	bcf	242,2,c	;volatile
  3624                           
  3625                           ;main.c: 80:         flag=1;
  3626  000022  0E01               	movlw	1
  3627  000024  0100               	movlb	0	; () banked
  3628  000026  6F68               	movwf	_flag& (0+255),b
  3629  000028                     i2l65:
  3630  000028  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3631  00002A  0011               	retfie		f
  3632  00002C                     __end_of_ISR_TMRS:
  3633                           	callstack 0
  3634                           
  3635                           	psect	rparam
  3636  0000                     
  3637                           	psect	temp
  3638  00005F                     btemp:
  3639                           	callstack 0
  3640  00005F                     	ds	1
  3641  0000                     int$flags	set	btemp
  3642  0000                     wtemp8	set	btemp+1
  3643  0000                     ttemp5	set	btemp+1
  3644  0000                     ttemp6	set	btemp+4
  3645  0000                     ttemp7	set	btemp+8
  3646                           
  3647                           	psect	idloc
  3648                           
  3649                           ;Config register IDLOC0 @ 0x200000
  3650                           ;	unspecified, using default values
  3651  200000                     	org	2097152
  3652  200000  FF                 	db	255
  3653                           
  3654                           ;Config register IDLOC1 @ 0x200001
  3655                           ;	unspecified, using default values
  3656  200001                     	org	2097153
  3657  200001  FF                 	db	255
  3658                           
  3659                           ;Config register IDLOC2 @ 0x200002
  3660                           ;	unspecified, using default values
  3661  200002                     	org	2097154
  3662  200002  FF                 	db	255
  3663                           
  3664                           ;Config register IDLOC3 @ 0x200003
  3665                           ;	unspecified, using default values
  3666  200003                     	org	2097155
  3667  200003  FF                 	db	255
  3668                           
  3669                           ;Config register IDLOC4 @ 0x200004
  3670                           ;	unspecified, using default values
  3671  200004                     	org	2097156
  3672  200004  FF                 	db	255
  3673                           
  3674                           ;Config register IDLOC5 @ 0x200005
  3675                           ;	unspecified, using default values
  3676  200005                     	org	2097157
  3677  200005  FF                 	db	255
  3678                           
  3679                           ;Config register IDLOC6 @ 0x200006
  3680                           ;	unspecified, using default values
  3681  200006                     	org	2097158
  3682  200006  FF                 	db	255
  3683                           
  3684                           ;Config register IDLOC7 @ 0x200007
  3685                           ;	unspecified, using default values
  3686  200007                     	org	2097159
  3687  200007  FF                 	db	255
  3688                           
  3689                           	psect	config
  3690                           
  3691                           ;Config register CONFIG1L @ 0x300000
  3692                           ;	PLL Selection
  3693                           ;	PLLSEL = PLL4X, 4x clock multiplier
  3694                           ;	PLL Enable Configuration bit
  3695                           ;	CFGPLLEN = OFF, PLL Disabled (firmware controlled)
  3696                           ;	CPU System Clock Postscaler
  3697                           ;	CPUDIV = NOCLKDIV, CPU uses system clock (no divide)
  3698                           ;	Low Speed USB mode with 48 MHz system clock
  3699                           ;	LS48MHZ = SYS24X4, System clock at 24 MHz, USB clock divider is set to 4
  3700  300000                     	org	3145728
  3701  300000  00                 	db	0
  3702                           
  3703                           ;Config register CONFIG1H @ 0x300001
  3704                           ;	Oscillator Selection
  3705                           ;	FOSC = INTOSCIO, Internal oscillator
  3706                           ;	Primary Oscillator Shutdown
  3707                           ;	PCLKEN = ON, Primary oscillator enabled
  3708                           ;	Fail-Safe Clock Monitor
  3709                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3710                           ;	Internal/External Oscillator Switchover
  3711                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3712  300001                     	org	3145729
  3713  300001  28                 	db	40
  3714                           
  3715                           ;Config register CONFIG2L @ 0x300002
  3716                           ;	Power-up Timer Enable
  3717                           ;	nPWRTEN = ON, Power up timer enabled
  3718                           ;	Brown-out Reset Enable
  3719                           ;	BOREN = SBORDIS, BOR enabled in hardware (SBOREN is ignored)
  3720                           ;	Brown-out Reset Voltage
  3721                           ;	BORV = 190, BOR set to 1.9V nominal
  3722                           ;	Low-Power Brown-out Reset
  3723                           ;	nLPBOR = OFF, Low-Power Brown-out Reset disabled
  3724  300002                     	org	3145730
  3725  300002  5E                 	db	94
  3726                           
  3727                           ;Config register CONFIG2H @ 0x300003
  3728                           ;	Watchdog Timer Enable bits
  3729                           ;	WDTEN = OFF, WDT disabled in hardware (SWDTEN ignored)
  3730                           ;	Watchdog Timer Postscaler
  3731                           ;	WDTPS = 32768, 1:32768
  3732  300003                     	org	3145731
  3733  300003  3C                 	db	60
  3734                           
  3735                           ; Padding undefined space
  3736  300004                     	org	3145732
  3737  300004  FF                 	db	255
  3738                           
  3739                           ;Config register CONFIG3H @ 0x300005
  3740                           ;	CCP2 MUX bit
  3741                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  3742                           ;	PORTB A/D Enable bit
  3743                           ;	PBADEN = ON, PORTB<5:0> pins are configured as analog input channels on Reset
  3744                           ;	Timer3 Clock Input MUX bit
  3745                           ;	T3CMX = RC0, T3CKI function is on RC0
  3746                           ;	SDO Output MUX bit
  3747                           ;	SDOMX = RB3, SDO function is on RB3
  3748                           ;	Master Clear Reset Pin Enable
  3749                           ;	MCLRE = OFF, RE3 input pin enabled; external MCLR disabled
  3750  300005                     	org	3145733
  3751  300005  53                 	db	83
  3752                           
  3753                           ;Config register CONFIG4L @ 0x300006
  3754                           ;	Stack Full/Underflow Reset
  3755                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3756                           ;	Single-Supply ICSP Enable bit
  3757                           ;	LVP = OFF, Single-Supply ICSP disabled
  3758                           ;	Dedicated In-Circuit Debug/Programming Port Enable
  3759                           ;	ICPRT = OFF, ICPORT disabled
  3760                           ;	Extended Instruction Set Enable bit
  3761                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled
  3762                           ;	Background Debugger Enable bit
  3763                           ;	DEBUG = 0x1, unprogrammed default
  3764  300006                     	org	3145734
  3765  300006  81                 	db	129
  3766                           
  3767                           ; Padding undefined space
  3768  300007                     	org	3145735
  3769  300007  FF                 	db	255
  3770                           
  3771                           ;Config register CONFIG5L @ 0x300008
  3772                           ;	Block 0 Code Protect
  3773                           ;	CP0 = OFF, Block 0 is not code-protected
  3774                           ;	Block 1 Code Protect
  3775                           ;	CP1 = OFF, Block 1 is not code-protected
  3776                           ;	Block 2 Code Protect
  3777                           ;	CP2 = OFF, Block 2 is not code-protected
  3778                           ;	Block 3 Code Protect
  3779                           ;	CP3 = OFF, Block 3 is not code-protected
  3780  300008                     	org	3145736
  3781  300008  0F                 	db	15
  3782                           
  3783                           ;Config register CONFIG5H @ 0x300009
  3784                           ;	Boot Block Code Protect
  3785                           ;	CPB = OFF, Boot block is not code-protected
  3786                           ;	Data EEPROM Code Protect
  3787                           ;	CPD = OFF, Data EEPROM is not code-protected
  3788  300009                     	org	3145737
  3789  300009  C0                 	db	192
  3790                           
  3791                           ;Config register CONFIG6L @ 0x30000A
  3792                           ;	Block 0 Write Protect
  3793                           ;	WRT0 = OFF, Block 0 (0800-1FFFh) is not write-protected
  3794                           ;	Block 1 Write Protect
  3795                           ;	WRT1 = OFF, Block 1 (2000-3FFFh) is not write-protected
  3796                           ;	Block 2 Write Protect
  3797                           ;	WRT2 = OFF, Block 2 (04000-5FFFh) is not write-protected
  3798                           ;	Block 3 Write Protect
  3799                           ;	WRT3 = OFF, Block 3 (06000-7FFFh) is not write-protected
  3800  30000A                     	org	3145738
  3801  30000A  0F                 	db	15
  3802                           
  3803                           ;Config register CONFIG6H @ 0x30000B
  3804                           ;	Configuration Registers Write Protect
  3805                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  3806                           ;	Boot Block Write Protect
  3807                           ;	WRTB = OFF, Boot block (0000-7FFh) is not write-protected
  3808                           ;	Data EEPROM Write Protect
  3809                           ;	WRTD = OFF, Data EEPROM is not write-protected
  3810  30000B                     	org	3145739
  3811  30000B  E0                 	db	224
  3812                           
  3813                           ;Config register CONFIG7L @ 0x30000C
  3814                           ;	Block 0 Table Read Protect
  3815                           ;	EBTR0 = OFF, Block 0 is not protected from table reads executed in other blocks
  3816                           ;	Block 1 Table Read Protect
  3817                           ;	EBTR1 = OFF, Block 1 is not protected from table reads executed in other blocks
  3818                           ;	Block 2 Table Read Protect
  3819                           ;	EBTR2 = OFF, Block 2 is not protected from table reads executed in other blocks
  3820                           ;	Block 3 Table Read Protect
  3821                           ;	EBTR3 = OFF, Block 3 is not protected from table reads executed in other blocks
  3822  30000C                     	org	3145740
  3823  30000C  0F                 	db	15
  3824                           
  3825                           ;Config register CONFIG7H @ 0x30000D
  3826                           ;	Boot Block Table Read Protect
  3827                           ;	EBTRB = OFF, Boot block is not protected from table reads executed in other blocks
  3828  30000D                     	org	3145741
  3829  30000D  40                 	db	64
  3830                           tosu	equ	0xFFF
  3831                           tosh	equ	0xFFE
  3832                           tosl	equ	0xFFD
  3833                           stkptr	equ	0xFFC
  3834                           pclatu	equ	0xFFB
  3835                           pclath	equ	0xFFA
  3836                           pcl	equ	0xFF9
  3837                           tblptru	equ	0xFF8
  3838                           tblptrh	equ	0xFF7
  3839                           tblptrl	equ	0xFF6
  3840                           tablat	equ	0xFF5
  3841                           prodh	equ	0xFF4
  3842                           prodl	equ	0xFF3
  3843                           indf0	equ	0xFEF
  3844                           postinc0	equ	0xFEE
  3845                           postdec0	equ	0xFED
  3846                           preinc0	equ	0xFEC
  3847                           plusw0	equ	0xFEB
  3848                           fsr0h	equ	0xFEA
  3849                           fsr0l	equ	0xFE9
  3850                           wreg	equ	0xFE8
  3851                           indf1	equ	0xFE7
  3852                           postinc1	equ	0xFE6
  3853                           postdec1	equ	0xFE5
  3854                           preinc1	equ	0xFE4
  3855                           plusw1	equ	0xFE3
  3856                           fsr1h	equ	0xFE2
  3857                           fsr1l	equ	0xFE1
  3858                           bsr	equ	0xFE0
  3859                           indf2	equ	0xFDF
  3860                           postinc2	equ	0xFDE
  3861                           postdec2	equ	0xFDD
  3862                           preinc2	equ	0xFDC
  3863                           plusw2	equ	0xFDB
  3864                           fsr2h	equ	0xFDA
  3865                           fsr2l	equ	0xFD9
  3866                           status	equ	0xFD8

Data Sizes:
    Strings     10
    Constant    0
    Data        0
    BSS         56
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     93      94
    BANK0           160     13      68
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 14
		 -> str_contador(BANK0[14]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S737$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S737$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 14
		 -> str_contador(BANK0[14]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_utoa
    _utoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _atoi->_isspace
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _ISR_TMRS in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _ISR_TMRS in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_TMRS in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_TMRS in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_TMRS in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_TMRS in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_TMRS in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_TMRS in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_TMRS in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    8636
                       _Config_Clock
                        _Config_Port
                   _Config_TMR0_Temp
              _Config_TMRS_Interrupt
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    15      6    7528
                                             87 COMRAM     6     0      6
                                              0 BANK0     13    13      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7175
                                             79 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           44    38      6    6803
                                             59 COMRAM    20    14      6
                               _atoi
                              _fputc
                            _isdigit
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                32    22     10    3759
                                             27 COMRAM    32    22     10
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___lomod                                             17     1     16     311
                                              0 COMRAM    17     1     16
 ---------------------------------------------------------------------------------
 (5) ___lodiv                                             25     9     16     314
                                              0 COMRAM    25     9     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                10     8      2    1126
                                              7 COMRAM    10     8      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     207
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     237
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     357
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     4     2      2     344
                                              4 COMRAM     4     2      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     178
                                              1 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     456
                                              3 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     198
                                              3 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              1 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Config_TMRS_Interrupt                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Config_TMR0_Temp                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Config_Port                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Config_Clock                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR_TMRS                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Config_Clock
   _Config_Port
   _Config_TMR0_Temp
   _Config_TMRS_Interrupt
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _fputc
           _putch
         _isdigit
         _utoa
           ___lodiv
           ___lomod
           _pad
             _fputc
             _fputs
               _fputc
             _strlen

 _ISR_TMRS (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      29        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      D      44       5       42.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5D      5E       1      100.0%
BITBIGSFRlhh        3D      0       0      23        0.0%
BITBIGSFRlllh       1B      0       0      26        0.0%
BITBIGSFRhlh        1A      0       0      21        0.0%
BITBIGSFRllh        11      0       0      25        0.0%
BITBIGSFRhh          D      0       0      20        0.0%
BITBIGSFRllll        B      0       0      27        0.0%
BITBIGSFRlhl         8      0       0      24        0.0%
BITBIGSFRhll         1      0       0      22        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A2      28        0.0%
DATA                 0      0      A2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Sun Jul 10 19:13:49 2022

                           l53 1680                             l47 1260                             l56 1664  
                           l81 1402                             l59 168A                             l83 1404  
                           l75 13C0                             l68 1650                             l77 13D6  
                           l86 1618                             l79 13EC                             l95 1346  
                           l89 1672                             l98 12E0            ___wmul@multiplicand 0003  
                          l101 159C                            l107 152C                            l116 15F8  
                          l561 0F8C                            l554 0F6C                            l571 105C  
                          l900 0E9C                            l564 103C                            l903 1564  
                          l911 14A8                            l823 116E                            l833 0B7E  
                          l826 11B0                            l843 0D46                            l835 0B86  
                          l828 11EC                            l926 1126                            l934 14EC  
                          l943 15D2                            l937 168C                            l857 0908  
                          l874 13A0                            l794 1456                            l875 13A8  
                          l868 0B44                            l897 0E94                            u600 0EF2  
                          u520 1070                            u601 0EEE                            u521 106C  
                          u610 0F32                            u530 1082                            u611 0F2E  
                          u531 107E                            u700 1560                            u620 0FAC  
                          u540 10AA                            u621 0FA8                            u541 10A6  
                          u710 1470                            u630 0FD6                            u550 10E0  
                          u711 146C                            u631 0FD2                            u551 10DC  
                          u720 149E                            u800 0D7C                            u640 1004  
                          u560 14EC                            u721 149A                            u801 0D78  
                          u641 1000                            u561 14E8                            u810 0DB2  
                          u570 15C6                            u650 1138                            u730 0B56  
                          u811 0DAE                            u571 15C2                            u651 1134  
                          u731 0B52                            u820 0E66                            u660 115A  
                          u740 0B72                            u900 0918                            u821 0E62  
                          u581 0EA4                            u661 1156                            u741 0B6E  
                          u901 0914                            u830 0E78                            u590 0EC8  
                          u670 11B0                            u750 0CBC                            u910 093E  
                          u831 0E74                            u591 0EC4                            u671 11AC  
                          u751 0CB8                            u911 093A                            u840 13BA  
                          u680 11C0                            u760 0CDA                            u920 0982  
                          u841 13B6                            u681 11BC                            u761 0CD6  
                          u921 097E                            u850 13D0                            u690 155E  
                          u770 0CF4                            u930 09FC                            u851 13CC  
                          u691 1558                            u771 0CF0                            u931 09F8  
                          u860 13E6                            u780 0D0E                            u940 0A20  
                          u861 13E2                            u781 0D0A                            u941 0A1C  
                          u870 13FC                            u790 0D1E                            u950 0AC6  
                          u871 13F8                            u791 0D1A                            u951 0AC2  
                          u880 0830                            u960 13A0                            u881 082C  
                          u961 139C                            u970 12F4                            u890 0908  
                          u971 12F0                            u891 0904                            u980 1328  
                          u981 1324                            u990 152C                            u991 1528  
                          _pad 1128                            wreg 000FE8                           l1501 1128  
                         l1431 108C                           l1511 117A                           l1503 1138  
                         l1601 0E78                           l1433 10AA                           l1425 105E  
                         l1441 14B6                           l1513 118E                           l1505 114C  
                         l1611 13C2                           l1523 152E                           l1531 1470  
                         l1435 10E0                           l1427 1070                           l1443 14C8  
                         l1451 15AE                           l1515 1192                           l1507 115A  
                         l1621 13FC                           l1613 13D0                           l1533 149E  
                         l1429 1082                           l1445 14CC                           l1453 15C6  
                         l1517 11C0                           l1509 1166                           l1541 0B56  
                         l1615 13D8                           l1607 13AC                           l1535 14A2  
                         l1527 1458                           l1471 0EE4                           l1463 0E9E  
                         l1439 14AA                           l1447 159E                           l1519 11D4  
                         l1551 0BBE                           l1543 0B58                           l1631 0854  
                         l1703 0B0E                           l1623 080C                           l1617 13E6  
                         l1609 13BA                           l1721 1604                           l1457 15D4  
                         l1529 145C                           l1481 0F54                           l1473 0EF2  
                         l1465 0EAA                           l1449 15AA                           l1553 0BC4  
                         l1561 0CAA                           l1545 0B72                           l1705 0B32  
                         l1641 087E                           l1633 0860                           l1625 0830  
                         l1801 1420                           l1619 13EE                           l1723 1606  
                         l1811 12F4                           l1731 1576                           l1459 15F0  
                         l1483 0F66                           l1475 0F04                           l1467 0EC8  
                         l1491 0FC8                           l1563 0CBC                           l1571 0D1E  
                         l1555 0C3A                           l1547 0BAE                           l1539 0B46  
                         l1635 0864                           l1627 083E                           l1803 1428  
                         l1725 1616                           l1717 15FC                           l1821 133A  
                         l1813 1306                           l1741 1590                           l1733 157E  
                         l1581 0D60                           l1477 0F32                           l1469 0ED0  
                         l1493 0FD6                           l1485 0F8E                           l1565 0CDA  
                         l1557 0C40                           l1549 0BB6                           l1661 0918  
                         l1653 0896                           l1645 0886                           l1637 0876  
                         l1629 0850                           l1805 1444                           l1719 15FE  
                         l1823 1340                           l1815 130C                           l1743 1592  
                         l1735 1580                           l1727 1568                           l1831 1510  
                         l1591 0DFA                           l1583 0D7C                           l1575 0D48  
                         l1479 0F52                           l1495 1004                           l1487 0FAC  
                         l1567 0CF4                           l1559 0C46                           l1671 0990  
                         l1663 091A                           l1751 135E                           l1761 1636  
                         l1817 1316                           l1809 12E4                           l1745 159A  
                         l1737 1588                           l1729 1574                           l1825 14EE  
                         l1585 0DB6                           l1577 0D5C                           l1497 1024  
                         l1489 0FB4                           l1569 0D0E                           l1681 0A20  
                         l1673 09B0                           l1665 093E                           l1657 08A2  
                         l1649 088E                           l1753 1384                           l1841 1202  
                         l1833 11EE                           l1755 1674                           l1763 163E  
                         l1771 1284                           l1819 1328                           l1739 158A  
                         l1827 14FA                           l1587 0DBE                           l1499 1036  
                         l1691 0AD4                           l1683 0A6A                           l1667 0974  
                         l1659 08F6                           l1747 1348                           l1851 123E  
                         l1843 1206                           l1835 11F6                           l1757 1652  
                         l1765 164E                           l1781 12B6                           l1773 128A  
                         l1829 150C                           l1597 0E30                           l1589 0DC6  
                         l1693 0AE8                           l1677 09BE                           l1669 0982  
                         l1917 08C8                           l1749 1350                           l1853 124A  
                         l1845 1218                           l1837 11FA                           l1759 1682  
                         l1791 12D4                           l1783 12BC                           l1775 129A  
                         l1767 126E                           l1599 0E66                           l1919 0DE4  
                         l1687 0AA2                           l1679 09FC                           l1855 125C  
                         l1847 121A                           l1839 11FE                           l1793 12DA  
                         l1785 12C2                           l1777 12A0                           l1769 1274  
                         l1689 0AC6                           l1697 0AF4                           l1849 1234  
                         l1795 1666                           l1787 12C8                           l1779 12B0  
                         l1699 0B02                           l1789 12CE                           l1797 1406  
                         ?_pad 0011                           l1799 1418                           STR_1 0801  
                         u1000 1218                           u1001 1214                           u1010 125C  
                         u1011 1258                           u1037 1582                           u1047 1594  
                         u1057 127A                           u1067 1290                           u1077 12A6  
                         u1087 160C                           _LATD 000F8C                           i2l65 0028  
                         _TMR0 000FD6              ?_Lcd_Write_String 0005                           _dbuf 0069  
                         _flag 0068                           _atoi 0D48                           _main 11EE  
                         _prec 0064                           _nout 0060                           pad@i 0018  
                         pad@p 0015                           fsr1h 000FE2                           fsr2h 000FDA  
                         indf2 000FDF                           fsr1l 000FE1                           pad@w 001A  
                         fsr2l 000FD9                           btemp 005F                           _utoa 0B46  
                         prodh 000FF4                           prodl 000FF3                           start 002C  
           ??_Lcd_Write_String 0007                __end_of_Lcd_Cmd 161A                   ___param_bank 000000  
          __end_of_Config_Port 1666                          ??_pad 0017                          ?_atoi 0008  
                        ?_main 0001                          ?_utoa 001C                __end_of___lodiv 0F8E  
              __end_of___lomod 105E                   vfpfcnvrt@fmt 003E                   vfpfcnvrt@llu 0046  
                        _TRISD 000F95               __end_of_ISR_TMRS 002C       __end_of_Config_TMR0_Temp 1652  
                 _str_contador 0089                          _flags 0066                          _fputc 105E  
                        _fputs 14AA                __end_of_isdigit 1566                          atoi@n 0010  
                        pad@fp 0011                          atoi@s 0008                          _width 0062  
                        _putch 168C                __end_of_isspace 14AA                          tablat 000FF5  
                        ttemp5 0060                          ttemp6 0063                          ttemp7 0067  
                        utoa@d 001E                          utoa@i 003A                          utoa@n 0032  
                        utoa@p 002E                          utoa@w 0030                          status 000FD8  
                        wtemp8 0060                __end_of_sprintf 1458               ___lodiv@dividend 0001  
             __end_of_Lcd_Init 12E2               __end_of_Lcd_Port 1406                __initialization 161A  
         __end_of_Config_Clock 1682                   __end_of_atoi 0E9E                   __end_of_main 126E  
                 __end_of_utoa 0D48          _Config_TMRS_Interrupt 1682                         ??_atoi 000A  
                       ??_main 005E                         ??_utoa 0026                  __activetblptr 000002  
             ___lodiv@quotient 0011                         ?_fputc 0001                         ?_fputs 000A  
                       ?_putch 0001                         _ANSELD 000F5E                         i2l1861 0020  
                       i2l1857 000A                         i2l1859 0018                      ??_Lcd_Cmd 0002  
                vfpfcnvrt@done 004E                         _SLRCON 000F7A                    _Config_Port 1652  
                 vfprintf@cfmt 0056                         ___wmul 15D4                      ??___lodiv 0011  
                    ??___lomod 0011                         clear_0 1620                         isa$std 000001  
                       pad@buf 0013                         _strlen 159E                         fputc@c 0001  
                       fputs@c 000E                         fputs@i 000F                         fputs@s 000A  
                    ??_isdigit 0003                   __mediumconst 0000                      ??_isspace 0003  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                       putch@c 0001               __end_of_vfprintf 13AA                         utoa@fp 001C  
                    ??_sprintf 005E                Lcd_Set_Cursor@a 0005                Lcd_Set_Cursor@b 0004  
              Lcd_Set_Cursor@y 0007                Lcd_Set_Cursor@z 0006                     __accesstop 0060  
      __end_of__initialization 1628              __end_of_Lcd_Clear 1674                  ___rparam_used 000001  
                    ?_ISR_TMRS 0001         ?_Config_TMRS_Interrupt 0001                 __pcstackCOMRAM 0001  
                __end_of_fputc 1128                  __end_of_fputs 14EE                  __end_of_putch 168E  
               _Lcd_Set_Cursor 12E2                      ?_Lcd_Init 0001                      ?_Lcd_Port 0001  
                      ??_fputc 0005                        ??_fputs 000E                        ??_putch 0001  
                   __pbssBANK0 0060                     ??_ISR_TMRS 0001                        ?___wmul 0001  
       __end_of_Lcd_Set_Cursor 1348                        ?_strlen 0001              ?_Config_TMR0_Temp 0001  
                   ??_Lcd_Init 0004                   _Config_Clock 1674                     ??_Lcd_Port 0001  
           ??_Config_TMR0_Temp 0001               ___lomod@dividend 0001                 _Lcd_Write_Char 1566  
                      _Lcd_Cmd 15FA                        __Hparam 0000                        __Lparam 0000  
                      ___lodiv 0E9E                        ___lomod 0F8E                      ?_vfprintf 0050  
                 __psmallconst 0800                        __pcinit 161A                        __ramtop 0800  
              ?_Lcd_Set_Cursor 0004                        __ptext0 11EE                        __ptext1 1406  
                      __ptext2 1348                        __ptext3 080C                        __ptext4 0B46  
                      __ptext5 1128                        __ptext6 159E                        __ptext7 14AA  
                      __ptext8 105E                        __ptext9 168C                      _T0CONbits 000FD5  
                      _isdigit 152E                        _isspace 1458                        atoi@neg 000E  
                      _sprintf 1406         __end_of_Lcd_Write_Char 159E           end_of_initialization 1628  
                      fputc@fp 0003                  __Lmediumconst 0000                   ?_Config_Port 0001  
                      fputs@fp 000C              __end_of_vfpfcnvrt 0B46                        postdec2 000FDD  
                      postinc0 000FEE                        postinc1 000FE6                        postinc2 000FDE  
                    Lcd_Port@a 0001                     ??_vfprintf 0056                        strlen@a 0003  
                      strlen@s 0001                ?_Lcd_Write_Char 0001              Lcd_Write_String@a 0005  
            Lcd_Write_String@i 0007        ??_Config_TMRS_Interrupt 0001                      _Lcd_Clear 1666  
                  vfpfcnvrt@ap 0040                    vfpfcnvrt@fp 003C                 __end_of___wmul 15FA  
             _Lcd_Write_String 14EE                 __end_of_strlen 15D4            start_initialization 161A  
              ___lodiv@divisor 0009                ___lodiv@counter 0019                    __end_of_pad 11EE  
                  vfprintf@fmt 0052                     ?_Lcd_Clear 0001                       ??___wmul 0005  
              Lcd_Write_Char@a 0004                Lcd_Write_Char@y 0003                       ??_strlen 0003  
                  __pbssCOMRAM 005E                  __pcstackBANK0 0097                       ?_Lcd_Cmd 0001  
             ??_Lcd_Set_Cursor 0005                      __pintcode 0008                       ?___lodiv 0001  
                     ?___lomod 0001                ___lomod@divisor 0009                    __smallconst 0800  
              ___lomod@counter 0011                       ?_isdigit 0001                       ?_isspace 0001  
                     ?_sprintf 0058                 ___wmul@product 0005                       _LATDbits 000F8C  
                     i2u102_40 0018                       i2u102_41 0014                       Lcd_Cmd@a 0003  
                     _ISR_TMRS 0008                    ??_Lcd_Clear 0004                      _vfpfcnvrt 080C  
            ___wmul@multiplier 0001               ??_Lcd_Write_Char 0002                       _Lcd_Init 126E  
                     _Lcd_Port 13AA       __end_of_Lcd_Write_String 152E                       __Hrparam 0000  
__end_of_Config_TMRS_Interrupt 168C                     vfprintf@ap 0054                       __Lrparam 0000  
                   vfprintf@fp 0050                     ?_vfpfcnvrt 003C                     sprintf@fmt 005A  
                     __ptext10 0F8E                       __ptext11 0E9E                       __ptext20 1666  
                     __ptext12 0D48                       __ptext21 15FA                       __ptext13 1458  
                     __ptext22 13AA                       __ptext14 152E                       __ptext23 1682  
                     __ptext15 15D4                       __ptext24 1636                       __ptext16 14EE  
                     __ptext25 1652                       __ptext17 1566                       __ptext26 1674  
                     __ptext18 12E2                       __ptext19 126E                       _contador 005E  
             _Config_TMR0_Temp 1636                       isa$xinst 000000                       int$flags 005F  
                     _vfprintf 1348                    _isspace$869 0007                     _INTCONbits 000FF2  
                ?_Config_Clock 0001                       isdigit@c 0001             Lcd_Write_Char@temp 0002  
                     intlevel2 0000                      sprintf@ap 0097                       isspace@c 0001  
                   _OSCCONbits 000FD3                    ??_vfpfcnvrt 0042             Lcd_Set_Cursor@temp 0008  
                     sprintf@f 0099                       sprintf@s 0058                 ??_Config_Clock 0001  
                ??_Config_Port 0001  
