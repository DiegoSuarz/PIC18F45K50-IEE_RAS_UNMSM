
#ifndef XC_HEADER_TEMPLATE_H
#define	XC_HEADER_TEMPLATE_H

#include <xc.h> // include processor files - each processor file is guarded.  

#define Display_Anodo_size  sizeof(SevenSegmentASCII)/sizeof(SevenSegmentASCII[0])

#define Digit_0 0xC0
#define Digit_1 0xF9
#define Digit_2 0xA4
#define Digit_3 0xB0
#define Digit_4 0x99
#define Digit_5 0x92
#define Digit_6 0x82
#define Digit_7 0xF8
#define Digit_8 0x80
#define Digit_9 0x90

uint8_t display_anodo[]={Digit_0,Digit_1,Digit_2,Digit_3,Digit_4,Digit_5,Digit_6,Digit_7,Digit_8,Digit_9};

#define SEGMENT_SEGA_BIT (0U)
#define SEGMENT_SEGB_BIT (1U)
#define SEGMENT_SEGC_BIT (2U)
#define SEGMENT_SEGD_BIT (3U)
#define SEGMENT_SEGE_BIT (4U)
#define SEGMENT_SEGF_BIT (5U)
#define SEGMENT_SEGG_BIT (6U)
#define SEGMENT_DOT_BIT  (7U)

#define SEGMENT_COD(dot,g,f,e,d,c,b,a) (dot << SEGMENT_DOT_BIT)  | (g << SEGMENT_SEGG_BIT) | \
                                       (f << SEGMENT_SEGF_BIT) | (e << SEGMENT_SEGE_BIT) | \
                                       (d << SEGMENT_SEGD_BIT) | (c << SEGMENT_SEGC_BIT) | \
                                       (b << SEGMENT_SEGB_BIT) | (a << SEGMENT_SEGA_BIT) \


const uint8_t SevenSegmentASCII[] = {
    
    SEGMENT_COD(0U,0U,1U,1U,1U,1U,1U,1U), /* 0 */
	SEGMENT_COD(0U,0U,0U,0U,0U,1U,1U,0U), /* 1 */
	SEGMENT_COD(0U,1U,0U,1U,1U,0U,1U,1U), /* 2 */
	SEGMENT_COD(0U,1U,0U,0U,1U,1U,1U,1U), /* 3 */
	SEGMENT_COD(0U,1U,1U,0U,0U,1U,1U,0U), /* 4 */
	SEGMENT_COD(0U,1U,1U,0U,1U,1U,0U,1U), /* 5 */
	SEGMENT_COD(0U,1U,1U,1U,1U,1U,0U,1U), /* 6 */
	SEGMENT_COD(0U,0U,0U,0U,0U,1U,1U,1U), /* 7 */
	SEGMENT_COD(0U,1U,1U,1U,1U,1U,1U,1U), /* 8 */
	SEGMENT_COD(0U,1U,1U,0U,1U,1U,1U,1U), /* 9 */
    SEGMENT_COD(0U,1U,1U,1U,0U,1U,1U,1U), /* A */
	SEGMENT_COD(0U,1U,1U,1U,1U,1U,0U,0U), /* B */
	SEGMENT_COD(0U,0U,1U,1U,1U,0U,0U,1U), /* C */
	SEGMENT_COD(0U,1U,0U,1U,1U,1U,1U,0U), /* D */
	SEGMENT_COD(0U,1U,1U,1U,1U,0U,0U,1U), /* E */
	SEGMENT_COD(0U,1U,1U,1U,0U,0U,0U,1U), /* F */
    SEGMENT_COD(0U,0U,1U,1U,1U,1U,1U,1U), /* 0 */
	SEGMENT_COD(0U,0U,0U,0U,0U,1U,1U,0U), /* 1 */
	SEGMENT_COD(0U,1U,0U,1U,1U,0U,1U,1U), /* 2 */
	SEGMENT_COD(0U,1U,0U,0U,1U,1U,1U,1U), /* 3 */
	SEGMENT_COD(0U,1U,1U,0U,0U,1U,1U,0U), /* 4 */
	SEGMENT_COD(0U,1U,1U,0U,1U,1U,0U,1U), /* 5 */
	SEGMENT_COD(0U,1U,1U,1U,1U,1U,0U,1U), /* 6 */
	SEGMENT_COD(0U,0U,0U,0U,0U,1U,1U,1U), /* 7 */
	SEGMENT_COD(0U,1U,1U,1U,1U,1U,1U,1U), /* 8 */
	SEGMENT_COD(0U,1U,1U,0U,1U,1U,1U,1U), /* 9 */
    SEGMENT_COD(0U,1U,1U,1U,0U,1U,1U,1U), /* A */
	SEGMENT_COD(0U,1U,1U,1U,1U,1U,0U,0U), /* B */
	SEGMENT_COD(0U,0U,1U,1U,1U,0U,0U,1U), /* C */
	SEGMENT_COD(0U,1U,0U,1U,1U,1U,1U,0U), /* D */
	SEGMENT_COD(0U,1U,1U,1U,1U,0U,0U,1U), /* E */
	SEGMENT_COD(0U,1U,1U,1U,0U,0U,0U,1U), /* F */
    SEGMENT_COD(0U,0U,0U,0U,0U,0U,0U,0U), /* (space) */
	SEGMENT_COD(1U,0U,0U,0U,0U,1U,1U,0U), /* ! */
	SEGMENT_COD(0U,0U,1U,0U,0U,0U,1U,0U), /* " */
	SEGMENT_COD(0U,1U,1U,1U,1U,1U,1U,0U), /* # */
	SEGMENT_COD(0U,1U,1U,0U,1U,1U,0U,1U), /* $ */
	SEGMENT_COD(1U,1U,0U,1U,0U,0U,1U,0U), /* % */
	SEGMENT_COD(0U,1U,0U,0U,0U,1U,1U,0U), /* & */
	SEGMENT_COD(0U,0U,1U,0U,0U,0U,0U,0U), /* ' */
	SEGMENT_COD(0U,0U,1U,0U,1U,0U,0U,1U), /* ( */
	SEGMENT_COD(0U,0U,0U,0U,1U,0U,1U,1U), /* ) */
	SEGMENT_COD(0U,0U,1U,0U,0U,0U,0U,1U), /* * */
	SEGMENT_COD(0U,1U,1U,1U,0U,0U,0U,0U), /* + */
	SEGMENT_COD(0U,0U,0U,1U,0U,0U,0U,0U), /* , */
	SEGMENT_COD(0U,1U,0U,0U,0U,0U,0U,0U), /* - */
	SEGMENT_COD(1U,0U,0U,0U,0U,0U,0U,0U), /* . */
	SEGMENT_COD(0U,1U,0U,1U,0U,0U,1U,0U), /* / */
	SEGMENT_COD(0U,0U,1U,1U,1U,1U,1U,1U), /* 0 */
	SEGMENT_COD(0U,0U,0U,0U,0U,1U,1U,0U), /* 1 */
	SEGMENT_COD(0U,1U,0U,1U,1U,0U,1U,1U), /* 2 */
	SEGMENT_COD(0U,1U,0U,0U,1U,1U,1U,1U), /* 3 */
	SEGMENT_COD(0U,1U,1U,0U,0U,1U,1U,0U), /* 4 */
	SEGMENT_COD(0U,1U,1U,0U,1U,1U,0U,1U), /* 5 */
	SEGMENT_COD(0U,1U,1U,1U,1U,1U,0U,1U), /* 6 */
	SEGMENT_COD(0U,0U,0U,0U,0U,1U,1U,1U), /* 7 */
	SEGMENT_COD(0U,1U,1U,1U,1U,1U,1U,1U), /* 8 */
	SEGMENT_COD(0U,1U,1U,0U,1U,1U,1U,1U), /* 9 */
	SEGMENT_COD(0U,0U,0U,0U,1U,0U,0U,1U), /* : */
	SEGMENT_COD(0U,0U,0U,0U,1U,1U,0U,1U), /* ; */
	SEGMENT_COD(0U,1U,1U,0U,0U,0U,0U,1U), /* < */
	SEGMENT_COD(0U,1U,0U,0U,1U,0U,0U,0U), /* = */
	SEGMENT_COD(0U,1U,0U,0U,0U,0U,1U,1U), /* > */
	SEGMENT_COD(1U,1U,0U,1U,0U,0U,1U,1U), /* ? */
	SEGMENT_COD(0U,1U,0U,1U,1U,1U,1U,1U), /* @ */
	SEGMENT_COD(0U,1U,1U,1U,0U,1U,1U,1U), /* A */
	SEGMENT_COD(0U,1U,1U,1U,1U,1U,0U,0U), /* B */
	SEGMENT_COD(0U,0U,1U,1U,1U,0U,0U,1U), /* C */
	SEGMENT_COD(0U,1U,0U,1U,1U,1U,1U,0U), /* D */
	SEGMENT_COD(0U,1U,1U,1U,1U,0U,0U,1U), /* E */
	SEGMENT_COD(0U,1U,1U,1U,0U,0U,0U,1U), /* F */
	SEGMENT_COD(0U,0U,1U,1U,1U,1U,0U,1U), /* G */
	SEGMENT_COD(0U,1U,1U,1U,0U,1U,1U,0U), /* H */
	SEGMENT_COD(0U,0U,1U,1U,0U,0U,0U,0U), /* I */
	SEGMENT_COD(0U,0U,0U,1U,1U,1U,1U,0U), /* J */
	SEGMENT_COD(0U,1U,1U,1U,0U,1U,0U,1U), /* K */
	SEGMENT_COD(0U,0U,1U,1U,1U,0U,0U,0U), /* L */
	SEGMENT_COD(0U,0U,0U,1U,0U,1U,0U,1U), /* M */
	SEGMENT_COD(0U,0U,1U,1U,0U,1U,1U,1U), /* N */
	SEGMENT_COD(0U,0U,1U,1U,1U,1U,1U,1U), /* O */
	SEGMENT_COD(0U,1U,1U,1U,0U,0U,1U,1U), /* P */
	SEGMENT_COD(0U,1U,1U,0U,1U,0U,1U,1U), /* Q */
	SEGMENT_COD(0U,0U,1U,1U,0U,0U,1U,1U), /* R */
	SEGMENT_COD(0U,1U,1U,0U,1U,1U,0U,1U), /* S */
	SEGMENT_COD(0U,1U,1U,1U,1U,0U,0U,0U), /* T */
	SEGMENT_COD(0U,0U,1U,1U,1U,1U,1U,0U), /* U */
	SEGMENT_COD(0U,0U,1U,1U,1U,1U,1U,0U), /* V */
	SEGMENT_COD(0U,0U,1U,0U,1U,0U,1U,0U), /* W */
	SEGMENT_COD(0U,1U,1U,1U,0U,1U,1U,0U), /* X */
	SEGMENT_COD(0U,1U,1U,0U,1U,1U,1U,0U), /* Y */
	SEGMENT_COD(0U,1U,0U,1U,1U,0U,1U,1U), /* Z */
	SEGMENT_COD(0U,0U,1U,1U,1U,0U,0U,1U), /* [ */
	SEGMENT_COD(0U,1U,1U,0U,0U,1U,0U,0U), /* \ */
	SEGMENT_COD(0U,0U,0U,0U,1U,1U,1U,1U), /* ] */
	SEGMENT_COD(0U,0U,1U,0U,0U,0U,1U,1U), /* ^ */
	SEGMENT_COD(0U,0U,0U,0U,1U,0U,0U,0U), /* _ */
	SEGMENT_COD(0U,0U,0U,0U,0U,0U,1U,0U), /* ` */
	SEGMENT_COD(0U,1U,0U,1U,1U,1U,1U,1U), /* a */
	SEGMENT_COD(0U,1U,1U,1U,1U,1U,0U,0U), /* b */
	SEGMENT_COD(0U,1U,0U,1U,1U,0U,0U,0U), /* c */
	SEGMENT_COD(0U,1U,0U,1U,1U,1U,1U,0U), /* d */
	SEGMENT_COD(0U,1U,1U,1U,1U,0U,1U,1U), /* e */
	SEGMENT_COD(0U,1U,1U,1U,0U,0U,0U,1U), /* f */
	SEGMENT_COD(0U,1U,1U,0U,1U,1U,1U,1U), /* g */
	SEGMENT_COD(0U,1U,1U,1U,0U,1U,0U,0U), /* h */
	SEGMENT_COD(0U,0U,0U,1U,0U,0U,0U,0U), /* i */
	SEGMENT_COD(0U,0U,0U,0U,1U,1U,0U,0U), /* j */
	SEGMENT_COD(0U,1U,1U,1U,0U,1U,0U,1U), /* k */
	SEGMENT_COD(0U,0U,1U,1U,0U,0U,0U,0U), /* l */
	SEGMENT_COD(0U,0U,0U,1U,0U,1U,0U,0U), /* m */
	SEGMENT_COD(0U,1U,0U,1U,0U,1U,0U,0U), /* n */
	SEGMENT_COD(0U,1U,0U,1U,1U,1U,0U,0U), /* o */
	SEGMENT_COD(0U,1U,1U,1U,0U,0U,1U,1U), /* p */
	SEGMENT_COD(0U,1U,1U,0U,0U,1U,1U,1U), /* q */
	SEGMENT_COD(0U,1U,0U,1U,0U,0U,0U,0U), /* r */
	SEGMENT_COD(0U,1U,1U,0U,1U,1U,0U,1U), /* s */
	SEGMENT_COD(0U,1U,1U,1U,1U,0U,0U,0U), /* t */
	SEGMENT_COD(0U,0U,0U,1U,1U,1U,0U,0U), /* u */
	SEGMENT_COD(0U,0U,0U,1U,1U,1U,0U,0U), /* v */
	SEGMENT_COD(0U,0U,0U,1U,0U,1U,0U,0U), /* w */
	SEGMENT_COD(0U,1U,1U,1U,0U,1U,1U,0U), /* x */
	SEGMENT_COD(0U,1U,1U,0U,1U,1U,1U,0U), /* y */
	SEGMENT_COD(0U,1U,0U,1U,1U,0U,1U,1U), /* z */
	SEGMENT_COD(0U,1U,0U,0U,0U,1U,1U,0U), /* { */
	SEGMENT_COD(0U,0U,1U,1U,0U,0U,0U,0U), /* | */
	SEGMENT_COD(0U,1U,1U,1U,0U,0U,0U,0U), /* } */
	SEGMENT_COD(0U,0U,0U,0U,0U,0U,0U,1U), /* ~ */
	SEGMENT_COD(0U,0U,0U,0U,0U,0U,0U,0U) /* (del) */
};

uint8_t Display_anodo(uint8_t literal);
uint8_t Display_catodo(uint8_t literal);

#endif	/* XC_HEADER_TEMPLATE_H */

