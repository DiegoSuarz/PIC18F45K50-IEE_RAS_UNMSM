

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sat Aug 06 20:50:03 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    40                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    41   000000                     
    42                           ; Version 2.35
    43                           ; Generated 05/05/2021 GMT
    44                           ; 
    45                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution. Publication is not required when
    59                           ;        this file is used in an embedded application.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F45K50 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77   000000                     _ADRESL	set	4035
    78   000000                     _ADRESH	set	4036
    79   000000                     _LATDbits	set	3980
    80   000000                     _ANSELAbits	set	3931
    81   000000                     _SLRCON	set	3962
    82   000000                     _LATD	set	3980
    83   000000                     _ADCON0bits	set	4034
    84   000000                     _OSCCONbits	set	4051
    85   000000                     _TRISAbits	set	3986
    86   000000                     _TRISD	set	3989
    87   000000                     _ANSELD	set	3934
    88   000000                     _ADCON2bits	set	4032
    89   000000                     _ADCON1bits	set	4033
    90                           
    91                           	psect	smallconst
    92   000800                     __psmallconst:
    93                           	callstack 0
    94   000800  00                 	db	0
    95   000801                     STR_1:
    96   000801  41                 	db	65	;'A'
    97   000802  44                 	db	68	;'D'
    98   000803  43                 	db	67	;'C'
    99   000804  3A                 	db	58	;':'
   100   000805  20                 	db	32
   101   000806  25                 	db	37
   102   000807  30                 	db	48	;'0'
   103   000808  34                 	db	52	;'4'
   104   000809  64                 	db	100	;'d'
   105   00080A  00                 	db	0
   106   00080B  00                 	db	0	; dummy byte at the end
   107   000000                     
   108                           ; #config settings
   109                           
   110                           	psect	cinit
   111   001734                     __pcinit:
   112                           	callstack 0
   113   001734                     start_initialization:
   114                           	callstack 0
   115   001734                     __initialization:
   116                           	callstack 0
   117                           
   118                           ; Clear objects allocated to BANK0 (54 bytes)
   119   001734  EE00  F060         	lfsr	0,__pbssBANK0
   120   001738  0E36               	movlw	54
   121   00173A                     clear_0:
   122   00173A  6AEE               	clrf	postinc0,c
   123   00173C  06E8               	decf	wreg,f,c
   124   00173E  E1FD               	bnz	clear_0
   125                           
   126                           ; Clear objects allocated to COMRAM (1 bytes)
   127   001740  6A5E               	clrf	__pbssCOMRAM& (0+255),c
   128   001742                     end_of_initialization:
   129                           	callstack 0
   130   001742                     __end_of__initialization:
   131                           	callstack 0
   132   001742  0E00               	movlw	low (__Lmediumconst shr (0+16))
   133   001744  6EF8               	movwf	tblptru,c
   134   001746  0100               	movlb	0
   135   001748  EF84  F009         	goto	_main	;jump to C main() function
   136                           
   137                           	psect	bssCOMRAM
   138   00005E                     __pbssCOMRAM:
   139                           	callstack 0
   140   00005E                     _flags:
   141                           	callstack 0
   142   00005E                     	ds	1
   143                           
   144                           	psect	bssBANK0
   145   000060                     __pbssBANK0:
   146                           	callstack 0
   147   000060                     _width:
   148                           	callstack 0
   149   000060                     	ds	2
   150   000062                     _prec:
   151                           	callstack 0
   152   000062                     	ds	2
   153   000064                     _dato1:
   154                           	callstack 0
   155   000064                     	ds	2
   156   000066                     _dbuf:
   157                           	callstack 0
   158   000066                     	ds	32
   159   000086                     _str_buffeLcd:
   160                           	callstack 0
   161   000086                     	ds	16
   162                           
   163                           	psect	cstackBANK0
   164   000096                     __pcstackBANK0:
   165                           	callstack 0
   166   000096                     ?_sprintf:
   167                           	callstack 0
   168   000096                     sprintf@s:
   169                           	callstack 0
   170                           
   171                           ; 2 bytes @ 0x0
   172   000096                     	ds	2
   173   000098                     sprintf@fmt:
   174                           	callstack 0
   175                           
   176                           ; 2 bytes @ 0x2
   177   000098                     	ds	4
   178   00009C                     sprintf@ap:
   179                           	callstack 0
   180                           
   181                           ; 2 bytes @ 0x6
   182   00009C                     	ds	2
   183   00009E                     sprintf@f:
   184                           	callstack 0
   185                           
   186                           ; 11 bytes @ 0x8
   187   00009E                     	ds	11
   188                           
   189                           	psect	cstackCOMRAM
   190   000001                     __pcstackCOMRAM:
   191                           	callstack 0
   192   000001                     ?_isdigit:
   193                           	callstack 0
   194   000001                     ?_isspace:
   195                           	callstack 0
   196   000001                     ?___wmul:
   197                           	callstack 0
   198   000001                     ?___aodiv:
   199                           	callstack 0
   200   000001                     ?___aomod:
   201                           	callstack 0
   202   000001                     Lcd_Port@a:
   203                           	callstack 0
   204   000001                     ___wmul@multiplier:
   205                           	callstack 0
   206   000001                     isdigit@c:
   207                           	callstack 0
   208   000001                     isspace@c:
   209                           	callstack 0
   210   000001                     fputc@c:
   211                           	callstack 0
   212   000001                     ___aodiv@dividend:
   213                           	callstack 0
   214   000001                     ___aomod@dividend:
   215                           	callstack 0
   216                           
   217                           ; 8 bytes @ 0x0
   218   000001                     	ds	1
   219   000002                     ??_Lcd_Cmd:
   220   000002                     Lcd_Write_Char@temp:
   221                           	callstack 0
   222                           
   223                           ; 1 bytes @ 0x1
   224   000002                     	ds	1
   225   000003                     ??_isdigit:
   226   000003                     ??_isspace:
   227   000003                     Lcd_Cmd@a:
   228                           	callstack 0
   229   000003                     Lcd_Write_Char@y:
   230                           	callstack 0
   231   000003                     ___wmul@multiplicand:
   232                           	callstack 0
   233   000003                     fputc@fp:
   234                           	callstack 0
   235                           
   236                           ; 2 bytes @ 0x2
   237   000003                     	ds	1
   238   000004                     ??_Lcd_Init:
   239   000004                     Lcd_Set_Cursor@b:
   240                           	callstack 0
   241   000004                     Lcd_Write_Char@a:
   242                           	callstack 0
   243                           
   244                           ; 1 bytes @ 0x3
   245   000004                     	ds	1
   246   000005                     ??_fputc:
   247   000005                     Lcd_Set_Cursor@a:
   248                           	callstack 0
   249   000005                     _isspace$975:
   250                           	callstack 0
   251   000005                     Lcd_Write_String@a:
   252                           	callstack 0
   253   000005                     ___wmul@product:
   254                           	callstack 0
   255                           
   256                           ; 2 bytes @ 0x4
   257   000005                     	ds	1
   258   000006                     Lcd_Set_Cursor@z:
   259                           	callstack 0
   260                           
   261                           ; 1 bytes @ 0x5
   262   000006                     	ds	1
   263   000007                     ?_atoi:
   264                           	callstack 0
   265   000007                     Lcd_Set_Cursor@y:
   266                           	callstack 0
   267   000007                     Lcd_Write_String@i:
   268                           	callstack 0
   269   000007                     atoi@s:
   270                           	callstack 0
   271                           
   272                           ; 2 bytes @ 0x6
   273   000007                     	ds	1
   274   000008                     Lcd_Set_Cursor@temp:
   275                           	callstack 0
   276                           
   277                           ; 1 bytes @ 0x7
   278   000008                     	ds	1
   279   000009                     ??_atoi:
   280   000009                     ___aodiv@divisor:
   281                           	callstack 0
   282   000009                     ___aomod@divisor:
   283                           	callstack 0
   284                           
   285                           ; 8 bytes @ 0x8
   286   000009                     	ds	1
   287   00000A                     fputs@s:
   288                           	callstack 0
   289                           
   290                           ; 2 bytes @ 0x9
   291   00000A                     	ds	2
   292   00000C                     atoi@neg:
   293                           	callstack 0
   294   00000C                     fputs@fp:
   295                           	callstack 0
   296                           
   297                           ; 2 bytes @ 0xB
   298   00000C                     	ds	2
   299   00000E                     fputs@c:
   300                           	callstack 0
   301   00000E                     atoi@n:
   302                           	callstack 0
   303                           
   304                           ; 2 bytes @ 0xD
   305   00000E                     	ds	1
   306   00000F                     fputs@i:
   307                           	callstack 0
   308                           
   309                           ; 2 bytes @ 0xE
   310   00000F                     	ds	2
   311   000011                     ___aodiv@counter:
   312                           	callstack 0
   313   000011                     ___aomod@counter:
   314                           	callstack 0
   315   000011                     pad@fp:
   316                           	callstack 0
   317                           
   318                           ; 2 bytes @ 0x10
   319   000011                     	ds	1
   320   000012                     ___aodiv@sign:
   321                           	callstack 0
   322   000012                     ___aomod@sign:
   323                           	callstack 0
   324                           
   325                           ; 1 bytes @ 0x11
   326   000012                     	ds	1
   327   000013                     ?_abs:
   328                           	callstack 0
   329   000013                     pad@buf:
   330                           	callstack 0
   331   000013                     abs@a:
   332                           	callstack 0
   333   000013                     ___aodiv@quotient:
   334                           	callstack 0
   335                           
   336                           ; 8 bytes @ 0x12
   337   000013                     	ds	2
   338   000015                     ??_abs:
   339   000015                     pad@p:
   340                           	callstack 0
   341                           
   342                           ; 2 bytes @ 0x14
   343   000015                     	ds	2
   344   000017                     ??_pad:
   345                           
   346                           ; 1 bytes @ 0x16
   347   000017                     	ds	1
   348   000018                     pad@i:
   349                           	callstack 0
   350                           
   351                           ; 2 bytes @ 0x17
   352   000018                     	ds	2
   353   00001A                     pad@w:
   354                           	callstack 0
   355                           
   356                           ; 2 bytes @ 0x19
   357   00001A                     	ds	2
   358   00001C                     dtoa@fp:
   359                           	callstack 0
   360                           
   361                           ; 2 bytes @ 0x1B
   362   00001C                     	ds	2
   363   00001E                     dtoa@d:
   364                           	callstack 0
   365                           
   366                           ; 8 bytes @ 0x1D
   367   00001E                     	ds	8
   368   000026                     ??_dtoa:
   369                           
   370                           ; 1 bytes @ 0x25
   371   000026                     	ds	8
   372   00002E                     _dtoa$926:
   373                           	callstack 0
   374                           
   375                           ; 2 bytes @ 0x2D
   376   00002E                     	ds	2
   377   000030                     dtoa@p:
   378                           	callstack 0
   379                           
   380                           ; 2 bytes @ 0x2F
   381   000030                     	ds	2
   382   000032                     dtoa@w:
   383                           	callstack 0
   384                           
   385                           ; 2 bytes @ 0x31
   386   000032                     	ds	2
   387   000034                     dtoa@n:
   388                           	callstack 0
   389                           
   390                           ; 8 bytes @ 0x33
   391   000034                     	ds	8
   392   00003C                     dtoa@i:
   393                           	callstack 0
   394                           
   395                           ; 2 bytes @ 0x3B
   396   00003C                     	ds	2
   397   00003E                     dtoa@s:
   398                           	callstack 0
   399                           
   400                           ; 1 bytes @ 0x3D
   401   00003E                     	ds	1
   402   00003F                     vfpfcnvrt@fp:
   403                           	callstack 0
   404                           
   405                           ; 2 bytes @ 0x3E
   406   00003F                     	ds	2
   407   000041                     vfpfcnvrt@fmt:
   408                           	callstack 0
   409                           
   410                           ; 2 bytes @ 0x40
   411   000041                     	ds	2
   412   000043                     vfpfcnvrt@ap:
   413                           	callstack 0
   414                           
   415                           ; 2 bytes @ 0x42
   416   000043                     	ds	2
   417   000045                     ??_vfpfcnvrt:
   418                           
   419                           ; 1 bytes @ 0x44
   420   000045                     	ds	3
   421   000048                     vfpfcnvrt@convarg:
   422                           	callstack 0
   423                           
   424                           ; 8 bytes @ 0x47
   425   000048                     	ds	8
   426   000050                     vfpfcnvrt@done:
   427                           	callstack 0
   428                           
   429                           ; 2 bytes @ 0x4F
   430   000050                     	ds	2
   431   000052                     vfpfcnvrt@cp:
   432                           	callstack 0
   433                           
   434                           ; 2 bytes @ 0x51
   435   000052                     	ds	2
   436   000054                     ?_vfprintf:
   437                           	callstack 0
   438   000054                     vfprintf@fp:
   439                           	callstack 0
   440                           
   441                           ; 2 bytes @ 0x53
   442   000054                     	ds	2
   443   000056                     vfprintf@fmt:
   444                           	callstack 0
   445                           
   446                           ; 2 bytes @ 0x55
   447   000056                     	ds	2
   448   000058                     vfprintf@ap:
   449                           	callstack 0
   450                           
   451                           ; 2 bytes @ 0x57
   452   000058                     	ds	2
   453   00005A                     vfprintf@cfmt:
   454                           	callstack 0
   455                           
   456                           ; 2 bytes @ 0x59
   457   00005A                     	ds	2
   458   00005C                     ??_main:
   459                           
   460                           ; 1 bytes @ 0x5B
   461   00005C                     	ds	2
   462                           
   463 ;;
   464 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   465 ;;
   466 ;; *************** function _main *****************
   467 ;; Defined at:
   468 ;;		line 24 in file "main.c"
   469 ;; Parameters:    Size  Location     Type
   470 ;;		None
   471 ;; Auto vars:     Size  Location     Type
   472 ;;		None
   473 ;; Return value:  Size  Location     Type
   474 ;;                  1    wreg      void 
   475 ;; Registers used:
   476 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   477 ;; Tracked objects:
   478 ;;		On entry : 0/0
   479 ;;		On exit  : 0/0
   480 ;;		Unchanged: 0/0
   481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   482 ;;      Params:         0       0       0       0       0       0       0       0       0
   483 ;;      Locals:         0       0       0       0       0       0       0       0       0
   484 ;;      Temps:          2       0       0       0       0       0       0       0       0
   485 ;;      Totals:         2       0       0       0       0       0       0       0       0
   486 ;;Total ram usage:        2 bytes
   487 ;; Hardware stack levels required when called: 8
   488 ;; This function calls:
   489 ;;		_Config_ADC
   490 ;;		_Config_Clock
   491 ;;		_Config_Port
   492 ;;		_Lcd_Clear
   493 ;;		_Lcd_Init
   494 ;;		_Lcd_Set_Cursor
   495 ;;		_Lcd_Write_String
   496 ;;		_sprintf
   497 ;; This function is called by:
   498 ;;		Startup code after reset
   499 ;; This function uses a non-reentrant model
   500 ;;
   501                           
   502                           	psect	text0
   503   001308                     __ptext0:
   504                           	callstack 0
   505   001308                     _main:
   506                           	callstack 23
   507   001308                     
   508                           ;main.c: 25:     Config_Clock();
   509   001308  ECB9  F00B         	call	_Config_Clock	;wreg free
   510                           
   511                           ;main.c: 26:     Config_Port();
   512   00130C  ECA6  F00B         	call	_Config_Port	;wreg free
   513                           
   514                           ;main.c: 27:     Lcd_Init();
   515   001310  ECC6  F009         	call	_Lcd_Init	;wreg free
   516                           
   517                           ;main.c: 28:     Lcd_Clear();
   518   001314  ECB2  F00B         	call	_Lcd_Clear	;wreg free
   519                           
   520                           ;main.c: 29:     Config_ADC();
   521   001318  EC8B  F00B         	call	_Config_ADC	;wreg free
   522   00131C                     l1883:
   523                           
   524                           ;main.c: 31:         ADCON0bits.CHS =0b00000;
   525   00131C  0E83               	movlw	-125
   526   00131E  16C2               	andwf	194,f,c	;volatile
   527   001320                     
   528                           ;main.c: 32:         ADCON0bits.GO_DONE=1;
   529   001320  82C2               	bsf	194,1,c	;volatile
   530   001322                     l52:
   531   001322  B2C2               	btfsc	194,1,c	;volatile
   532   001324  EF96  F009         	goto	u1201
   533   001328  EF98  F009         	goto	u1200
   534   00132C                     u1201:
   535   00132C  EF91  F009         	goto	l52
   536   001330                     u1200:
   537   001330                     
   538                           ;main.c: 34:         dato1=(ADRESH<<8)+(ADRESL);
   539   001330  50C4               	movf	196,w,c	;volatile
   540   001332  6E5D               	movwf	(??_main+1)^0,c
   541   001334  6A5C               	clrf	??_main^0,c
   542   001336  50C3               	movf	195,w,c	;volatile
   543   001338  245C               	addwf	??_main^0,w,c
   544   00133A  0100               	movlb	0	; () banked
   545   00133C  6F64               	movwf	_dato1& (0+255),b
   546   00133E  0E00               	movlw	0
   547   001340  205D               	addwfc	(??_main+1)^0,w,c
   548   001342  6F65               	movwf	(_dato1+1)& (0+255),b
   549   001344                     
   550                           ; BSR set to: 0
   551                           ;main.c: 35:         sprintf(str_buffeLcd,"ADC: %04d",dato1);
   552   001344  0E86               	movlw	low _str_buffeLcd
   553   001346  6F96               	movwf	sprintf@s& (0+255),b
   554   001348  0E00               	movlw	high _str_buffeLcd
   555   00134A  6F97               	movwf	(sprintf@s+1)& (0+255),b
   556   00134C  0E01               	movlw	low STR_1
   557   00134E  6F98               	movwf	sprintf@fmt& (0+255),b
   558   001350  0E08               	movlw	high STR_1
   559   001352  6F99               	movwf	(sprintf@fmt+1)& (0+255),b
   560   001354  C064  F09A         	movff	_dato1,?_sprintf+4
   561   001358  C065  F09B         	movff	_dato1+1,?_sprintf+5
   562   00135C  EC61  F00A         	call	_sprintf	;wreg free
   563   001360                     
   564                           ;main.c: 36:         Lcd_Set_Cursor(1,1);
   565   001360  0E01               	movlw	1
   566   001362  6E04               	movwf	Lcd_Set_Cursor@b^0,c
   567   001364  0E01               	movlw	1
   568   001366  EC00  F00A         	call	_Lcd_Set_Cursor
   569   00136A                     
   570                           ;main.c: 37:         Lcd_Write_String(str_buffeLcd);
   571   00136A  0E86               	movlw	low _str_buffeLcd
   572   00136C  6E05               	movwf	Lcd_Write_String@a^0,c
   573   00136E  0E00               	movlw	high _str_buffeLcd
   574   001370  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
   575   001372  EC16  F00B         	call	_Lcd_Write_String	;wreg free
   576   001376                     
   577                           ;main.c: 38:         _delay((unsigned long)((10)*(16000000UL/4000.0)));
   578   001376  0E34               	movlw	52
   579   001378  6E5C               	movwf	??_main^0,c
   580   00137A  0EF2               	movlw	242
   581   00137C                     u1217:
   582   00137C  2EE8               	decfsz	wreg,f,c
   583   00137E  D7FE               	bra	u1217
   584   001380  2E5C               	decfsz	??_main^0,f,c
   585   001382  D7FC               	bra	u1217
   586   001384  EF8E  F009         	goto	l1883
   587   001388  EF00  F000         	goto	start
   588   00138C                     __end_of_main:
   589                           	callstack 0
   590                           
   591 ;; *************** function _sprintf *****************
   592 ;; Defined at:
   593 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
   594 ;; Parameters:    Size  Location     Type
   595 ;;  s               2    0[BANK0 ] PTR unsigned char 
   596 ;;		 -> str_buffeLcd(16), 
   597 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
   598 ;;		 -> STR_1(10), 
   599 ;; Auto vars:     Size  Location     Type
   600 ;;  f              11    8[BANK0 ] struct _IO_FILE
   601 ;;  ap              2    6[BANK0 ] PTR void [1]
   602 ;;		 -> ?_sprintf(2), 
   603 ;;  ret             2    0        int 
   604 ;; Return value:  Size  Location     Type
   605 ;;                  2    0[BANK0 ] int 
   606 ;; Registers used:
   607 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   608 ;; Tracked objects:
   609 ;;		On entry : 0/0
   610 ;;		On exit  : 0/0
   611 ;;		Unchanged: 0/0
   612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   613 ;;      Params:         0       6       0       0       0       0       0       0       0
   614 ;;      Locals:         0      13       0       0       0       0       0       0       0
   615 ;;      Temps:          0       0       0       0       0       0       0       0       0
   616 ;;      Totals:         0      19       0       0       0       0       0       0       0
   617 ;;Total ram usage:       19 bytes
   618 ;; Hardware stack levels used: 1
   619 ;; Hardware stack levels required when called: 7
   620 ;; This function calls:
   621 ;;		_vfprintf
   622 ;; This function is called by:
   623 ;;		_main
   624 ;; This function uses a non-reentrant model
   625 ;;
   626                           
   627                           	psect	text1
   628   0014C2                     __ptext1:
   629                           	callstack 0
   630   0014C2                     _sprintf:
   631                           	callstack 23
   632   0014C2  0E9A               	movlw	low (?_sprintf+4)
   633   0014C4  0100               	movlb	0	; () banked
   634   0014C6  6F9C               	movwf	sprintf@ap& (0+255),b
   635   0014C8  0E00               	movlw	high (?_sprintf+4)
   636   0014CA  6F9D               	movwf	(sprintf@ap+1)& (0+255),b
   637   0014CC  C096  F09E         	movff	sprintf@s,sprintf@f
   638   0014D0  C097  F09F         	movff	sprintf@s+1,sprintf@f+1
   639   0014D4                     
   640                           ; BSR set to: 0
   641   0014D4  0E00               	movlw	0
   642   0014D6  6FA2               	movwf	(sprintf@f+4)& (0+255),b
   643   0014D8  0E00               	movlw	0
   644   0014DA  6FA1               	movwf	(sprintf@f+3)& (0+255),b
   645   0014DC                     
   646                           ; BSR set to: 0
   647   0014DC  0E00               	movlw	0
   648   0014DE  6FA8               	movwf	(sprintf@f+10)& (0+255),b
   649   0014E0  0E00               	movlw	0
   650   0014E2  6FA7               	movwf	(sprintf@f+9)& (0+255),b
   651   0014E4                     
   652                           ; BSR set to: 0
   653   0014E4  0E9E               	movlw	low sprintf@f
   654   0014E6  6E54               	movwf	vfprintf@fp^0,c
   655   0014E8  0E00               	movlw	high sprintf@f
   656   0014EA  6E55               	movwf	(vfprintf@fp+1)^0,c
   657   0014EC  C098  F056         	movff	sprintf@fmt,vfprintf@fmt
   658   0014F0  C099  F057         	movff	sprintf@fmt+1,vfprintf@fmt+1
   659   0014F4  0E9C               	movlw	low sprintf@ap
   660   0014F6  6E58               	movwf	vfprintf@ap^0,c
   661   0014F8  0E00               	movlw	high sprintf@ap
   662   0014FA  6E59               	movwf	(vfprintf@ap+1)^0,c
   663   0014FC  EC8A  F00A         	call	_vfprintf	;wreg free
   664   001500  0100               	movlb	0	; () banked
   665   001502  51A1               	movf	(sprintf@f+3)& (0+255),w,b
   666   001504  2596               	addwf	sprintf@s& (0+255),w,b
   667   001506  6ED9               	movwf	fsr2l,c
   668   001508  51A2               	movf	(sprintf@f+4)& (0+255),w,b
   669   00150A  2197               	addwfc	(sprintf@s+1)& (0+255),w,b
   670   00150C  6EDA               	movwf	fsr2h,c
   671   00150E  0E00               	movlw	0
   672   001510  6EDF               	movwf	indf2,c
   673   001512                     
   674                           ; BSR set to: 0
   675   001512  0012               	return		;funcret
   676   001514                     __end_of_sprintf:
   677                           	callstack 0
   678                           
   679 ;; *************** function _vfprintf *****************
   680 ;; Defined at:
   681 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
   682 ;; Parameters:    Size  Location     Type
   683 ;;  fp              2   83[COMRAM] PTR struct _IO_FILE
   684 ;;		 -> sprintf@f(11), 
   685 ;;  fmt             2   85[COMRAM] PTR const unsigned char 
   686 ;;		 -> STR_1(10), 
   687 ;;  ap              2   87[COMRAM] PTR PTR void 
   688 ;;		 -> sprintf@ap(2), 
   689 ;; Auto vars:     Size  Location     Type
   690 ;;  cfmt            2   89[COMRAM] PTR unsigned char 
   691 ;;		 -> STR_1(10), 
   692 ;; Return value:  Size  Location     Type
   693 ;;                  2   83[COMRAM] int 
   694 ;; Registers used:
   695 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   696 ;; Tracked objects:
   697 ;;		On entry : 0/0
   698 ;;		On exit  : 0/0
   699 ;;		Unchanged: 0/0
   700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   701 ;;      Params:         6       0       0       0       0       0       0       0       0
   702 ;;      Locals:         2       0       0       0       0       0       0       0       0
   703 ;;      Temps:          0       0       0       0       0       0       0       0       0
   704 ;;      Totals:         8       0       0       0       0       0       0       0       0
   705 ;;Total ram usage:        8 bytes
   706 ;; Hardware stack levels used: 1
   707 ;; Hardware stack levels required when called: 6
   708 ;; This function calls:
   709 ;;		_vfpfcnvrt
   710 ;; This function is called by:
   711 ;;		_sprintf
   712 ;; This function uses a non-reentrant model
   713 ;;
   714                           
   715                           	psect	text2
   716   001514                     __ptext2:
   717                           	callstack 0
   718   001514                     _vfprintf:
   719                           	callstack 23
   720   001514                     
   721                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
   722   001514  C056  F05A         	movff	vfprintf@fmt,vfprintf@cfmt
   723   001518  C057  F05B         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   724                           
   725                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
   726   00151C  EF9E  F00A         	goto	l1795
   727   001520                     l1793:
   728                           
   729                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
   730   001520  C054  F03F         	movff	vfprintf@fp,vfpfcnvrt@fp
   731   001524  C055  F040         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   732   001528  0E5A               	movlw	low vfprintf@cfmt
   733   00152A  6E41               	movwf	vfpfcnvrt@fmt^0,c
   734   00152C  0E00               	movlw	high vfprintf@cfmt
   735   00152E  6E42               	movwf	(vfpfcnvrt@fmt+1)^0,c
   736   001530  C058  F043         	movff	vfprintf@ap,vfpfcnvrt@ap
   737   001534  C059  F044         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   738   001538  EC60  F005         	call	_vfpfcnvrt	;wreg free
   739   00153C                     l1795:
   740                           
   741                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
   742   00153C  C05A  FFF6         	movff	vfprintf@cfmt,tblptrl
   743   001540  C05B  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   744   001544                     	if	0	;tblptru may be non-zero
   745   001544                     	endif
   746   001544                     	if	0	;tblptru may be non-zero
   747   001544                     	endif
   748   001544  0008               	tblrd		*
   749   001546  50F5               	movf	tablat,w,c
   750   001548  0900               	iorlw	0
   751   00154A  A4D8               	btfss	status,2,c
   752   00154C  EFAA  F00A         	goto	u1161
   753   001550  EFAC  F00A         	goto	u1160
   754   001554                     u1161:
   755   001554  EF90  F00A         	goto	l1793
   756   001558                     u1160:
   757   001558                     
   758                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
   759   001558  0E00               	movlw	0
   760   00155A  6E55               	movwf	(?_vfprintf+1)^0,c
   761   00155C  0E00               	movlw	0
   762   00155E  6E54               	movwf	?_vfprintf^0,c
   763   001560  0012               	return		;funcret
   764   001562                     __end_of_vfprintf:
   765                           	callstack 0
   766                           
   767 ;; *************** function _vfpfcnvrt *****************
   768 ;; Defined at:
   769 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
   770 ;; Parameters:    Size  Location     Type
   771 ;;  fp              2   62[COMRAM] PTR struct _IO_FILE
   772 ;;		 -> sprintf@f(11), 
   773 ;;  fmt             2   64[COMRAM] PTR PTR unsigned char 
   774 ;;		 -> vfprintf@cfmt(2), 
   775 ;;  ap              2   66[COMRAM] PTR PTR void 
   776 ;;		 -> sprintf@ap(2), 
   777 ;; Auto vars:     Size  Location     Type
   778 ;;  convarg         8   71[COMRAM] struct .
   779 ;;  cp              2   81[COMRAM] PTR unsigned char 
   780 ;;		 -> STR_1(10), 
   781 ;;  done            2   79[COMRAM] int 
   782 ;;  i               2    0        int 
   783 ;;  c               1    0        unsigned char 
   784 ;; Return value:  Size  Location     Type
   785 ;;                  1    wreg      void 
   786 ;; Registers used:
   787 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   788 ;; Tracked objects:
   789 ;;		On entry : 0/0
   790 ;;		On exit  : 0/0
   791 ;;		Unchanged: 0/0
   792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   793 ;;      Params:         6       0       0       0       0       0       0       0       0
   794 ;;      Locals:        12       0       0       0       0       0       0       0       0
   795 ;;      Temps:          3       0       0       0       0       0       0       0       0
   796 ;;      Totals:        21       0       0       0       0       0       0       0       0
   797 ;;Total ram usage:       21 bytes
   798 ;; Hardware stack levels used: 1
   799 ;; Hardware stack levels required when called: 5
   800 ;; This function calls:
   801 ;;		_atoi
   802 ;;		_dtoa
   803 ;;		_fputc
   804 ;;		_isdigit
   805 ;; This function is called by:
   806 ;;		_vfprintf
   807 ;; This function uses a non-reentrant model
   808 ;;
   809                           
   810                           	psect	text3
   811   000AC0                     __ptext3:
   812                           	callstack 0
   813   000AC0                     _vfpfcnvrt:
   814                           	callstack 23
   815   000AC0                     
   816                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
   817   000AC0  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   818   000AC4  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   819   000AC8  CFDE FFF6          	movff	postinc2,tblptrl
   820   000ACC  CFDD FFF7          	movff	postdec2,tblptrh
   821   000AD0                     	if	0	;tblptru may be non-zero
   822   000AD0                     	endif
   823   000AD0                     	if	0	;tblptru may be non-zero
   824   000AD0                     	endif
   825   000AD0  0008               	tblrd		*
   826   000AD2  50F5               	movf	tablat,w,c
   827   000AD4  0A25               	xorlw	37
   828   000AD6  A4D8               	btfss	status,2,c
   829   000AD8  EF70  F005         	goto	u1091
   830   000ADC  EF72  F005         	goto	u1090
   831   000AE0                     u1091:
   832   000AE0  EF9A  F006         	goto	l1751
   833   000AE4                     u1090:
   834   000AE4                     
   835                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
   836   000AE4  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   837   000AE8  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   838   000AEC  2ADE               	incf	postinc2,f,c
   839   000AEE  0E00               	movlw	0
   840   000AF0  22DD               	addwfc	postdec2,f,c
   841   000AF2                     
   842                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
   843   000AF2  0E00               	movlw	0
   844   000AF4  0100               	movlb	0	; () banked
   845   000AF6  6F61               	movwf	(_width+1)& (0+255),b
   846   000AF8  0E00               	movlw	0
   847   000AFA  6F60               	movwf	_width& (0+255),b
   848   000AFC  C060  F05E         	movff	_width,_flags
   849   000B00                     
   850                           ; BSR set to: 0
   851                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
   852   000B00  6962               	setf	_prec& (0+255),b
   853   000B02  6963               	setf	(_prec+1)& (0+255),b
   854   000B04                     
   855                           ; BSR set to: 0
   856                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1027:         don
      +                          e = 0;
   857   000B04  0E00               	movlw	0
   858   000B06  6E51               	movwf	(vfpfcnvrt@done+1)^0,c
   859   000B08  0E00               	movlw	0
   860   000B0A  6E50               	movwf	vfpfcnvrt@done^0,c
   861                           
   862                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1028:         whi
      +                          le (!done) {
   863   000B0C  EFB2  F005         	goto	l1717
   864   000B10                     l1707:
   865                           
   866                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1038:            
      +                                   flags |= (1 << 1);
   867   000B10  825E               	bsf	_flags^0,1,c
   868   000B12                     
   869                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1039:            
      +                                   ++*fmt;
   870   000B12  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   871   000B16  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   872   000B1A  2ADE               	incf	postinc2,f,c
   873   000B1C  0E00               	movlw	0
   874   000B1E  22DD               	addwfc	postdec2,f,c
   875                           
   876                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1040:            
      +                                   break;
   877   000B20  EFB2  F005         	goto	l1717
   878   000B24                     l1711:
   879                           
   880                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1061:            
      +                                   done = 1;
   881   000B24  0E00               	movlw	0
   882   000B26  6E51               	movwf	(vfpfcnvrt@done+1)^0,c
   883   000B28  0E01               	movlw	1
   884   000B2A  6E50               	movwf	vfpfcnvrt@done^0,c
   885                           
   886                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1062:            
      +                                   break;
   887   000B2C  EFB2  F005         	goto	l1717
   888   000B30                     l1715:
   889   000B30  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   890   000B34  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   891   000B38  CFDE FFF6          	movff	postinc2,tblptrl
   892   000B3C  CFDD FFF7          	movff	postdec2,tblptrh
   893   000B40                     	if	0	;tblptru may be non-zero
   894   000B40                     	endif
   895   000B40                     	if	0	;tblptru may be non-zero
   896   000B40                     	endif
   897   000B40  0008               	tblrd		*
   898   000B42  50F5               	movf	tablat,w,c
   899   000B44  6E45               	movwf	??_vfpfcnvrt^0,c
   900   000B46  6A46               	clrf	(??_vfpfcnvrt+1)^0,c
   901                           
   902                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   903                           ; Switch size 1, requested type "simple"
   904                           ; Number of cases is 1, Range of values is 0 to 0
   905                           ; switch strategies available:
   906                           ; Name         Instructions Cycles
   907                           ; simple_byte            4     3 (average)
   908                           ;	Chosen strategy is simple_byte
   909   000B48  5046               	movf	(??_vfpfcnvrt+1)^0,w,c
   910   000B4A  0A00               	xorlw	0	; case 0
   911   000B4C  B4D8               	btfsc	status,2,c
   912   000B4E  EFAB  F005         	goto	l1941
   913   000B52  EF92  F005         	goto	l1711
   914   000B56                     l1941:
   915                           
   916                           ; Switch size 1, requested type "simple"
   917                           ; Number of cases is 1, Range of values is 48 to 48
   918                           ; switch strategies available:
   919                           ; Name         Instructions Cycles
   920                           ; simple_byte            4     3 (average)
   921                           ;	Chosen strategy is simple_byte
   922   000B56  5045               	movf	??_vfpfcnvrt^0,w,c
   923   000B58  0A30               	xorlw	48	; case 48
   924   000B5A  B4D8               	btfsc	status,2,c
   925   000B5C  EF88  F005         	goto	l1707
   926   000B60  EF92  F005         	goto	l1711
   927   000B64                     l1717:
   928                           
   929                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1028:         whi
      +                          le (!done) {
   930   000B64  5050               	movf	vfpfcnvrt@done^0,w,c
   931   000B66  1051               	iorwf	(vfpfcnvrt@done+1)^0,w,c
   932   000B68  B4D8               	btfsc	status,2,c
   933   000B6A  EFB9  F005         	goto	u1101
   934   000B6E  EFBB  F005         	goto	u1100
   935   000B72                     u1101:
   936   000B72  EF98  F005         	goto	l1715
   937   000B76                     u1100:
   938   000B76                     
   939                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1074:         if 
      +                          ((*fmt)[0] == '*') {
   940   000B76  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   941   000B7A  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   942   000B7E  CFDE FFF6          	movff	postinc2,tblptrl
   943   000B82  CFDD FFF7          	movff	postdec2,tblptrh
   944   000B86                     	if	0	;tblptru may be non-zero
   945   000B86                     	endif
   946   000B86                     	if	0	;tblptru may be non-zero
   947   000B86                     	endif
   948   000B86  0008               	tblrd		*
   949   000B88  50F5               	movf	tablat,w,c
   950   000B8A  0A2A               	xorlw	42
   951   000B8C  A4D8               	btfss	status,2,c
   952   000B8E  EFCB  F005         	goto	u1111
   953   000B92  EFCD  F005         	goto	u1110
   954   000B96                     u1111:
   955   000B96  EFF7  F005         	goto	l1727
   956   000B9A                     u1110:
   957   000B9A                     
   958                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1075:            
      +                           ++*fmt;
   959   000B9A  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   960   000B9E  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   961   000BA2  2ADE               	incf	postinc2,f,c
   962   000BA4  0E00               	movlw	0
   963   000BA6  22DD               	addwfc	postdec2,f,c
   964                           
   965                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1076:            
      +                           width = (*(int *)__va_arg(*(int **)ap, (int)0));
   966   000BA8  C043  FFD9         	movff	vfpfcnvrt@ap,fsr2l
   967   000BAC  C044  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
   968   000BB0  CFDF F045          	movff	indf2,??_vfpfcnvrt
   969   000BB4  0E02               	movlw	2
   970   000BB6  26DE               	addwf	postinc2,f,c
   971   000BB8  CFDF F046          	movff	indf2,??_vfpfcnvrt+1
   972   000BBC  0E00               	movlw	0
   973   000BBE  22DD               	addwfc	postdec2,f,c
   974   000BC0  C045  FFD9         	movff	??_vfpfcnvrt,fsr2l
   975   000BC4  C046  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
   976   000BC8  CFDE F060          	movff	postinc2,_width
   977   000BCC  CFDD F061          	movff	postdec2,_width+1
   978   000BD0                     
   979                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1077:            
      +                           if (width < 0) {
   980   000BD0  0100               	movlb	0	; () banked
   981   000BD2  BF61               	btfsc	(_width+1)& (0+255),7,b
   982   000BD4  EFF0  F005         	goto	u1120
   983   000BD8  EFEE  F005         	goto	u1121
   984   000BDC                     u1121:
   985   000BDC  EF2A  F006         	goto	l1735
   986   000BE0                     u1120:
   987   000BE0                     
   988                           ; BSR set to: 0
   989                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1078:            
      +                               flags |= (1 << 0);
   990   000BE0  805E               	bsf	_flags^0,0,c
   991                           
   992                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1079:            
      +                               width = -width;
   993   000BE2  6D60               	negf	_width& (0+255),b
   994   000BE4  1F61               	comf	(_width+1)& (0+255),f,b
   995   000BE6  B0D8               	btfsc	status,0,c
   996   000BE8  2B61               	incf	(_width+1)& (0+255),f,b
   997   000BEA  EF2A  F006         	goto	l1735
   998   000BEE                     l1727:
   999                           
  1000                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1082:            
      +                           width = atoi(*fmt);
  1001   000BEE  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1002   000BF2  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1003   000BF6  CFDE F007          	movff	postinc2,atoi@s
  1004   000BFA  CFDD F008          	movff	postdec2,atoi@s+1
  1005   000BFE  EC25  F008         	call	_atoi	;wreg free
  1006   000C02  C007  F060         	movff	?_atoi,_width
  1007   000C06  C008  F061         	movff	?_atoi+1,_width+1
  1008                           
  1009                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1083:            
      +                           while ((0 && isdigit((*fmt)[0]), ((unsigned)((*fmt)[0])-'0') < 10)) {
  1010   000C0A  EF0E  F006         	goto	l1733
  1011   000C0E                     l1729:
  1012                           
  1013                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1084:            
      +                               ++*fmt;
  1014   000C0E  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1015   000C12  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1016   000C16  2ADE               	incf	postinc2,f,c
  1017   000C18  0E00               	movlw	0
  1018   000C1A  22DD               	addwfc	postdec2,f,c
  1019   000C1C                     l1733:
  1020   000C1C  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1021   000C20  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1022   000C24  CFDE FFF6          	movff	postinc2,tblptrl
  1023   000C28  CFDD FFF7          	movff	postdec2,tblptrh
  1024   000C2C                     	if	0	;tblptru may be non-zero
  1025   000C2C                     	endif
  1026   000C2C                     	if	0	;tblptru may be non-zero
  1027   000C2C                     	endif
  1028   000C2C  0008               	tblrd		*
  1029   000C2E  CFF5 F045          	movff	tablat,??_vfpfcnvrt
  1030   000C32  0ED0               	movlw	208
  1031   000C34  2445               	addwf	??_vfpfcnvrt^0,w,c
  1032   000C36  6E46               	movwf	(??_vfpfcnvrt+1)^0,c
  1033   000C38  6A47               	clrf	(??_vfpfcnvrt+2)^0,c
  1034   000C3A  0EFF               	movlw	255
  1035   000C3C  2247               	addwfc	(??_vfpfcnvrt+2)^0,f,c
  1036   000C3E  5047               	movf	(??_vfpfcnvrt+2)^0,w,c
  1037   000C40  E109               	bnz	u1130
  1038   000C42  0E0A               	movlw	10
  1039   000C44  5C46               	subwf	(??_vfpfcnvrt+1)^0,w,c
  1040   000C46  A0D8               	btfss	status,0,c
  1041   000C48  EF28  F006         	goto	u1131
  1042   000C4C  EF2A  F006         	goto	u1130
  1043   000C50                     u1131:
  1044   000C50  EF07  F006         	goto	l1729
  1045   000C54                     u1130:
  1046   000C54                     l1735:
  1047                           
  1048                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  1049   000C54  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1050   000C58  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1051   000C5C  CFDE F052          	movff	postinc2,vfpfcnvrt@cp
  1052   000C60  CFDD F053          	movff	postdec2,vfpfcnvrt@cp+1
  1053   000C64                     
  1054                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1055   000C64  C052  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1056   000C68  C053  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1057   000C6C                     	if	0	;tblptru may be non-zero
  1058   000C6C                     	endif
  1059   000C6C                     	if	0	;tblptru may be non-zero
  1060   000C6C                     	endif
  1061   000C6C  0008               	tblrd		*
  1062   000C6E  50F5               	movf	tablat,w,c
  1063   000C70  0A64               	xorlw	100
  1064   000C72  B4D8               	btfsc	status,2,c
  1065   000C74  EF3E  F006         	goto	u1141
  1066   000C78  EF40  F006         	goto	u1140
  1067   000C7C                     u1141:
  1068   000C7C  EF4E  F006         	goto	l1741
  1069   000C80                     u1140:
  1070   000C80  C052  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1071   000C84  C053  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1072   000C88                     	if	0	;tblptru may be non-zero
  1073   000C88                     	endif
  1074   000C88                     	if	0	;tblptru may be non-zero
  1075   000C88                     	endif
  1076   000C88  0008               	tblrd		*
  1077   000C8A  50F5               	movf	tablat,w,c
  1078   000C8C  0A69               	xorlw	105
  1079   000C8E  A4D8               	btfss	status,2,c
  1080   000C90  EF4C  F006         	goto	u1151
  1081   000C94  EF4E  F006         	goto	u1150
  1082   000C98                     u1151:
  1083   000C98  EF91  F006         	goto	l1747
  1084   000C9C                     u1150:
  1085   000C9C                     l1741:
  1086                           
  1087                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1088   000C9C  C043  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1089   000CA0  C044  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1090   000CA4  CFDF F045          	movff	indf2,??_vfpfcnvrt
  1091   000CA8  0E02               	movlw	2
  1092   000CAA  26DE               	addwf	postinc2,f,c
  1093   000CAC  CFDF F046          	movff	indf2,??_vfpfcnvrt+1
  1094   000CB0  0E00               	movlw	0
  1095   000CB2  22DD               	addwfc	postdec2,f,c
  1096   000CB4  C045  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1097   000CB8  C046  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1098   000CBC  CFDE F048          	movff	postinc2,vfpfcnvrt@convarg
  1099   000CC0  CFDD F049          	movff	postdec2,vfpfcnvrt@convarg+1
  1100   000CC4  0E00               	movlw	0
  1101   000CC6  BE49               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1102   000CC8  0EFF               	movlw	-1
  1103   000CCA  6E4A               	movwf	(vfpfcnvrt@convarg+2)^0,c
  1104   000CCC  6E4B               	movwf	(vfpfcnvrt@convarg+3)^0,c
  1105   000CCE  6E4C               	movwf	(vfpfcnvrt@convarg+4)^0,c
  1106   000CD0  6E4D               	movwf	(vfpfcnvrt@convarg+5)^0,c
  1107   000CD2  6E4E               	movwf	(vfpfcnvrt@convarg+6)^0,c
  1108   000CD4  6E4F               	movwf	(vfpfcnvrt@convarg+7)^0,c
  1109                           
  1110                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  1111   000CD6  0E01               	movlw	1
  1112   000CD8  2452               	addwf	vfpfcnvrt@cp^0,w,c
  1113   000CDA  6E45               	movwf	??_vfpfcnvrt^0,c
  1114   000CDC  0E00               	movlw	0
  1115   000CDE  2053               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  1116   000CE0  6E46               	movwf	(??_vfpfcnvrt+1)^0,c
  1117   000CE2  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1118   000CE6  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1119   000CEA  C045  FFDE         	movff	??_vfpfcnvrt,postinc2
  1120   000CEE  C046  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  1121   000CF2                     
  1122                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  1123   000CF2  C03F  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1124   000CF6  C040  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1125   000CFA  C048  F01E         	movff	vfpfcnvrt@convarg,dtoa@d
  1126   000CFE  C049  F01F         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  1127   000D02  C04A  F020         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  1128   000D06  C04B  F021         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  1129   000D0A  C04C  F022         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  1130   000D0E  C04D  F023         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  1131   000D12  C04E  F024         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  1132   000D16  C04F  F025         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  1133   000D1A  EC06  F004         	call	_dtoa	;wreg free
  1134   000D1E  EFAE  F006         	goto	l868
  1135   000D22                     l1747:
  1136                           
  1137                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  1138   000D22  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1139   000D26  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1140   000D2A  2ADE               	incf	postinc2,f,c
  1141   000D2C  0E00               	movlw	0
  1142   000D2E  22DD               	addwfc	postdec2,f,c
  1143   000D30  EFAE  F006         	goto	l868
  1144   000D34                     l1751:
  1145                           
  1146                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  1147   000D34  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1148   000D38  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1149   000D3C  CFDE FFF6          	movff	postinc2,tblptrl
  1150   000D40  CFDD FFF7          	movff	postdec2,tblptrh
  1151   000D44                     	if	0	;tblptru may be non-zero
  1152   000D44                     	endif
  1153   000D44                     	if	0	;tblptru may be non-zero
  1154   000D44                     	endif
  1155   000D44  0008               	tblrd		*
  1156   000D46  50F5               	movf	tablat,w,c
  1157   000D48  6E01               	movwf	fputc@c^0,c
  1158   000D4A  6A02               	clrf	(fputc@c+1)^0,c
  1159   000D4C  C03F  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1160   000D50  C040  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1161   000D54  ECCA  F008         	call	_fputc	;wreg free
  1162   000D58  EF91  F006         	goto	l1747
  1163   000D5C                     l868:
  1164   000D5C  0012               	return		;funcret
  1165   000D5E                     __end_of_vfpfcnvrt:
  1166                           	callstack 0
  1167                           
  1168 ;; *************** function _dtoa *****************
  1169 ;; Defined at:
  1170 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1171 ;; Parameters:    Size  Location     Type
  1172 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1173 ;;		 -> sprintf@f(11), 
  1174 ;;  d               8   29[COMRAM] long long 
  1175 ;; Auto vars:     Size  Location     Type
  1176 ;;  n               8   51[COMRAM] long long 
  1177 ;;  i               2   59[COMRAM] int 
  1178 ;;  w               2   49[COMRAM] int 
  1179 ;;  p               2   47[COMRAM] int 
  1180 ;;  s               1   61[COMRAM] unsigned char 
  1181 ;; Return value:  Size  Location     Type
  1182 ;;                  1    wreg      void 
  1183 ;; Registers used:
  1184 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1185 ;; Tracked objects:
  1186 ;;		On entry : 0/0
  1187 ;;		On exit  : 0/0
  1188 ;;		Unchanged: 0/0
  1189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1190 ;;      Params:        10       0       0       0       0       0       0       0       0
  1191 ;;      Locals:        17       0       0       0       0       0       0       0       0
  1192 ;;      Temps:          8       0       0       0       0       0       0       0       0
  1193 ;;      Totals:        35       0       0       0       0       0       0       0       0
  1194 ;;Total ram usage:       35 bytes
  1195 ;; Hardware stack levels used: 1
  1196 ;; Hardware stack levels required when called: 4
  1197 ;; This function calls:
  1198 ;;		___aodiv
  1199 ;;		___aomod
  1200 ;;		_abs
  1201 ;;		_pad
  1202 ;; This function is called by:
  1203 ;;		_vfpfcnvrt
  1204 ;; This function uses a non-reentrant model
  1205 ;;
  1206                           
  1207                           	psect	text4
  1208   00080C                     __ptext4:
  1209                           	callstack 0
  1210   00080C                     _dtoa:
  1211                           	callstack 23
  1212   00080C                     
  1213                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  1214   00080C  C01E  F034         	movff	dtoa@d,dtoa@n
  1215   000810  C01F  F035         	movff	dtoa@d+1,dtoa@n+1
  1216   000814  C020  F036         	movff	dtoa@d+2,dtoa@n+2
  1217   000818  C021  F037         	movff	dtoa@d+3,dtoa@n+3
  1218   00081C  C022  F038         	movff	dtoa@d+4,dtoa@n+4
  1219   000820  C023  F039         	movff	dtoa@d+5,dtoa@n+5
  1220   000824  C024  F03A         	movff	dtoa@d+6,dtoa@n+6
  1221   000828  C025  F03B         	movff	dtoa@d+7,dtoa@n+7
  1222   00082C                     
  1223                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  1224   00082C  BE3B               	btfsc	(dtoa@n+7)^0,7,c
  1225   00082E  EF1B  F004         	goto	u881
  1226   000832  EF1E  F004         	goto	u880
  1227   000836                     u881:
  1228   000836  0E01               	movlw	1
  1229   000838  EF1F  F004         	goto	u890
  1230   00083C                     u880:
  1231   00083C  0E00               	movlw	0
  1232   00083E                     u890:
  1233   00083E  6E3E               	movwf	dtoa@s^0,c
  1234   000840                     
  1235                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  1236   000840  503E               	movf	dtoa@s^0,w,c
  1237   000842  B4D8               	btfsc	status,2,c
  1238   000844  EF26  F004         	goto	u901
  1239   000848  EF28  F004         	goto	u900
  1240   00084C                     u901:
  1241   00084C  EF38  F004         	goto	l1597
  1242   000850                     u900:
  1243   000850                     
  1244                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  1245   000850  1E3B               	comf	(dtoa@n+7)^0,f,c
  1246   000852  1E3A               	comf	(dtoa@n+6)^0,f,c
  1247   000854  1E39               	comf	(dtoa@n+5)^0,f,c
  1248   000856  1E38               	comf	(dtoa@n+4)^0,f,c
  1249   000858  1E37               	comf	(dtoa@n+3)^0,f,c
  1250   00085A  1E36               	comf	(dtoa@n+2)^0,f,c
  1251   00085C  1E35               	comf	(dtoa@n+1)^0,f,c
  1252   00085E  6C34               	negf	dtoa@n^0,c
  1253   000860  0E00               	movlw	0
  1254   000862  2235               	addwfc	(dtoa@n+1)^0,f,c
  1255   000864  2236               	addwfc	(dtoa@n+2)^0,f,c
  1256   000866  2237               	addwfc	(dtoa@n+3)^0,f,c
  1257   000868  2238               	addwfc	(dtoa@n+4)^0,f,c
  1258   00086A  2239               	addwfc	(dtoa@n+5)^0,f,c
  1259   00086C  223A               	addwfc	(dtoa@n+6)^0,f,c
  1260   00086E  223B               	addwfc	(dtoa@n+7)^0,f,c
  1261   000870                     l1597:
  1262                           
  1263                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 458:     if (!(pr
      +                          ec < 0)) {
  1264   000870  0100               	movlb	0	; () banked
  1265   000872  BF63               	btfsc	(_prec+1)& (0+255),7,b
  1266   000874  EF3E  F004         	goto	u911
  1267   000878  EF40  F004         	goto	u910
  1268   00087C                     u911:
  1269   00087C  EF41  F004         	goto	l1601
  1270   000880                     u910:
  1271   000880                     
  1272                           ; BSR set to: 0
  1273                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 459:         flag
      +                          s &= ~(1 << 1);
  1274   000880  925E               	bcf	_flags^0,1,c
  1275   000882                     l1601:
  1276                           
  1277                           ; BSR set to: 0
  1278                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  1279   000882  BF63               	btfsc	(_prec+1)& (0+255),7,b
  1280   000884  EF4E  F004         	goto	u920
  1281   000888  5163               	movf	(_prec+1)& (0+255),w,b
  1282   00088A  E106               	bnz	u921
  1283   00088C  0562               	decf	_prec& (0+255),w,b
  1284   00088E  B0D8               	btfsc	status,0,c
  1285   000890  EF4C  F004         	goto	u921
  1286   000894  EF4E  F004         	goto	u920
  1287   000898                     u921:
  1288   000898  EF54  F004         	goto	l830
  1289   00089C                     u920:
  1290   00089C                     
  1291                           ; BSR set to: 0
  1292   00089C  0E00               	movlw	0
  1293   00089E  6E31               	movwf	(dtoa@p+1)^0,c
  1294   0008A0  0E01               	movlw	1
  1295   0008A2  6E30               	movwf	dtoa@p^0,c
  1296   0008A4  EF58  F004         	goto	l832
  1297   0008A8                     l830:
  1298                           
  1299                           ; BSR set to: 0
  1300   0008A8  C062  F030         	movff	_prec,dtoa@p
  1301   0008AC  C063  F031         	movff	_prec+1,dtoa@p+1
  1302   0008B0                     l832:
  1303                           
  1304                           ; BSR set to: 0
  1305                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  1306   0008B0  C060  F032         	movff	_width,dtoa@w
  1307   0008B4  C061  F033         	movff	_width+1,dtoa@w+1
  1308   0008B8                     
  1309                           ; BSR set to: 0
  1310                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  1311   0008B8  503E               	movf	dtoa@s^0,w,c
  1312   0008BA  B4D8               	btfsc	status,2,c
  1313   0008BC  EF62  F004         	goto	u931
  1314   0008C0  EF64  F004         	goto	u930
  1315   0008C4                     u931:
  1316   0008C4  EF7B  F004         	goto	l833
  1317   0008C8                     u930:
  1318   0008C8                     
  1319                           ; BSR set to: 0
  1320                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  1321   0008C8  0632               	decf	dtoa@w^0,f,c
  1322   0008CA  A0D8               	btfss	status,0,c
  1323   0008CC  0633               	decf	(dtoa@w+1)^0,f,c
  1324   0008CE                     
  1325                           ; BSR set to: 0
  1326                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  1327   0008CE  503E               	movf	dtoa@s^0,w,c
  1328   0008D0  A4D8               	btfss	status,2,c
  1329   0008D2  EF6D  F004         	goto	u941
  1330   0008D6  EF6F  F004         	goto	u940
  1331   0008DA                     u941:
  1332   0008DA  EF75  F004         	goto	l1613
  1333   0008DE                     u940:
  1334   0008DE                     
  1335                           ; BSR set to: 0
  1336   0008DE  0E00               	movlw	0
  1337   0008E0  6E2F               	movwf	(_dtoa$926+1)^0,c
  1338   0008E2  0E2B               	movlw	43
  1339   0008E4  6E2E               	movwf	_dtoa$926^0,c
  1340   0008E6  EF79  F004         	goto	l1615
  1341   0008EA                     l1613:
  1342                           
  1343                           ; BSR set to: 0
  1344   0008EA  0E00               	movlw	0
  1345   0008EC  6E2F               	movwf	(_dtoa$926+1)^0,c
  1346   0008EE  0E2D               	movlw	45
  1347   0008F0  6E2E               	movwf	_dtoa$926^0,c
  1348   0008F2                     l1615:
  1349                           
  1350                           ; BSR set to: 0
  1351   0008F2  C02E  F03E         	movff	_dtoa$926,dtoa@s
  1352   0008F6                     l833:
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  1356   0008F6  0E00               	movlw	0
  1357   0008F8  6E3D               	movwf	(dtoa@i+1)^0,c
  1358   0008FA  0E1F               	movlw	31
  1359   0008FC  6E3C               	movwf	dtoa@i^0,c
  1360   0008FE                     
  1361                           ; BSR set to: 0
  1362                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  1363   0008FE  0E00               	movlw	0
  1364   000900  6F85               	movwf	(_dbuf+31)& (0+255),b
  1365                           
  1366                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  1367   000902  EFFF  F004         	goto	l1629
  1368   000906                     l1619:
  1369                           
  1370                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  1371   000906  063C               	decf	dtoa@i^0,f,c
  1372   000908  A0D8               	btfss	status,0,c
  1373   00090A  063D               	decf	(dtoa@i+1)^0,f,c
  1374   00090C                     
  1375                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  1376   00090C  0E66               	movlw	low _dbuf
  1377   00090E  243C               	addwf	dtoa@i^0,w,c
  1378   000910  6ED9               	movwf	fsr2l,c
  1379   000912  0E00               	movlw	high _dbuf
  1380   000914  203D               	addwfc	(dtoa@i+1)^0,w,c
  1381   000916  6EDA               	movwf	fsr2h,c
  1382   000918  C034  F001         	movff	dtoa@n,___aomod@dividend
  1383   00091C  C035  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1384   000920  C036  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1385   000924  C037  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1386   000928  C038  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1387   00092C  C039  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1388   000930  C03A  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1389   000934  C03B  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1390   000938  0E0A               	movlw	10
  1391   00093A  6E09               	movwf	___aomod@divisor^0,c
  1392   00093C  0E00               	movlw	0
  1393   00093E  6E0A               	movwf	(___aomod@divisor+1)^0,c
  1394   000940  0E00               	movlw	0
  1395   000942  6E0B               	movwf	(___aomod@divisor+2)^0,c
  1396   000944  0E00               	movlw	0
  1397   000946  6E0C               	movwf	(___aomod@divisor+3)^0,c
  1398   000948  0E00               	movlw	0
  1399   00094A  6E0D               	movwf	(___aomod@divisor+4)^0,c
  1400   00094C  0E00               	movlw	0
  1401   00094E  6E0E               	movwf	(___aomod@divisor+5)^0,c
  1402   000950  0E00               	movlw	0
  1403   000952  6E0F               	movwf	(___aomod@divisor+6)^0,c
  1404   000954  0E00               	movlw	0
  1405   000956  6E10               	movwf	(___aomod@divisor+7)^0,c
  1406   000958  EC73  F007         	call	___aomod	;wreg free
  1407   00095C  C001  F026         	movff	?___aomod,??_dtoa
  1408   000960  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1409   000964  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1410   000968  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1411   00096C  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1412   000970  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1413   000974  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1414   000978  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1415   00097C  C026  F013         	movff	??_dtoa,abs@a
  1416   000980  C027  F014         	movff	??_dtoa+1,abs@a+1
  1417   000984  ECF6  F00A         	call	_abs	;wreg free
  1418   000988  5013               	movf	?_abs^0,w,c
  1419   00098A  0F30               	addlw	48
  1420   00098C  6EDF               	movwf	indf2,c
  1421   00098E                     
  1422                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  1423   00098E  0630               	decf	dtoa@p^0,f,c
  1424   000990  A0D8               	btfss	status,0,c
  1425   000992  0631               	decf	(dtoa@p+1)^0,f,c
  1426   000994                     
  1427                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  1428   000994  0632               	decf	dtoa@w^0,f,c
  1429   000996  A0D8               	btfss	status,0,c
  1430   000998  0633               	decf	(dtoa@w+1)^0,f,c
  1431   00099A                     
  1432                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  1433   00099A  C034  F001         	movff	dtoa@n,___aodiv@dividend
  1434   00099E  C035  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1435   0009A2  C036  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1436   0009A6  C037  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1437   0009AA  C038  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1438   0009AE  C039  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1439   0009B2  C03A  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1440   0009B6  C03B  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1441   0009BA  0E0A               	movlw	10
  1442   0009BC  6E09               	movwf	___aodiv@divisor^0,c
  1443   0009BE  0E00               	movlw	0
  1444   0009C0  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  1445   0009C2  0E00               	movlw	0
  1446   0009C4  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  1447   0009C6  0E00               	movlw	0
  1448   0009C8  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  1449   0009CA  0E00               	movlw	0
  1450   0009CC  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  1451   0009CE  0E00               	movlw	0
  1452   0009D0  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  1453   0009D2  0E00               	movlw	0
  1454   0009D4  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  1455   0009D6  0E00               	movlw	0
  1456   0009D8  6E10               	movwf	(___aodiv@divisor+7)^0,c
  1457   0009DA  ECAF  F006         	call	___aodiv	;wreg free
  1458   0009DE  C001  F034         	movff	?___aodiv,dtoa@n
  1459   0009E2  C002  F035         	movff	?___aodiv+1,dtoa@n+1
  1460   0009E6  C003  F036         	movff	?___aodiv+2,dtoa@n+2
  1461   0009EA  C004  F037         	movff	?___aodiv+3,dtoa@n+3
  1462   0009EE  C005  F038         	movff	?___aodiv+4,dtoa@n+4
  1463   0009F2  C006  F039         	movff	?___aodiv+5,dtoa@n+5
  1464   0009F6  C007  F03A         	movff	?___aodiv+6,dtoa@n+6
  1465   0009FA  C008  F03B         	movff	?___aodiv+7,dtoa@n+7
  1466   0009FE                     l1629:
  1467                           
  1468                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  1469   0009FE  BE3D               	btfsc	(dtoa@i+1)^0,7,c
  1470   000A00  EF0A  F005         	goto	u951
  1471   000A04  503D               	movf	(dtoa@i+1)^0,w,c
  1472   000A06  E108               	bnz	u950
  1473   000A08  043C               	decf	dtoa@i^0,w,c
  1474   000A0A  A0D8               	btfss	status,0,c
  1475   000A0C  EF0A  F005         	goto	u951
  1476   000A10  EF0C  F005         	goto	u950
  1477   000A14                     u951:
  1478   000A14  EF3C  F005         	goto	l1639
  1479   000A18                     u950:
  1480   000A18  5034               	movf	dtoa@n^0,w,c
  1481   000A1A  1035               	iorwf	(dtoa@n+1)^0,w,c
  1482   000A1C  1036               	iorwf	(dtoa@n+2)^0,w,c
  1483   000A1E  1037               	iorwf	(dtoa@n+3)^0,w,c
  1484   000A20  1038               	iorwf	(dtoa@n+4)^0,w,c
  1485   000A22  1039               	iorwf	(dtoa@n+5)^0,w,c
  1486   000A24  103A               	iorwf	(dtoa@n+6)^0,w,c
  1487   000A26  103B               	iorwf	(dtoa@n+7)^0,w,c
  1488   000A28  A4D8               	btfss	status,2,c
  1489   000A2A  EF19  F005         	goto	u961
  1490   000A2E  EF1B  F005         	goto	u960
  1491   000A32                     u961:
  1492   000A32  EF83  F004         	goto	l1619
  1493   000A36                     u960:
  1494   000A36  BE31               	btfsc	(dtoa@p+1)^0,7,c
  1495   000A38  EF28  F005         	goto	u970
  1496   000A3C  5031               	movf	(dtoa@p+1)^0,w,c
  1497   000A3E  E106               	bnz	u971
  1498   000A40  0430               	decf	dtoa@p^0,w,c
  1499   000A42  B0D8               	btfsc	status,0,c
  1500   000A44  EF26  F005         	goto	u971
  1501   000A48  EF28  F005         	goto	u970
  1502   000A4C                     u971:
  1503   000A4C  EF83  F004         	goto	l1619
  1504   000A50                     u970:
  1505   000A50  BE33               	btfsc	(dtoa@w+1)^0,7,c
  1506   000A52  EF33  F005         	goto	u981
  1507   000A56  5033               	movf	(dtoa@w+1)^0,w,c
  1508   000A58  E108               	bnz	u980
  1509   000A5A  0432               	decf	dtoa@w^0,w,c
  1510   000A5C  A0D8               	btfss	status,0,c
  1511   000A5E  EF33  F005         	goto	u981
  1512   000A62  EF35  F005         	goto	u980
  1513   000A66                     u981:
  1514   000A66  EF3C  F005         	goto	l1639
  1515   000A6A                     u980:
  1516   000A6A  B25E               	btfsc	_flags^0,1,c
  1517   000A6C  EF3A  F005         	goto	u991
  1518   000A70  EF3C  F005         	goto	u990
  1519   000A74                     u991:
  1520   000A74  EF83  F004         	goto	l1619
  1521   000A78                     u990:
  1522   000A78                     l1639:
  1523                           
  1524                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  1525   000A78  503E               	movf	dtoa@s^0,w,c
  1526   000A7A  B4D8               	btfsc	status,2,c
  1527   000A7C  EF42  F005         	goto	u1001
  1528   000A80  EF44  F005         	goto	u1000
  1529   000A84                     u1001:
  1530   000A84  EF4F  F005         	goto	l1645
  1531   000A88                     u1000:
  1532   000A88                     
  1533                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  1534   000A88  063C               	decf	dtoa@i^0,f,c
  1535   000A8A  A0D8               	btfss	status,0,c
  1536   000A8C  063D               	decf	(dtoa@i+1)^0,f,c
  1537   000A8E                     
  1538                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  1539   000A8E  0E66               	movlw	low _dbuf
  1540   000A90  243C               	addwf	dtoa@i^0,w,c
  1541   000A92  6ED9               	movwf	fsr2l,c
  1542   000A94  0E00               	movlw	high _dbuf
  1543   000A96  203D               	addwfc	(dtoa@i+1)^0,w,c
  1544   000A98  6EDA               	movwf	fsr2h,c
  1545   000A9A  C03E  FFDF         	movff	dtoa@s,indf2
  1546   000A9E                     l1645:
  1547                           
  1548                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  1549   000A9E  C01C  F011         	movff	dtoa@fp,pad@fp
  1550   000AA2  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1551   000AA6  0E66               	movlw	low _dbuf
  1552   000AA8  243C               	addwf	dtoa@i^0,w,c
  1553   000AAA  6E13               	movwf	pad@buf^0,c
  1554   000AAC  0E00               	movlw	high _dbuf
  1555   000AAE  203D               	addwfc	(dtoa@i+1)^0,w,c
  1556   000AB0  6E14               	movwf	(pad@buf+1)^0,c
  1557   000AB2  C032  F015         	movff	dtoa@w,pad@p
  1558   000AB6  C033  F016         	movff	dtoa@w+1,pad@p+1
  1559   000ABA  EC2F  F009         	call	_pad	;wreg free
  1560   000ABE  0012               	return		;funcret
  1561   000AC0                     __end_of_dtoa:
  1562                           	callstack 0
  1563                           
  1564 ;; *************** function _pad *****************
  1565 ;; Defined at:
  1566 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1567 ;; Parameters:    Size  Location     Type
  1568 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1569 ;;		 -> sprintf@f(11), 
  1570 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1571 ;;		 -> dbuf(32), 
  1572 ;;  p               2   20[COMRAM] int 
  1573 ;; Auto vars:     Size  Location     Type
  1574 ;;  w               2   25[COMRAM] int 
  1575 ;;  i               2   23[COMRAM] int 
  1576 ;; Return value:  Size  Location     Type
  1577 ;;                  1    wreg      void 
  1578 ;; Registers used:
  1579 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1580 ;; Tracked objects:
  1581 ;;		On entry : 0/0
  1582 ;;		On exit  : 0/0
  1583 ;;		Unchanged: 0/0
  1584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1585 ;;      Params:         6       0       0       0       0       0       0       0       0
  1586 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1587 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1588 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1589 ;;Total ram usage:       11 bytes
  1590 ;; Hardware stack levels used: 1
  1591 ;; Hardware stack levels required when called: 3
  1592 ;; This function calls:
  1593 ;;		_fputc
  1594 ;;		_fputs
  1595 ;; This function is called by:
  1596 ;;		_dtoa
  1597 ;; This function uses a non-reentrant model
  1598 ;;
  1599                           
  1600                           	psect	text5
  1601   00125E                     __ptext5:
  1602                           	callstack 0
  1603   00125E                     _pad:
  1604                           	callstack 23
  1605   00125E                     
  1606                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 139:     if (flags & (1 << 0)) {
  1607   00125E  A05E               	btfss	_flags^0,0,c
  1608   001260  EF34  F009         	goto	u791
  1609   001264  EF36  F009         	goto	u790
  1610   001268                     u791:
  1611   001268  EF40  F009         	goto	l1555
  1612   00126C                     u790:
  1613   00126C                     
  1614                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 140:         fput
      +                          s((const char *)buf, fp);
  1615   00126C  C013  F00A         	movff	pad@buf,fputs@s
  1616   001270  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1617   001274  C011  F00C         	movff	pad@fp,fputs@fp
  1618   001278  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1619   00127C  ECD4  F00A         	call	_fputs	;wreg free
  1620   001280                     l1555:
  1621                           
  1622                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 145:     w = (p <
      +                           0) ? 0 : p;
  1623   001280  BE16               	btfsc	(pad@p+1)^0,7,c
  1624   001282  EF45  F009         	goto	u801
  1625   001286  EF47  F009         	goto	u800
  1626   00128A                     u801:
  1627   00128A  EF4D  F009         	goto	l1559
  1628   00128E                     u800:
  1629   00128E  C015  F01A         	movff	pad@p,pad@w
  1630   001292  C016  F01B         	movff	pad@p+1,pad@w+1
  1631   001296  EF51  F009         	goto	l819
  1632   00129A                     l1559:
  1633   00129A  0E00               	movlw	0
  1634   00129C  6E1B               	movwf	(pad@w+1)^0,c
  1635   00129E  0E00               	movlw	0
  1636   0012A0  6E1A               	movwf	pad@w^0,c
  1637   0012A2                     l819:
  1638                           
  1639                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  1640   0012A2  0E00               	movlw	0
  1641   0012A4  6E19               	movwf	(pad@i+1)^0,c
  1642   0012A6  0E00               	movlw	0
  1643   0012A8  6E18               	movwf	pad@i^0,c
  1644                           
  1645                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  1646   0012AA  EF63  F009         	goto	l1565
  1647   0012AE                     l1561:
  1648                           
  1649                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  1650   0012AE  0E00               	movlw	0
  1651   0012B0  6E02               	movwf	(fputc@c+1)^0,c
  1652   0012B2  0E20               	movlw	32
  1653   0012B4  6E01               	movwf	fputc@c^0,c
  1654   0012B6  C011  F003         	movff	pad@fp,fputc@fp
  1655   0012BA  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1656   0012BE  ECCA  F008         	call	_fputc	;wreg free
  1657   0012C2                     
  1658                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  1659   0012C2  4A18               	infsnz	pad@i^0,f,c
  1660   0012C4  2A19               	incf	(pad@i+1)^0,f,c
  1661   0012C6                     l1565:
  1662                           
  1663                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  1664   0012C6  501A               	movf	pad@w^0,w,c
  1665   0012C8  5C18               	subwf	pad@i^0,w,c
  1666   0012CA  5019               	movf	(pad@i+1)^0,w,c
  1667   0012CC  0A80               	xorlw	128
  1668   0012CE  6E17               	movwf	??_pad^0,c
  1669   0012D0  501B               	movf	(pad@w+1)^0,w,c
  1670   0012D2  0A80               	xorlw	128
  1671   0012D4  5817               	subwfb	??_pad^0,w,c
  1672   0012D6  A0D8               	btfss	status,0,c
  1673   0012D8  EF70  F009         	goto	u811
  1674   0012DC  EF72  F009         	goto	u810
  1675   0012E0                     u811:
  1676   0012E0  EF57  F009         	goto	l1561
  1677   0012E4                     u810:
  1678   0012E4                     
  1679                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 154:     if (!(fl
      +                          ags & (1 << 0))) {
  1680   0012E4  B05E               	btfsc	_flags^0,0,c
  1681   0012E6  EF77  F009         	goto	u821
  1682   0012EA  EF79  F009         	goto	u820
  1683   0012EE                     u821:
  1684   0012EE  EF83  F009         	goto	l824
  1685   0012F2                     u820:
  1686   0012F2                     
  1687                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  1688   0012F2  C013  F00A         	movff	pad@buf,fputs@s
  1689   0012F6  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1690   0012FA  C011  F00C         	movff	pad@fp,fputs@fp
  1691   0012FE  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1692   001302  ECD4  F00A         	call	_fputs	;wreg free
  1693   001306                     l824:
  1694   001306  0012               	return		;funcret
  1695   001308                     __end_of_pad:
  1696                           	callstack 0
  1697                           
  1698 ;; *************** function _fputs *****************
  1699 ;; Defined at:
  1700 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  1701 ;; Parameters:    Size  Location     Type
  1702 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1703 ;;		 -> dbuf(32), 
  1704 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1705 ;;		 -> sprintf@f(11), 
  1706 ;; Auto vars:     Size  Location     Type
  1707 ;;  i               2   14[COMRAM] int 
  1708 ;;  c               1   13[COMRAM] unsigned char 
  1709 ;; Return value:  Size  Location     Type
  1710 ;;                  2    9[COMRAM] int 
  1711 ;; Registers used:
  1712 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1713 ;; Tracked objects:
  1714 ;;		On entry : 0/0
  1715 ;;		On exit  : 0/0
  1716 ;;		Unchanged: 0/0
  1717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1718 ;;      Params:         4       0       0       0       0       0       0       0       0
  1719 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1720 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1721 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1722 ;;Total ram usage:        7 bytes
  1723 ;; Hardware stack levels used: 1
  1724 ;; Hardware stack levels required when called: 2
  1725 ;; This function calls:
  1726 ;;		_fputc
  1727 ;; This function is called by:
  1728 ;;		_pad
  1729 ;; This function uses a non-reentrant model
  1730 ;;
  1731                           
  1732                           	psect	text6
  1733   0015A8                     __ptext6:
  1734                           	callstack 0
  1735   0015A8                     _fputs:
  1736                           	callstack 23
  1737   0015A8  0E00               	movlw	0
  1738   0015AA  6E10               	movwf	(fputs@i+1)^0,c
  1739   0015AC  0E00               	movlw	0
  1740   0015AE  6E0F               	movwf	fputs@i^0,c
  1741   0015B0  EFE5  F00A         	goto	l1463
  1742   0015B4                     l1459:
  1743   0015B4  C00E  F001         	movff	fputs@c,fputc@c
  1744   0015B8  6A02               	clrf	(fputc@c+1)^0,c
  1745   0015BA  C00C  F003         	movff	fputs@fp,fputc@fp
  1746   0015BE  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1747   0015C2  ECCA  F008         	call	_fputc	;wreg free
  1748   0015C6  4A0F               	infsnz	fputs@i^0,f,c
  1749   0015C8  2A10               	incf	(fputs@i+1)^0,f,c
  1750   0015CA                     l1463:
  1751   0015CA  500F               	movf	fputs@i^0,w,c
  1752   0015CC  240A               	addwf	fputs@s^0,w,c
  1753   0015CE  6ED9               	movwf	fsr2l,c
  1754   0015D0  5010               	movf	(fputs@i+1)^0,w,c
  1755   0015D2  200B               	addwfc	(fputs@s+1)^0,w,c
  1756   0015D4  6EDA               	movwf	fsr2h,c
  1757   0015D6  50DF               	movf	indf2,w,c
  1758   0015D8  6E0E               	movwf	fputs@c^0,c
  1759   0015DA  500E               	movf	fputs@c^0,w,c
  1760   0015DC  A4D8               	btfss	status,2,c
  1761   0015DE  EFF3  F00A         	goto	u651
  1762   0015E2  EFF5  F00A         	goto	u650
  1763   0015E6                     u651:
  1764   0015E6  EFDA  F00A         	goto	l1459
  1765   0015EA                     u650:
  1766   0015EA  0012               	return		;funcret
  1767   0015EC                     __end_of_fputs:
  1768                           	callstack 0
  1769                           
  1770 ;; *************** function _fputc *****************
  1771 ;; Defined at:
  1772 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  1773 ;; Parameters:    Size  Location     Type
  1774 ;;  c               2    0[COMRAM] int 
  1775 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1776 ;;		 -> sprintf@f(11), 
  1777 ;; Auto vars:     Size  Location     Type
  1778 ;;		None
  1779 ;; Return value:  Size  Location     Type
  1780 ;;                  2    0[COMRAM] int 
  1781 ;; Registers used:
  1782 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1783 ;; Tracked objects:
  1784 ;;		On entry : 0/0
  1785 ;;		On exit  : 0/0
  1786 ;;		Unchanged: 0/0
  1787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1788 ;;      Params:         4       0       0       0       0       0       0       0       0
  1789 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1790 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1791 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1792 ;;Total ram usage:        9 bytes
  1793 ;; Hardware stack levels used: 1
  1794 ;; Hardware stack levels required when called: 1
  1795 ;; This function calls:
  1796 ;;		_putch
  1797 ;; This function is called by:
  1798 ;;		_pad
  1799 ;;		_vfpfcnvrt
  1800 ;;		_fputs
  1801 ;; This function uses a non-reentrant model
  1802 ;;
  1803                           
  1804                           	psect	text7
  1805   001194                     __ptext7:
  1806                           	callstack 0
  1807   001194                     _fputc:
  1808                           	callstack 26
  1809   001194  5003               	movf	fputc@fp^0,w,c
  1810   001196  1004               	iorwf	(fputc@fp+1)^0,w,c
  1811   001198  B4D8               	btfsc	status,2,c
  1812   00119A  EFD1  F008         	goto	u611
  1813   00119E  EFD3  F008         	goto	u610
  1814   0011A2                     u611:
  1815   0011A2  EFDC  F008         	goto	l1447
  1816   0011A6                     u610:
  1817   0011A6  5003               	movf	fputc@fp^0,w,c
  1818   0011A8  1004               	iorwf	(fputc@fp+1)^0,w,c
  1819   0011AA  A4D8               	btfss	status,2,c
  1820   0011AC  EFDA  F008         	goto	u621
  1821   0011B0  EFDC  F008         	goto	u620
  1822   0011B4                     u621:
  1823   0011B4  EFE1  F008         	goto	l1449
  1824   0011B8                     u620:
  1825   0011B8                     l1447:
  1826   0011B8  5001               	movf	fputc@c^0,w,c
  1827   0011BA  ECC0  F00B         	call	_putch
  1828   0011BE  EF2E  F009         	goto	l932
  1829   0011C2                     l1449:
  1830   0011C2  EE20 F009          	lfsr	2,9
  1831   0011C6  5003               	movf	fputc@fp^0,w,c
  1832   0011C8  26D9               	addwf	fsr2l,f,c
  1833   0011CA  5004               	movf	(fputc@fp+1)^0,w,c
  1834   0011CC  22DA               	addwfc	fsr2h,f,c
  1835   0011CE  50DE               	movf	postinc2,w,c
  1836   0011D0  10DE               	iorwf	postinc2,w,c
  1837   0011D2  B4D8               	btfsc	status,2,c
  1838   0011D4  EFEE  F008         	goto	u631
  1839   0011D8  EFF0  F008         	goto	u630
  1840   0011DC                     u631:
  1841   0011DC  EF0B  F009         	goto	l1453
  1842   0011E0                     u630:
  1843   0011E0  EE20 F009          	lfsr	2,9
  1844   0011E4  5003               	movf	fputc@fp^0,w,c
  1845   0011E6  26D9               	addwf	fsr2l,f,c
  1846   0011E8  5004               	movf	(fputc@fp+1)^0,w,c
  1847   0011EA  22DA               	addwfc	fsr2h,f,c
  1848   0011EC  EE10 F003          	lfsr	1,3
  1849   0011F0  5003               	movf	fputc@fp^0,w,c
  1850   0011F2  26E1               	addwf	fsr1l,f,c
  1851   0011F4  5004               	movf	(fputc@fp+1)^0,w,c
  1852   0011F6  22E2               	addwfc	fsr1h,f,c
  1853   0011F8  50DE               	movf	postinc2,w,c
  1854   0011FA  5CE6               	subwf	postinc1,w,c
  1855   0011FC  50E6               	movf	postinc1,w,c
  1856   0011FE  0A80               	xorlw	128
  1857   001200  6E09               	movwf	(??_fputc+4)^0,c
  1858   001202  50DE               	movf	postinc2,w,c
  1859   001204  0A80               	xorlw	128
  1860   001206  5809               	subwfb	(??_fputc+4)^0,w,c
  1861   001208  B0D8               	btfsc	status,0,c
  1862   00120A  EF09  F009         	goto	u641
  1863   00120E  EF0B  F009         	goto	u640
  1864   001212                     u641:
  1865   001212  EF2E  F009         	goto	l932
  1866   001216                     u640:
  1867   001216                     l1453:
  1868   001216  EE20 F003          	lfsr	2,3
  1869   00121A  5003               	movf	fputc@fp^0,w,c
  1870   00121C  26D9               	addwf	fsr2l,f,c
  1871   00121E  5004               	movf	(fputc@fp+1)^0,w,c
  1872   001220  22DA               	addwfc	fsr2h,f,c
  1873   001222  CFDE F005          	movff	postinc2,??_fputc
  1874   001226  CFDD F006          	movff	postdec2,??_fputc+1
  1875   00122A  C003  FFD9         	movff	fputc@fp,fsr2l
  1876   00122E  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1877   001232  CFDE F007          	movff	postinc2,??_fputc+2
  1878   001236  CFDD F008          	movff	postdec2,??_fputc+3
  1879   00123A  5005               	movf	??_fputc^0,w,c
  1880   00123C  2407               	addwf	(??_fputc+2)^0,w,c
  1881   00123E  6ED9               	movwf	fsr2l,c
  1882   001240  5006               	movf	(??_fputc+1)^0,w,c
  1883   001242  2008               	addwfc	(??_fputc+3)^0,w,c
  1884   001244  6EDA               	movwf	fsr2h,c
  1885   001246  C001  FFDF         	movff	fputc@c,indf2
  1886   00124A  EE20 F003          	lfsr	2,3
  1887   00124E  5003               	movf	fputc@fp^0,w,c
  1888   001250  26D9               	addwf	fsr2l,f,c
  1889   001252  5004               	movf	(fputc@fp+1)^0,w,c
  1890   001254  22DA               	addwfc	fsr2h,f,c
  1891   001256  2ADE               	incf	postinc2,f,c
  1892   001258  0E00               	movlw	0
  1893   00125A  22DD               	addwfc	postdec2,f,c
  1894   00125C                     l932:
  1895   00125C  0012               	return		;funcret
  1896   00125E                     __end_of_fputc:
  1897                           	callstack 0
  1898                           
  1899 ;; *************** function _putch *****************
  1900 ;; Defined at:
  1901 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  1902 ;; Parameters:    Size  Location     Type
  1903 ;;  c               1    wreg     unsigned char 
  1904 ;; Auto vars:     Size  Location     Type
  1905 ;;  c               1    0[COMRAM] unsigned char 
  1906 ;; Return value:  Size  Location     Type
  1907 ;;                  1    wreg      void 
  1908 ;; Registers used:
  1909 ;;		wreg
  1910 ;; Tracked objects:
  1911 ;;		On entry : 0/0
  1912 ;;		On exit  : 0/0
  1913 ;;		Unchanged: 0/0
  1914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1915 ;;      Params:         0       0       0       0       0       0       0       0       0
  1916 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1917 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1918 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1919 ;;Total ram usage:        0 bytes
  1920 ;; Hardware stack levels used: 1
  1921 ;; This function calls:
  1922 ;;		Nothing
  1923 ;; This function is called by:
  1924 ;;		_fputc
  1925 ;; This function uses a non-reentrant model
  1926 ;;
  1927                           
  1928                           	psect	text8
  1929   001780                     __ptext8:
  1930                           	callstack 0
  1931   001780                     _putch:
  1932                           	callstack 26
  1933   001780  0012               	return		;funcret
  1934   001782                     __end_of_putch:
  1935                           	callstack 0
  1936                           
  1937 ;; *************** function _abs *****************
  1938 ;; Defined at:
  1939 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  1940 ;; Parameters:    Size  Location     Type
  1941 ;;  a               2   18[COMRAM] int 
  1942 ;; Auto vars:     Size  Location     Type
  1943 ;;		None
  1944 ;; Return value:  Size  Location     Type
  1945 ;;                  2   18[COMRAM] int 
  1946 ;; Registers used:
  1947 ;;		wreg, status,2, status,0
  1948 ;; Tracked objects:
  1949 ;;		On entry : 0/0
  1950 ;;		On exit  : 0/0
  1951 ;;		Unchanged: 0/0
  1952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1953 ;;      Params:         2       0       0       0       0       0       0       0       0
  1954 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1955 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1956 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1957 ;;Total ram usage:        4 bytes
  1958 ;; Hardware stack levels used: 1
  1959 ;; This function calls:
  1960 ;;		Nothing
  1961 ;; This function is called by:
  1962 ;;		_dtoa
  1963 ;; This function uses a non-reentrant model
  1964 ;;
  1965                           
  1966                           	psect	text9
  1967   0015EC                     __ptext9:
  1968                           	callstack 0
  1969   0015EC                     _abs:
  1970                           	callstack 26
  1971   0015EC  BE14               	btfsc	(abs@a+1)^0,7,c
  1972   0015EE  EF03  F00B         	goto	u830
  1973   0015F2  5014               	movf	(abs@a+1)^0,w,c
  1974   0015F4  E106               	bnz	u831
  1975   0015F6  0413               	decf	abs@a^0,w,c
  1976   0015F8  B0D8               	btfsc	status,0,c
  1977   0015FA  EF01  F00B         	goto	u831
  1978   0015FE  EF03  F00B         	goto	u830
  1979   001602                     u831:
  1980   001602  EF11  F00B         	goto	l878
  1981   001606                     u830:
  1982   001606  C013  F015         	movff	abs@a,??_abs
  1983   00160A  C014  F016         	movff	abs@a+1,??_abs+1
  1984   00160E  1E15               	comf	??_abs^0,f,c
  1985   001610  1E16               	comf	(??_abs+1)^0,f,c
  1986   001612  4A15               	infsnz	??_abs^0,f,c
  1987   001614  2A16               	incf	(??_abs+1)^0,f,c
  1988   001616  C015  F013         	movff	??_abs,?_abs
  1989   00161A  C016  F014         	movff	??_abs+1,?_abs+1
  1990   00161E  EF15  F00B         	goto	l881
  1991   001622                     l878:
  1992   001622  C013  F013         	movff	abs@a,?_abs
  1993   001626  C014  F014         	movff	abs@a+1,?_abs+1
  1994   00162A                     l881:
  1995   00162A  0012               	return		;funcret
  1996   00162C                     __end_of_abs:
  1997                           	callstack 0
  1998                           
  1999 ;; *************** function ___aomod *****************
  2000 ;; Defined at:
  2001 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  2002 ;; Parameters:    Size  Location     Type
  2003 ;;  dividend        8    0[COMRAM] long long 
  2004 ;;  divisor         8    8[COMRAM] long long 
  2005 ;; Auto vars:     Size  Location     Type
  2006 ;;  sign            1   17[COMRAM] unsigned char 
  2007 ;;  counter         1   16[COMRAM] unsigned char 
  2008 ;; Return value:  Size  Location     Type
  2009 ;;                  8    0[COMRAM] long long 
  2010 ;; Registers used:
  2011 ;;		wreg, status,2, status,0
  2012 ;; Tracked objects:
  2013 ;;		On entry : 0/0
  2014 ;;		On exit  : 0/0
  2015 ;;		Unchanged: 0/0
  2016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2017 ;;      Params:        16       0       0       0       0       0       0       0       0
  2018 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2019 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2020 ;;      Totals:        18       0       0       0       0       0       0       0       0
  2021 ;;Total ram usage:       18 bytes
  2022 ;; Hardware stack levels used: 1
  2023 ;; This function calls:
  2024 ;;		Nothing
  2025 ;; This function is called by:
  2026 ;;		_dtoa
  2027 ;; This function uses a non-reentrant model
  2028 ;;
  2029                           
  2030                           	psect	text10
  2031   000EE6                     __ptext10:
  2032                           	callstack 0
  2033   000EE6                     ___aomod:
  2034                           	callstack 26
  2035   000EE6  0E00               	movlw	0
  2036   000EE8  6E12               	movwf	___aomod@sign^0,c
  2037   000EEA  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  2038   000EEC  EF7C  F007         	goto	u730
  2039   000EF0  EF7A  F007         	goto	u731
  2040   000EF4                     u731:
  2041   000EF4  EF8E  F007         	goto	l1523
  2042   000EF8                     u730:
  2043   000EF8  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2044   000EFA  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2045   000EFC  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2046   000EFE  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2047   000F00  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2048   000F02  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2049   000F04  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2050   000F06  6C01               	negf	___aomod@dividend^0,c
  2051   000F08  0E00               	movlw	0
  2052   000F0A  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2053   000F0C  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2054   000F0E  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2055   000F10  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2056   000F12  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2057   000F14  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2058   000F16  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2059   000F18  0E01               	movlw	1
  2060   000F1A  6E12               	movwf	___aomod@sign^0,c
  2061   000F1C                     l1523:
  2062   000F1C  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  2063   000F1E  EF95  F007         	goto	u740
  2064   000F22  EF93  F007         	goto	u741
  2065   000F26                     u741:
  2066   000F26  EFA5  F007         	goto	l1527
  2067   000F2A                     u740:
  2068   000F2A  1E10               	comf	(___aomod@divisor+7)^0,f,c
  2069   000F2C  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  2070   000F2E  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  2071   000F30  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  2072   000F32  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  2073   000F34  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  2074   000F36  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  2075   000F38  6C09               	negf	___aomod@divisor^0,c
  2076   000F3A  0E00               	movlw	0
  2077   000F3C  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  2078   000F3E  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2079   000F40  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2080   000F42  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2081   000F44  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2082   000F46  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2083   000F48  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2084   000F4A                     l1527:
  2085   000F4A  5009               	movf	___aomod@divisor^0,w,c
  2086   000F4C  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2087   000F4E  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2088   000F50  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2089   000F52  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2090   000F54  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2091   000F56  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2092   000F58  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2093   000F5A  B4D8               	btfsc	status,2,c
  2094   000F5C  EFB2  F007         	goto	u751
  2095   000F60  EFB4  F007         	goto	u750
  2096   000F64                     u751:
  2097   000F64  EFFC  F007         	goto	l1543
  2098   000F68                     u750:
  2099   000F68  0E01               	movlw	1
  2100   000F6A  6E11               	movwf	___aomod@counter^0,c
  2101   000F6C  EFC2  F007         	goto	l1533
  2102   000F70                     l1531:
  2103   000F70  90D8               	bcf	status,0,c
  2104   000F72  3609               	rlcf	___aomod@divisor^0,f,c
  2105   000F74  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2106   000F76  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2107   000F78  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2108   000F7A  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2109   000F7C  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2110   000F7E  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2111   000F80  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2112   000F82  2A11               	incf	___aomod@counter^0,f,c
  2113   000F84                     l1533:
  2114   000F84  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2115   000F86  EFC7  F007         	goto	u761
  2116   000F8A  EFC9  F007         	goto	u760
  2117   000F8E                     u761:
  2118   000F8E  EFB8  F007         	goto	l1531
  2119   000F92                     u760:
  2120   000F92                     l1535:
  2121   000F92  5009               	movf	___aomod@divisor^0,w,c
  2122   000F94  5C01               	subwf	___aomod@dividend^0,w,c
  2123   000F96  500A               	movf	(___aomod@divisor+1)^0,w,c
  2124   000F98  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2125   000F9A  500B               	movf	(___aomod@divisor+2)^0,w,c
  2126   000F9C  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2127   000F9E  500C               	movf	(___aomod@divisor+3)^0,w,c
  2128   000FA0  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2129   000FA2  500D               	movf	(___aomod@divisor+4)^0,w,c
  2130   000FA4  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2131   000FA6  500E               	movf	(___aomod@divisor+5)^0,w,c
  2132   000FA8  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2133   000FAA  500F               	movf	(___aomod@divisor+6)^0,w,c
  2134   000FAC  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2135   000FAE  5010               	movf	(___aomod@divisor+7)^0,w,c
  2136   000FB0  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2137   000FB2  A0D8               	btfss	status,0,c
  2138   000FB4  EFDE  F007         	goto	u771
  2139   000FB8  EFE0  F007         	goto	u770
  2140   000FBC                     u771:
  2141   000FBC  EFF0  F007         	goto	l1539
  2142   000FC0                     u770:
  2143   000FC0  5009               	movf	___aomod@divisor^0,w,c
  2144   000FC2  5E01               	subwf	___aomod@dividend^0,f,c
  2145   000FC4  500A               	movf	(___aomod@divisor+1)^0,w,c
  2146   000FC6  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2147   000FC8  500B               	movf	(___aomod@divisor+2)^0,w,c
  2148   000FCA  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2149   000FCC  500C               	movf	(___aomod@divisor+3)^0,w,c
  2150   000FCE  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2151   000FD0  500D               	movf	(___aomod@divisor+4)^0,w,c
  2152   000FD2  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2153   000FD4  500E               	movf	(___aomod@divisor+5)^0,w,c
  2154   000FD6  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2155   000FD8  500F               	movf	(___aomod@divisor+6)^0,w,c
  2156   000FDA  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2157   000FDC  5010               	movf	(___aomod@divisor+7)^0,w,c
  2158   000FDE  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2159   000FE0                     l1539:
  2160   000FE0  90D8               	bcf	status,0,c
  2161   000FE2  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2162   000FE4  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2163   000FE6  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2164   000FE8  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2165   000FEA  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2166   000FEC  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2167   000FEE  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2168   000FF0  3209               	rrcf	___aomod@divisor^0,f,c
  2169   000FF2  2E11               	decfsz	___aomod@counter^0,f,c
  2170   000FF4  EFC9  F007         	goto	l1535
  2171   000FF8                     l1543:
  2172   000FF8  5012               	movf	___aomod@sign^0,w,c
  2173   000FFA  B4D8               	btfsc	status,2,c
  2174   000FFC  EF02  F008         	goto	u781
  2175   001000  EF04  F008         	goto	u780
  2176   001004                     u781:
  2177   001004  EF14  F008         	goto	l1547
  2178   001008                     u780:
  2179   001008  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2180   00100A  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2181   00100C  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2182   00100E  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2183   001010  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2184   001012  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2185   001014  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2186   001016  6C01               	negf	___aomod@dividend^0,c
  2187   001018  0E00               	movlw	0
  2188   00101A  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2189   00101C  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2190   00101E  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2191   001020  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2192   001022  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2193   001024  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2194   001026  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2195   001028                     l1547:
  2196   001028  C001  F001         	movff	___aomod@dividend,?___aomod
  2197   00102C  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2198   001030  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2199   001034  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2200   001038  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2201   00103C  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2202   001040  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2203   001044  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2204   001048  0012               	return		;funcret
  2205   00104A                     __end_of___aomod:
  2206                           	callstack 0
  2207                           
  2208 ;; *************** function ___aodiv *****************
  2209 ;; Defined at:
  2210 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  2211 ;; Parameters:    Size  Location     Type
  2212 ;;  dividend        8    0[COMRAM] long long 
  2213 ;;  divisor         8    8[COMRAM] long long 
  2214 ;; Auto vars:     Size  Location     Type
  2215 ;;  quotient        8   18[COMRAM] long long 
  2216 ;;  sign            1   17[COMRAM] unsigned char 
  2217 ;;  counter         1   16[COMRAM] unsigned char 
  2218 ;; Return value:  Size  Location     Type
  2219 ;;                  8    0[COMRAM] long long 
  2220 ;; Registers used:
  2221 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2222 ;; Tracked objects:
  2223 ;;		On entry : 0/0
  2224 ;;		On exit  : 0/0
  2225 ;;		Unchanged: 0/0
  2226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2227 ;;      Params:        16       0       0       0       0       0       0       0       0
  2228 ;;      Locals:        10       0       0       0       0       0       0       0       0
  2229 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2230 ;;      Totals:        26       0       0       0       0       0       0       0       0
  2231 ;;Total ram usage:       26 bytes
  2232 ;; Hardware stack levels used: 1
  2233 ;; This function calls:
  2234 ;;		Nothing
  2235 ;; This function is called by:
  2236 ;;		_dtoa
  2237 ;; This function uses a non-reentrant model
  2238 ;;
  2239                           
  2240                           	psect	text11
  2241   000D5E                     __ptext11:
  2242                           	callstack 0
  2243   000D5E                     ___aodiv:
  2244                           	callstack 26
  2245   000D5E  0E00               	movlw	0
  2246   000D60  6E12               	movwf	___aodiv@sign^0,c
  2247   000D62  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  2248   000D64  EFB8  F006         	goto	u660
  2249   000D68  EFB6  F006         	goto	u661
  2250   000D6C                     u661:
  2251   000D6C  EFCA  F006         	goto	l1479
  2252   000D70                     u660:
  2253   000D70  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  2254   000D72  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  2255   000D74  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  2256   000D76  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  2257   000D78  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  2258   000D7A  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  2259   000D7C  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  2260   000D7E  6C09               	negf	___aodiv@divisor^0,c
  2261   000D80  0E00               	movlw	0
  2262   000D82  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  2263   000D84  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  2264   000D86  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  2265   000D88  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  2266   000D8A  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  2267   000D8C  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  2268   000D8E  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  2269   000D90  0E01               	movlw	1
  2270   000D92  6E12               	movwf	___aodiv@sign^0,c
  2271   000D94                     l1479:
  2272   000D94  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  2273   000D96  EFD1  F006         	goto	u670
  2274   000D9A  EFCF  F006         	goto	u671
  2275   000D9E                     u671:
  2276   000D9E  EFE3  F006         	goto	l1485
  2277   000DA2                     u670:
  2278   000DA2  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  2279   000DA4  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  2280   000DA6  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  2281   000DA8  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  2282   000DAA  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  2283   000DAC  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  2284   000DAE  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  2285   000DB0  6C01               	negf	___aodiv@dividend^0,c
  2286   000DB2  0E00               	movlw	0
  2287   000DB4  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  2288   000DB6  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  2289   000DB8  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  2290   000DBA  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  2291   000DBC  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  2292   000DBE  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  2293   000DC0  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  2294   000DC2  0E01               	movlw	1
  2295   000DC4  1A12               	xorwf	___aodiv@sign^0,f,c
  2296   000DC6                     l1485:
  2297   000DC6  EE20  F013         	lfsr	2,___aodiv@quotient
  2298   000DCA  0E07               	movlw	7
  2299   000DCC                     u681:
  2300   000DCC  6ADE               	clrf	postinc2,c
  2301   000DCE  06E8               	decf	wreg,f,c
  2302   000DD0  E2FD               	bc	u681
  2303   000DD2  5009               	movf	___aodiv@divisor^0,w,c
  2304   000DD4  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  2305   000DD6  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  2306   000DD8  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  2307   000DDA  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  2308   000DDC  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  2309   000DDE  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  2310   000DE0  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  2311   000DE2  B4D8               	btfsc	status,2,c
  2312   000DE4  EFF6  F006         	goto	u691
  2313   000DE8  EFF8  F006         	goto	u690
  2314   000DEC                     u691:
  2315   000DEC  EF4A  F007         	goto	l1507
  2316   000DF0                     u690:
  2317   000DF0  0E01               	movlw	1
  2318   000DF2  6E11               	movwf	___aodiv@counter^0,c
  2319   000DF4  EF06  F007         	goto	l1493
  2320   000DF8                     l1491:
  2321   000DF8  90D8               	bcf	status,0,c
  2322   000DFA  3609               	rlcf	___aodiv@divisor^0,f,c
  2323   000DFC  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  2324   000DFE  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  2325   000E00  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  2326   000E02  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  2327   000E04  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  2328   000E06  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  2329   000E08  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  2330   000E0A  2A11               	incf	___aodiv@counter^0,f,c
  2331   000E0C                     l1493:
  2332   000E0C  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  2333   000E0E  EF0B  F007         	goto	u701
  2334   000E12  EF0D  F007         	goto	u700
  2335   000E16                     u701:
  2336   000E16  EFFC  F006         	goto	l1491
  2337   000E1A                     u700:
  2338   000E1A                     l1495:
  2339   000E1A  90D8               	bcf	status,0,c
  2340   000E1C  3613               	rlcf	___aodiv@quotient^0,f,c
  2341   000E1E  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  2342   000E20  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  2343   000E22  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  2344   000E24  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  2345   000E26  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  2346   000E28  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  2347   000E2A  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  2348   000E2C  5009               	movf	___aodiv@divisor^0,w,c
  2349   000E2E  5C01               	subwf	___aodiv@dividend^0,w,c
  2350   000E30  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2351   000E32  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  2352   000E34  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2353   000E36  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  2354   000E38  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2355   000E3A  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  2356   000E3C  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2357   000E3E  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  2358   000E40  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2359   000E42  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  2360   000E44  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2361   000E46  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  2362   000E48  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2363   000E4A  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  2364   000E4C  A0D8               	btfss	status,0,c
  2365   000E4E  EF2B  F007         	goto	u711
  2366   000E52  EF2D  F007         	goto	u710
  2367   000E56                     u711:
  2368   000E56  EF3E  F007         	goto	l1503
  2369   000E5A                     u710:
  2370   000E5A  5009               	movf	___aodiv@divisor^0,w,c
  2371   000E5C  5E01               	subwf	___aodiv@dividend^0,f,c
  2372   000E5E  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2373   000E60  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  2374   000E62  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2375   000E64  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  2376   000E66  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2377   000E68  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  2378   000E6A  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2379   000E6C  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  2380   000E6E  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2381   000E70  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  2382   000E72  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2383   000E74  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  2384   000E76  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2385   000E78  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  2386   000E7A  8013               	bsf	___aodiv@quotient^0,0,c
  2387   000E7C                     l1503:
  2388   000E7C  90D8               	bcf	status,0,c
  2389   000E7E  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  2390   000E80  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  2391   000E82  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  2392   000E84  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  2393   000E86  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  2394   000E88  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  2395   000E8A  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  2396   000E8C  3209               	rrcf	___aodiv@divisor^0,f,c
  2397   000E8E  2E11               	decfsz	___aodiv@counter^0,f,c
  2398   000E90  EF0D  F007         	goto	l1495
  2399   000E94                     l1507:
  2400   000E94  5012               	movf	___aodiv@sign^0,w,c
  2401   000E96  B4D8               	btfsc	status,2,c
  2402   000E98  EF50  F007         	goto	u721
  2403   000E9C  EF52  F007         	goto	u720
  2404   000EA0                     u721:
  2405   000EA0  EF62  F007         	goto	l1511
  2406   000EA4                     u720:
  2407   000EA4  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  2408   000EA6  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  2409   000EA8  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  2410   000EAA  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  2411   000EAC  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  2412   000EAE  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  2413   000EB0  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  2414   000EB2  6C13               	negf	___aodiv@quotient^0,c
  2415   000EB4  0E00               	movlw	0
  2416   000EB6  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  2417   000EB8  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  2418   000EBA  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  2419   000EBC  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  2420   000EBE  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  2421   000EC0  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  2422   000EC2  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  2423   000EC4                     l1511:
  2424   000EC4  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2425   000EC8  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2426   000ECC  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2427   000ED0  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2428   000ED4  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2429   000ED8  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2430   000EDC  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2431   000EE0  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2432   000EE4  0012               	return		;funcret
  2433   000EE6                     __end_of___aodiv:
  2434                           	callstack 0
  2435                           
  2436 ;; *************** function _atoi *****************
  2437 ;; Defined at:
  2438 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\atoi.c"
  2439 ;; Parameters:    Size  Location     Type
  2440 ;;  s               2    6[COMRAM] PTR const unsigned char 
  2441 ;;		 -> STR_1(10), 
  2442 ;; Auto vars:     Size  Location     Type
  2443 ;;  n               2   13[COMRAM] int 
  2444 ;;  neg             2   11[COMRAM] int 
  2445 ;; Return value:  Size  Location     Type
  2446 ;;                  2    6[COMRAM] int 
  2447 ;; Registers used:
  2448 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2449 ;; Tracked objects:
  2450 ;;		On entry : 0/0
  2451 ;;		On exit  : 0/0
  2452 ;;		Unchanged: 0/0
  2453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2454 ;;      Params:         2       0       0       0       0       0       0       0       0
  2455 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2456 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2457 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2458 ;;Total ram usage:        9 bytes
  2459 ;; Hardware stack levels used: 1
  2460 ;; Hardware stack levels required when called: 1
  2461 ;; This function calls:
  2462 ;;		___wmul
  2463 ;;		_isdigit
  2464 ;;		_isspace
  2465 ;; This function is called by:
  2466 ;;		_vfpfcnvrt
  2467 ;; This function uses a non-reentrant model
  2468 ;;
  2469                           
  2470                           	psect	text12
  2471   00104A                     __ptext12:
  2472                           	callstack 0
  2473   00104A                     _atoi:
  2474                           	callstack 26
  2475   00104A  0E00               	movlw	0
  2476   00104C  6E0F               	movwf	(atoi@n+1)^0,c
  2477   00104E  0E00               	movlw	0
  2478   001050  6E0E               	movwf	atoi@n^0,c
  2479   001052  0E00               	movlw	0
  2480   001054  6E0D               	movwf	(atoi@neg+1)^0,c
  2481   001056  0E00               	movlw	0
  2482   001058  6E0C               	movwf	atoi@neg^0,c
  2483   00105A  EF31  F008         	goto	l1655
  2484   00105E                     l1651:
  2485   00105E  4A07               	infsnz	atoi@s^0,f,c
  2486   001060  2A08               	incf	(atoi@s+1)^0,f,c
  2487   001062                     l1655:
  2488   001062  C007  FFF6         	movff	atoi@s,tblptrl
  2489   001066  C008  FFF7         	movff	atoi@s+1,tblptrh
  2490   00106A                     	if	0	;tblptru may be non-zero
  2491   00106A                     	endif
  2492   00106A                     	if	0	;tblptru may be non-zero
  2493   00106A                     	endif
  2494   00106A  0008               	tblrd		*
  2495   00106C  50F5               	movf	tablat,w,c
  2496   00106E  0A20               	xorlw	32
  2497   001070  B4D8               	btfsc	status,2,c
  2498   001072  EF3D  F008         	goto	u1011
  2499   001076  EF3F  F008         	goto	u1010
  2500   00107A                     u1011:
  2501   00107A  EF2F  F008         	goto	l1651
  2502   00107E                     u1010:
  2503   00107E  C007  FFF6         	movff	atoi@s,tblptrl
  2504   001082  C008  FFF7         	movff	atoi@s+1,tblptrh
  2505   001086                     	if	0	;tblptru may be non-zero
  2506   001086                     	endif
  2507   001086                     	if	0	;tblptru may be non-zero
  2508   001086                     	endif
  2509   001086  0008               	tblrd		*
  2510   001088  CFF5 F009          	movff	tablat,??_atoi
  2511   00108C  0EF7               	movlw	247
  2512   00108E  2409               	addwf	??_atoi^0,w,c
  2513   001090  6E0A               	movwf	(??_atoi+1)^0,c
  2514   001092  6A0B               	clrf	(??_atoi+2)^0,c
  2515   001094  0EFF               	movlw	255
  2516   001096  220B               	addwfc	(??_atoi+2)^0,f,c
  2517   001098  500B               	movf	(??_atoi+2)^0,w,c
  2518   00109A  E109               	bnz	u1020
  2519   00109C  0E05               	movlw	5
  2520   00109E  5C0A               	subwf	(??_atoi+1)^0,w,c
  2521   0010A0  A0D8               	btfss	status,0,c
  2522   0010A2  EF55  F008         	goto	u1021
  2523   0010A6  EF57  F008         	goto	u1020
  2524   0010AA                     u1021:
  2525   0010AA  EF2F  F008         	goto	l1651
  2526   0010AE                     u1020:
  2527   0010AE  EF61  F008         	goto	l1663
  2528   0010B2                     l1659:
  2529   0010B2  0E00               	movlw	0
  2530   0010B4  6E0D               	movwf	(atoi@neg+1)^0,c
  2531   0010B6  0E01               	movlw	1
  2532   0010B8  6E0C               	movwf	atoi@neg^0,c
  2533   0010BA                     l1661:
  2534   0010BA  4A07               	infsnz	atoi@s^0,f,c
  2535   0010BC  2A08               	incf	(atoi@s+1)^0,f,c
  2536   0010BE  EF96  F008         	goto	l1671
  2537   0010C2                     l1663:
  2538   0010C2  C007  FFF6         	movff	atoi@s,tblptrl
  2539   0010C6  C008  FFF7         	movff	atoi@s+1,tblptrh
  2540   0010CA                     	if	0	;tblptru may be non-zero
  2541   0010CA                     	endif
  2542   0010CA                     	if	0	;tblptru may be non-zero
  2543   0010CA                     	endif
  2544   0010CA  0008               	tblrd		*
  2545   0010CC  50F5               	movf	tablat,w,c
  2546   0010CE  6E09               	movwf	??_atoi^0,c
  2547   0010D0  6A0A               	clrf	(??_atoi+1)^0,c
  2548                           
  2549                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2550                           ; Switch size 1, requested type "simple"
  2551                           ; Number of cases is 1, Range of values is 0 to 0
  2552                           ; switch strategies available:
  2553                           ; Name         Instructions Cycles
  2554                           ; simple_byte            4     3 (average)
  2555                           ;	Chosen strategy is simple_byte
  2556   0010D2  500A               	movf	(??_atoi+1)^0,w,c
  2557   0010D4  0A00               	xorlw	0	; case 0
  2558   0010D6  B4D8               	btfsc	status,2,c
  2559   0010D8  EF70  F008         	goto	l1943
  2560   0010DC  EF96  F008         	goto	l1671
  2561   0010E0                     l1943:
  2562                           
  2563                           ; Switch size 1, requested type "simple"
  2564                           ; Number of cases is 2, Range of values is 43 to 45
  2565                           ; switch strategies available:
  2566                           ; Name         Instructions Cycles
  2567                           ; simple_byte            7     4 (average)
  2568                           ;	Chosen strategy is simple_byte
  2569   0010E0  5009               	movf	??_atoi^0,w,c
  2570   0010E2  0A2B               	xorlw	43	; case 43
  2571   0010E4  B4D8               	btfsc	status,2,c
  2572   0010E6  EF5D  F008         	goto	l1661
  2573   0010EA  0A06               	xorlw	6	; case 45
  2574   0010EC  B4D8               	btfsc	status,2,c
  2575   0010EE  EF59  F008         	goto	l1659
  2576   0010F2  EF96  F008         	goto	l1671
  2577   0010F6                     l1665:
  2578   0010F6  C00E  F001         	movff	atoi@n,___wmul@multiplier
  2579   0010FA  C00F  F002         	movff	atoi@n+1,___wmul@multiplier+1
  2580   0010FE  0E00               	movlw	0
  2581   001100  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2582   001102  0E0A               	movlw	10
  2583   001104  6E03               	movwf	___wmul@multiplicand^0,c
  2584   001106  EC68  F00B         	call	___wmul	;wreg free
  2585   00110A  C007  FFF6         	movff	atoi@s,tblptrl
  2586   00110E  C008  FFF7         	movff	atoi@s+1,tblptrh
  2587   001112                     	if	0	;tblptru may be non-zero
  2588   001112                     	endif
  2589   001112                     	if	0	;tblptru may be non-zero
  2590   001112                     	endif
  2591   001112  0008               	tblrd		*
  2592   001114  50F5               	movf	tablat,w,c
  2593   001116  5E01               	subwf	?___wmul^0,f,c
  2594   001118  0E00               	movlw	0
  2595   00111A  5A02               	subwfb	(?___wmul+1)^0,f,c
  2596   00111C  0E30               	movlw	48
  2597   00111E  2401               	addwf	?___wmul^0,w,c
  2598   001120  6E0E               	movwf	atoi@n^0,c
  2599   001122  0E00               	movlw	0
  2600   001124  2002               	addwfc	(?___wmul+1)^0,w,c
  2601   001126  6E0F               	movwf	(atoi@n+1)^0,c
  2602   001128  EF5D  F008         	goto	l1661
  2603   00112C                     l1671:
  2604   00112C  C007  FFF6         	movff	atoi@s,tblptrl
  2605   001130  C008  FFF7         	movff	atoi@s+1,tblptrh
  2606   001134                     	if	0	;tblptru may be non-zero
  2607   001134                     	endif
  2608   001134                     	if	0	;tblptru may be non-zero
  2609   001134                     	endif
  2610   001134  0008               	tblrd		*
  2611   001136  CFF5 F009          	movff	tablat,??_atoi
  2612   00113A  0ED0               	movlw	208
  2613   00113C  2409               	addwf	??_atoi^0,w,c
  2614   00113E  6E0A               	movwf	(??_atoi+1)^0,c
  2615   001140  6A0B               	clrf	(??_atoi+2)^0,c
  2616   001142  0EFF               	movlw	255
  2617   001144  220B               	addwfc	(??_atoi+2)^0,f,c
  2618   001146  500B               	movf	(??_atoi+2)^0,w,c
  2619   001148  E109               	bnz	u1030
  2620   00114A  0E0A               	movlw	10
  2621   00114C  5C0A               	subwf	(??_atoi+1)^0,w,c
  2622   00114E  A0D8               	btfss	status,0,c
  2623   001150  EFAC  F008         	goto	u1031
  2624   001154  EFAE  F008         	goto	u1030
  2625   001158                     u1031:
  2626   001158  EF7B  F008         	goto	l1665
  2627   00115C                     u1030:
  2628   00115C  500C               	movf	atoi@neg^0,w,c
  2629   00115E  100D               	iorwf	(atoi@neg+1)^0,w,c
  2630   001160  A4D8               	btfss	status,2,c
  2631   001162  EFB5  F008         	goto	u1041
  2632   001166  EFB7  F008         	goto	u1040
  2633   00116A                     u1041:
  2634   00116A  EFC5  F008         	goto	l903
  2635   00116E                     u1040:
  2636   00116E  C00E  F009         	movff	atoi@n,??_atoi
  2637   001172  C00F  F00A         	movff	atoi@n+1,??_atoi+1
  2638   001176  1E09               	comf	??_atoi^0,f,c
  2639   001178  1E0A               	comf	(??_atoi+1)^0,f,c
  2640   00117A  4A09               	infsnz	??_atoi^0,f,c
  2641   00117C  2A0A               	incf	(??_atoi+1)^0,f,c
  2642   00117E  C009  F007         	movff	??_atoi,?_atoi
  2643   001182  C00A  F008         	movff	??_atoi+1,?_atoi+1
  2644   001186  EFC9  F008         	goto	l906
  2645   00118A                     l903:
  2646   00118A  C00E  F007         	movff	atoi@n,?_atoi
  2647   00118E  C00F  F008         	movff	atoi@n+1,?_atoi+1
  2648   001192                     l906:
  2649   001192  0012               	return		;funcret
  2650   001194                     __end_of_atoi:
  2651                           	callstack 0
  2652                           
  2653 ;; *************** function _isspace *****************
  2654 ;; Defined at:
  2655 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\isspace.c"
  2656 ;; Parameters:    Size  Location     Type
  2657 ;;  c               2    0[COMRAM] int 
  2658 ;; Auto vars:     Size  Location     Type
  2659 ;;		None
  2660 ;; Return value:  Size  Location     Type
  2661 ;;                  2    0[COMRAM] int 
  2662 ;; Registers used:
  2663 ;;		wreg, status,2, status,0
  2664 ;; Tracked objects:
  2665 ;;		On entry : 0/0
  2666 ;;		On exit  : 0/0
  2667 ;;		Unchanged: 0/0
  2668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2669 ;;      Params:         2       0       0       0       0       0       0       0       0
  2670 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2671 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2672 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2673 ;;Total ram usage:        5 bytes
  2674 ;; Hardware stack levels used: 1
  2675 ;; This function calls:
  2676 ;;		Nothing
  2677 ;; This function is called by:
  2678 ;;		_atoi
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681                           
  2682                           	psect	text13
  2683   001562                     __ptext13:
  2684                           	callstack 0
  2685   001562                     _isspace:
  2686                           	callstack 26
  2687   001562  0E01               	movlw	1
  2688   001564  6E05               	movwf	_isspace$975^0,c
  2689   001566  0E20               	movlw	32
  2690   001568  1801               	xorwf	isspace@c^0,w,c
  2691   00156A  1002               	iorwf	(isspace@c+1)^0,w,c
  2692   00156C  B4D8               	btfsc	status,2,c
  2693   00156E  EFBB  F00A         	goto	u861
  2694   001572  EFBD  F00A         	goto	u860
  2695   001576                     u861:
  2696   001576  EFD0  F00A         	goto	l1585
  2697   00157A                     u860:
  2698   00157A  0EF7               	movlw	247
  2699   00157C  2401               	addwf	isspace@c^0,w,c
  2700   00157E  6E03               	movwf	??_isspace^0,c
  2701   001580  0EFF               	movlw	255
  2702   001582  2002               	addwfc	(isspace@c+1)^0,w,c
  2703   001584  6E04               	movwf	(??_isspace+1)^0,c
  2704   001586  5004               	movf	(??_isspace+1)^0,w,c
  2705   001588  E109               	bnz	u870
  2706   00158A  0E05               	movlw	5
  2707   00158C  5C03               	subwf	??_isspace^0,w,c
  2708   00158E  A0D8               	btfss	status,0,c
  2709   001590  EFCC  F00A         	goto	u871
  2710   001594  EFCE  F00A         	goto	u870
  2711   001598                     u871:
  2712   001598  EFD0  F00A         	goto	l1585
  2713   00159C                     u870:
  2714   00159C  0E00               	movlw	0
  2715   00159E  6E05               	movwf	_isspace$975^0,c
  2716   0015A0                     l1585:
  2717   0015A0  C005  F001         	movff	_isspace$975,?_isspace
  2718   0015A4  6A02               	clrf	(?_isspace+1)^0,c
  2719   0015A6  0012               	return		;funcret
  2720   0015A8                     __end_of_isspace:
  2721                           	callstack 0
  2722                           
  2723 ;; *************** function _isdigit *****************
  2724 ;; Defined at:
  2725 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\isdigit.c"
  2726 ;; Parameters:    Size  Location     Type
  2727 ;;  c               2    0[COMRAM] int 
  2728 ;; Auto vars:     Size  Location     Type
  2729 ;;		None
  2730 ;; Return value:  Size  Location     Type
  2731 ;;                  2    0[COMRAM] int 
  2732 ;; Registers used:
  2733 ;;		wreg, status,2, status,0
  2734 ;; Tracked objects:
  2735 ;;		On entry : 0/0
  2736 ;;		On exit  : 0/0
  2737 ;;		Unchanged: 0/0
  2738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2739 ;;      Params:         2       0       0       0       0       0       0       0       0
  2740 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2741 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2742 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2743 ;;Total ram usage:        4 bytes
  2744 ;; Hardware stack levels used: 1
  2745 ;; This function calls:
  2746 ;;		Nothing
  2747 ;; This function is called by:
  2748 ;;		_vfpfcnvrt
  2749 ;;		_atoi
  2750 ;; This function uses a non-reentrant model
  2751 ;;
  2752                           
  2753                           	psect	text14
  2754   0016A4                     __ptext14:
  2755                           	callstack 0
  2756   0016A4                     _isdigit:
  2757                           	callstack 27
  2758   0016A4  0ED0               	movlw	208
  2759   0016A6  2401               	addwf	isdigit@c^0,w,c
  2760   0016A8  6E03               	movwf	??_isdigit^0,c
  2761   0016AA  0EFF               	movlw	255
  2762   0016AC  2002               	addwfc	(isdigit@c+1)^0,w,c
  2763   0016AE  6E04               	movwf	(??_isdigit+1)^0,c
  2764   0016B0  5004               	movf	(??_isdigit+1)^0,w,c
  2765   0016B2  E10A               	bnz	u840
  2766   0016B4  0E0A               	movlw	10
  2767   0016B6  5C03               	subwf	??_isdigit^0,w,c
  2768   0016B8  A0D8               	btfss	status,0,c
  2769   0016BA  EF61  F00B         	goto	u841
  2770   0016BE  EF64  F00B         	goto	u840
  2771   0016C2                     u841:
  2772   0016C2  0E01               	movlw	1
  2773   0016C4  EF65  F00B         	goto	u850
  2774   0016C8                     u840:
  2775   0016C8  0E00               	movlw	0
  2776   0016CA                     u850:
  2777   0016CA  6E01               	movwf	?_isdigit^0,c
  2778   0016CC  6A02               	clrf	(?_isdigit+1)^0,c
  2779   0016CE  0012               	return		;funcret
  2780   0016D0                     __end_of_isdigit:
  2781                           	callstack 0
  2782                           
  2783 ;; *************** function ___wmul *****************
  2784 ;; Defined at:
  2785 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  2786 ;; Parameters:    Size  Location     Type
  2787 ;;  multiplier      2    0[COMRAM] unsigned int 
  2788 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2789 ;; Auto vars:     Size  Location     Type
  2790 ;;  product         2    4[COMRAM] unsigned int 
  2791 ;; Return value:  Size  Location     Type
  2792 ;;                  2    0[COMRAM] unsigned int 
  2793 ;; Registers used:
  2794 ;;		wreg, status,2, status,0, prodl, prodh
  2795 ;; Tracked objects:
  2796 ;;		On entry : 0/0
  2797 ;;		On exit  : 0/0
  2798 ;;		Unchanged: 0/0
  2799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2800 ;;      Params:         4       0       0       0       0       0       0       0       0
  2801 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2802 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2803 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2804 ;;Total ram usage:        6 bytes
  2805 ;; Hardware stack levels used: 1
  2806 ;; This function calls:
  2807 ;;		Nothing
  2808 ;; This function is called by:
  2809 ;;		_atoi
  2810 ;; This function uses a non-reentrant model
  2811 ;;
  2812                           
  2813                           	psect	text15
  2814   0016D0                     __ptext15:
  2815                           	callstack 0
  2816   0016D0                     ___wmul:
  2817                           	callstack 26
  2818   0016D0  5001               	movf	___wmul@multiplier^0,w,c
  2819   0016D2  0203               	mulwf	___wmul@multiplicand^0,c
  2820   0016D4  CFF3 F005          	movff	prodl,___wmul@product
  2821   0016D8  CFF4 F006          	movff	prodh,___wmul@product+1
  2822   0016DC  5001               	movf	___wmul@multiplier^0,w,c
  2823   0016DE  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2824   0016E0  50F3               	movf	243,w,c
  2825   0016E2  2606               	addwf	(___wmul@product+1)^0,f,c
  2826   0016E4  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2827   0016E6  0203               	mulwf	___wmul@multiplicand^0,c
  2828   0016E8  50F3               	movf	243,w,c
  2829   0016EA  2606               	addwf	(___wmul@product+1)^0,f,c
  2830   0016EC  C005  F001         	movff	___wmul@product,?___wmul
  2831   0016F0  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2832   0016F4  0012               	return		;funcret
  2833   0016F6                     __end_of___wmul:
  2834                           	callstack 0
  2835                           
  2836 ;; *************** function _Lcd_Write_String *****************
  2837 ;; Defined at:
  2838 ;;		line 97 in file "lcd.c"
  2839 ;; Parameters:    Size  Location     Type
  2840 ;;  a               2    4[COMRAM] PTR unsigned char 
  2841 ;;		 -> str_buffeLcd(16), 
  2842 ;; Auto vars:     Size  Location     Type
  2843 ;;  i               2    6[COMRAM] int 
  2844 ;; Return value:  Size  Location     Type
  2845 ;;                  1    wreg      void 
  2846 ;; Registers used:
  2847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2848 ;; Tracked objects:
  2849 ;;		On entry : 0/0
  2850 ;;		On exit  : 0/0
  2851 ;;		Unchanged: 0/0
  2852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2853 ;;      Params:         2       0       0       0       0       0       0       0       0
  2854 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2855 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2856 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2857 ;;Total ram usage:        4 bytes
  2858 ;; Hardware stack levels used: 1
  2859 ;; Hardware stack levels required when called: 2
  2860 ;; This function calls:
  2861 ;;		_Lcd_Write_Char
  2862 ;; This function is called by:
  2863 ;;		_main
  2864 ;; This function uses a non-reentrant model
  2865 ;;
  2866                           
  2867                           	psect	text16
  2868   00162C                     __ptext16:
  2869                           	callstack 0
  2870   00162C                     _Lcd_Write_String:
  2871                           	callstack 28
  2872   00162C                     
  2873                           ;lcd.c: 97: void Lcd_Write_String(unsigned char *a);lcd.c: 98: {;lcd.c: 99:  int i;;lcd.
      +                          c: 100:  for(i=0;a[i]!='\0';i++)
  2874   00162C  0E00               	movlw	0
  2875   00162E  6E08               	movwf	(Lcd_Write_String@i+1)^0,c
  2876   001630  0E00               	movlw	0
  2877   001632  6E07               	movwf	Lcd_Write_String@i^0,c
  2878   001634  EF27  F00B         	goto	l1879
  2879   001638                     l1875:
  2880                           
  2881                           ;lcd.c: 101:     Lcd_Write_Char(a[i]);
  2882   001638  5007               	movf	Lcd_Write_String@i^0,w,c
  2883   00163A  2405               	addwf	Lcd_Write_String@a^0,w,c
  2884   00163C  6ED9               	movwf	fsr2l,c
  2885   00163E  5008               	movf	(Lcd_Write_String@i+1)^0,w,c
  2886   001640  2006               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  2887   001642  6EDA               	movwf	fsr2h,c
  2888   001644  50DF               	movf	indf2,w,c
  2889   001646  EC36  F00B         	call	_Lcd_Write_Char
  2890   00164A  4A07               	infsnz	Lcd_Write_String@i^0,f,c
  2891   00164C  2A08               	incf	(Lcd_Write_String@i+1)^0,f,c
  2892   00164E                     l1879:
  2893   00164E  5007               	movf	Lcd_Write_String@i^0,w,c
  2894   001650  2405               	addwf	Lcd_Write_String@a^0,w,c
  2895   001652  6ED9               	movwf	fsr2l,c
  2896   001654  5008               	movf	(Lcd_Write_String@i+1)^0,w,c
  2897   001656  2006               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  2898   001658  6EDA               	movwf	fsr2h,c
  2899   00165A  50DF               	movf	indf2,w,c
  2900   00165C  A4D8               	btfss	status,2,c
  2901   00165E  EF33  F00B         	goto	u1191
  2902   001662  EF35  F00B         	goto	u1190
  2903   001666                     u1191:
  2904   001666  EF1C  F00B         	goto	l1875
  2905   00166A                     u1190:
  2906   00166A  0012               	return		;funcret
  2907   00166C                     __end_of_Lcd_Write_String:
  2908                           	callstack 0
  2909                           
  2910 ;; *************** function _Lcd_Write_Char *****************
  2911 ;; Defined at:
  2912 ;;		line 81 in file "lcd.c"
  2913 ;; Parameters:    Size  Location     Type
  2914 ;;  a               1    wreg     unsigned char 
  2915 ;; Auto vars:     Size  Location     Type
  2916 ;;  a               1    3[COMRAM] unsigned char 
  2917 ;;  y               1    2[COMRAM] unsigned char 
  2918 ;;  temp            1    1[COMRAM] unsigned char 
  2919 ;; Return value:  Size  Location     Type
  2920 ;;                  1    wreg      void 
  2921 ;; Registers used:
  2922 ;;		wreg, status,2, status,0, cstack
  2923 ;; Tracked objects:
  2924 ;;		On entry : 0/0
  2925 ;;		On exit  : 0/0
  2926 ;;		Unchanged: 0/0
  2927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2928 ;;      Params:         0       0       0       0       0       0       0       0       0
  2929 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2930 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2931 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2932 ;;Total ram usage:        3 bytes
  2933 ;; Hardware stack levels used: 1
  2934 ;; Hardware stack levels required when called: 1
  2935 ;; This function calls:
  2936 ;;		_Lcd_Port
  2937 ;; This function is called by:
  2938 ;;		_Lcd_Write_String
  2939 ;; This function uses a non-reentrant model
  2940 ;;
  2941                           
  2942                           	psect	text17
  2943   00166C                     __ptext17:
  2944                           	callstack 0
  2945   00166C                     _Lcd_Write_Char:
  2946                           	callstack 28
  2947                           
  2948                           ;incstack = 0
  2949                           ;Lcd_Write_Char@a stored from wreg
  2950   00166C  6E04               	movwf	Lcd_Write_Char@a^0,c
  2951   00166E                     
  2952                           ;lcd.c: 81: void Lcd_Write_Char(unsigned char a);lcd.c: 82: {;lcd.c: 83:    char temp,y;
      +                          ;lcd.c: 84:    temp = a&0x0F;
  2953   00166E  5004               	movf	Lcd_Write_Char@a^0,w,c
  2954   001670  0B0F               	andlw	15
  2955   001672  6E02               	movwf	Lcd_Write_Char@temp^0,c
  2956                           
  2957                           ;lcd.c: 85:    y = a&0xF0;
  2958   001674  5004               	movf	Lcd_Write_Char@a^0,w,c
  2959   001676  0BF0               	andlw	240
  2960   001678  6E03               	movwf	Lcd_Write_Char@y^0,c
  2961   00167A                     
  2962                           ;lcd.c: 86:    LATDbits.LATD2 = 1;
  2963   00167A  848C               	bsf	140,2,c	;volatile
  2964   00167C                     
  2965                           ;lcd.c: 87:    Lcd_Port(y>>4);
  2966   00167C  3803               	swapf	Lcd_Write_Char@y^0,w,c
  2967   00167E  0B0F               	andlw	15
  2968   001680  EC33  F00A         	call	_Lcd_Port
  2969   001684                     
  2970                           ;lcd.c: 88:    LATDbits.LATD3 = 1;
  2971   001684  868C               	bsf	140,3,c	;volatile
  2972   001686                     
  2973                           ;lcd.c: 89:    _delay((unsigned long)((40)*(16000000/4000000.0)));
  2974   001686  0E35               	movlw	53
  2975   001688                     u1227:
  2976   001688  2EE8               	decfsz	wreg,f,c
  2977   00168A  D7FE               	bra	u1227
  2978   00168C  F000               	nop	
  2979   00168E                     
  2980                           ;lcd.c: 90:    LATDbits.LATD3 = 0;
  2981   00168E  968C               	bcf	140,3,c	;volatile
  2982   001690                     
  2983                           ;lcd.c: 91:    Lcd_Port(temp);
  2984   001690  5002               	movf	Lcd_Write_Char@temp^0,w,c
  2985   001692  EC33  F00A         	call	_Lcd_Port
  2986   001696                     
  2987                           ;lcd.c: 92:    LATDbits.LATD3 = 1;
  2988   001696  868C               	bsf	140,3,c	;volatile
  2989   001698                     
  2990                           ;lcd.c: 93:    _delay((unsigned long)((40)*(16000000/4000000.0)));
  2991   001698  0E35               	movlw	53
  2992   00169A                     u1237:
  2993   00169A  2EE8               	decfsz	wreg,f,c
  2994   00169C  D7FE               	bra	u1237
  2995   00169E  F000               	nop	
  2996   0016A0                     
  2997                           ;lcd.c: 94:    LATDbits.LATD3 = 0;
  2998   0016A0  968C               	bcf	140,3,c	;volatile
  2999   0016A2  0012               	return		;funcret
  3000   0016A4                     __end_of_Lcd_Write_Char:
  3001                           	callstack 0
  3002                           
  3003 ;; *************** function _Lcd_Set_Cursor *****************
  3004 ;; Defined at:
  3005 ;;		line 41 in file "lcd.c"
  3006 ;; Parameters:    Size  Location     Type
  3007 ;;  a               1    wreg     unsigned char 
  3008 ;;  b               1    3[COMRAM] unsigned char 
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;  a               1    4[COMRAM] unsigned char 
  3011 ;;  temp            1    7[COMRAM] unsigned char 
  3012 ;;  y               1    6[COMRAM] unsigned char 
  3013 ;;  z               1    5[COMRAM] unsigned char 
  3014 ;; Return value:  Size  Location     Type
  3015 ;;                  1    wreg      void 
  3016 ;; Registers used:
  3017 ;;		wreg, status,2, status,0, cstack
  3018 ;; Tracked objects:
  3019 ;;		On entry : 0/0
  3020 ;;		On exit  : 0/0
  3021 ;;		Unchanged: 0/0
  3022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3023 ;;      Params:         1       0       0       0       0       0       0       0       0
  3024 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3025 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3026 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3027 ;;Total ram usage:        5 bytes
  3028 ;; Hardware stack levels used: 1
  3029 ;; Hardware stack levels required when called: 2
  3030 ;; This function calls:
  3031 ;;		_Lcd_Cmd
  3032 ;; This function is called by:
  3033 ;;		_main
  3034 ;; This function uses a non-reentrant model
  3035 ;;
  3036                           
  3037                           	psect	text18
  3038   001400                     __ptext18:
  3039                           	callstack 0
  3040   001400                     _Lcd_Set_Cursor:
  3041                           	callstack 28
  3042                           
  3043                           ;incstack = 0
  3044                           ;Lcd_Set_Cursor@a stored from wreg
  3045   001400  6E05               	movwf	Lcd_Set_Cursor@a^0,c
  3046   001402                     
  3047                           ;lcd.c: 41: void Lcd_Set_Cursor(unsigned char a, unsigned char b);lcd.c: 42: {;lcd.c: 43
      +                          :  char temp,z,y;;lcd.c: 44:  if(a == 1)
  3048   001402  0405               	decf	Lcd_Set_Cursor@a^0,w,c
  3049   001404  A4D8               	btfss	status,2,c
  3050   001406  EF07  F00A         	goto	u1171
  3051   00140A  EF09  F00A         	goto	u1170
  3052   00140E                     u1171:
  3053   00140E  EF1A  F00A         	goto	l1865
  3054   001412                     u1170:
  3055   001412                     
  3056                           ;lcd.c: 45:  {;lcd.c: 46:    temp = 0x80 + b - 1;
  3057   001412  5004               	movf	Lcd_Set_Cursor@b^0,w,c
  3058   001414  0F7F               	addlw	127
  3059   001416  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
  3060                           
  3061                           ;lcd.c: 47:   z = temp>>4;
  3062   001418  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
  3063   00141A  0B0F               	andlw	15
  3064   00141C  6E06               	movwf	Lcd_Set_Cursor@z^0,c
  3065                           
  3066                           ;lcd.c: 48:   y = temp & 0x0F;
  3067   00141E  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
  3068   001420  0B0F               	andlw	15
  3069   001422  6E07               	movwf	Lcd_Set_Cursor@y^0,c
  3070   001424                     
  3071                           ;lcd.c: 49:   Lcd_Cmd(z);
  3072   001424  5006               	movf	Lcd_Set_Cursor@z^0,w,c
  3073   001426  EC7B  F00B         	call	_Lcd_Cmd
  3074   00142A                     
  3075                           ;lcd.c: 50:   Lcd_Cmd(y);
  3076   00142A  5007               	movf	Lcd_Set_Cursor@y^0,w,c
  3077   00142C  EC7B  F00B         	call	_Lcd_Cmd
  3078                           
  3079                           ;lcd.c: 51:  }
  3080   001430  EF32  F00A         	goto	l93
  3081   001434                     l1865:
  3082   001434  0E02               	movlw	2
  3083   001436  1805               	xorwf	Lcd_Set_Cursor@a^0,w,c
  3084   001438  A4D8               	btfss	status,2,c
  3085   00143A  EF21  F00A         	goto	u1181
  3086   00143E  EF23  F00A         	goto	u1180
  3087   001442                     u1181:
  3088   001442  EF32  F00A         	goto	l93
  3089   001446                     u1180:
  3090   001446                     
  3091                           ;lcd.c: 53:  {;lcd.c: 54:   temp = 0xC0 + b - 1;
  3092   001446  5004               	movf	Lcd_Set_Cursor@b^0,w,c
  3093   001448  0FBF               	addlw	191
  3094   00144A  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
  3095                           
  3096                           ;lcd.c: 55:   z = temp>>4;
  3097   00144C  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
  3098   00144E  0B0F               	andlw	15
  3099   001450  6E06               	movwf	Lcd_Set_Cursor@z^0,c
  3100                           
  3101                           ;lcd.c: 56:   y = temp & 0x0F;
  3102   001452  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
  3103   001454  0B0F               	andlw	15
  3104   001456  6E07               	movwf	Lcd_Set_Cursor@y^0,c
  3105   001458                     
  3106                           ;lcd.c: 57:   Lcd_Cmd(z);
  3107   001458  5006               	movf	Lcd_Set_Cursor@z^0,w,c
  3108   00145A  EC7B  F00B         	call	_Lcd_Cmd
  3109   00145E                     
  3110                           ;lcd.c: 58:   Lcd_Cmd(y);
  3111   00145E  5007               	movf	Lcd_Set_Cursor@y^0,w,c
  3112   001460  EC7B  F00B         	call	_Lcd_Cmd
  3113   001464                     l93:
  3114   001464  0012               	return		;funcret
  3115   001466                     __end_of_Lcd_Set_Cursor:
  3116                           	callstack 0
  3117                           
  3118 ;; *************** function _Lcd_Init *****************
  3119 ;; Defined at:
  3120 ;;		line 62 in file "lcd.c"
  3121 ;; Parameters:    Size  Location     Type
  3122 ;;		None
  3123 ;; Auto vars:     Size  Location     Type
  3124 ;;		None
  3125 ;; Return value:  Size  Location     Type
  3126 ;;                  1    wreg      void 
  3127 ;; Registers used:
  3128 ;;		wreg, status,2, cstack
  3129 ;; Tracked objects:
  3130 ;;		On entry : 0/0
  3131 ;;		On exit  : 0/0
  3132 ;;		Unchanged: 0/0
  3133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3134 ;;      Params:         0       0       0       0       0       0       0       0       0
  3135 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3136 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3137 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3138 ;;Total ram usage:        1 bytes
  3139 ;; Hardware stack levels used: 1
  3140 ;; Hardware stack levels required when called: 2
  3141 ;; This function calls:
  3142 ;;		_Lcd_Cmd
  3143 ;;		_Lcd_Port
  3144 ;; This function is called by:
  3145 ;;		_main
  3146 ;; This function uses a non-reentrant model
  3147 ;;
  3148                           
  3149                           	psect	text19
  3150   00138C                     __ptext19:
  3151                           	callstack 0
  3152   00138C                     _Lcd_Init:
  3153                           	callstack 28
  3154   00138C                     
  3155                           ;lcd.c: 64:   Lcd_Port(0x00);
  3156   00138C  0E00               	movlw	0
  3157   00138E  EC33  F00A         	call	_Lcd_Port
  3158   001392                     
  3159                           ;lcd.c: 65:    _delay((unsigned long)((20)*(16000000/4000.0)));
  3160   001392  0E68               	movlw	104
  3161   001394  6E04               	movwf	??_Lcd_Init^0,c
  3162   001396  0EE4               	movlw	228
  3163   001398                     u1247:
  3164   001398  2EE8               	decfsz	wreg,f,c
  3165   00139A  D7FE               	bra	u1247
  3166   00139C  2E04               	decfsz	??_Lcd_Init^0,f,c
  3167   00139E  D7FC               	bra	u1247
  3168   0013A0  D000               	nop2	
  3169   0013A2                     
  3170                           ;lcd.c: 66:   Lcd_Cmd(0x03);
  3171   0013A2  0E03               	movlw	3
  3172   0013A4  EC7B  F00B         	call	_Lcd_Cmd
  3173   0013A8                     
  3174                           ;lcd.c: 67:  _delay((unsigned long)((5)*(16000000/4000.0)));
  3175   0013A8  0E1A               	movlw	26
  3176   0013AA  6E04               	movwf	??_Lcd_Init^0,c
  3177   0013AC  0EF8               	movlw	248
  3178   0013AE                     u1257:
  3179   0013AE  2EE8               	decfsz	wreg,f,c
  3180   0013B0  D7FE               	bra	u1257
  3181   0013B2  2E04               	decfsz	??_Lcd_Init^0,f,c
  3182   0013B4  D7FC               	bra	u1257
  3183   0013B6  D000               	nop2	
  3184   0013B8                     
  3185                           ;lcd.c: 68:   Lcd_Cmd(0x03);
  3186   0013B8  0E03               	movlw	3
  3187   0013BA  EC7B  F00B         	call	_Lcd_Cmd
  3188   0013BE                     
  3189                           ;lcd.c: 69:  _delay((unsigned long)((11)*(16000000/4000.0)));
  3190   0013BE  0E3A               	movlw	58
  3191   0013C0  6E04               	movwf	??_Lcd_Init^0,c
  3192   0013C2  0E23               	movlw	35
  3193   0013C4                     u1267:
  3194   0013C4  2EE8               	decfsz	wreg,f,c
  3195   0013C6  D7FE               	bra	u1267
  3196   0013C8  2E04               	decfsz	??_Lcd_Init^0,f,c
  3197   0013CA  D7FC               	bra	u1267
  3198   0013CC  F000               	nop	
  3199   0013CE                     
  3200                           ;lcd.c: 70:   Lcd_Cmd(0x03);
  3201   0013CE  0E03               	movlw	3
  3202   0013D0  EC7B  F00B         	call	_Lcd_Cmd
  3203   0013D4                     
  3204                           ;lcd.c: 72:   Lcd_Cmd(0x02);
  3205   0013D4  0E02               	movlw	2
  3206   0013D6  EC7B  F00B         	call	_Lcd_Cmd
  3207   0013DA                     
  3208                           ;lcd.c: 73:   Lcd_Cmd(0x02);
  3209   0013DA  0E02               	movlw	2
  3210   0013DC  EC7B  F00B         	call	_Lcd_Cmd
  3211   0013E0                     
  3212                           ;lcd.c: 74:   Lcd_Cmd(0x08);
  3213   0013E0  0E08               	movlw	8
  3214   0013E2  EC7B  F00B         	call	_Lcd_Cmd
  3215   0013E6                     
  3216                           ;lcd.c: 75:   Lcd_Cmd(0x00);
  3217   0013E6  0E00               	movlw	0
  3218   0013E8  EC7B  F00B         	call	_Lcd_Cmd
  3219   0013EC                     
  3220                           ;lcd.c: 76:   Lcd_Cmd(0x0C);
  3221   0013EC  0E0C               	movlw	12
  3222   0013EE  EC7B  F00B         	call	_Lcd_Cmd
  3223   0013F2                     
  3224                           ;lcd.c: 77:   Lcd_Cmd(0x00);
  3225   0013F2  0E00               	movlw	0
  3226   0013F4  EC7B  F00B         	call	_Lcd_Cmd
  3227   0013F8                     
  3228                           ;lcd.c: 78:   Lcd_Cmd(0x06);
  3229   0013F8  0E06               	movlw	6
  3230   0013FA  EC7B  F00B         	call	_Lcd_Cmd
  3231   0013FE  0012               	return		;funcret
  3232   001400                     __end_of_Lcd_Init:
  3233                           	callstack 0
  3234                           
  3235 ;; *************** function _Lcd_Clear *****************
  3236 ;; Defined at:
  3237 ;;		line 35 in file "lcd.c"
  3238 ;; Parameters:    Size  Location     Type
  3239 ;;		None
  3240 ;; Auto vars:     Size  Location     Type
  3241 ;;		None
  3242 ;; Return value:  Size  Location     Type
  3243 ;;                  1    wreg      void 
  3244 ;; Registers used:
  3245 ;;		wreg, status,2, cstack
  3246 ;; Tracked objects:
  3247 ;;		On entry : 0/0
  3248 ;;		On exit  : 0/0
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3251 ;;      Params:         0       0       0       0       0       0       0       0       0
  3252 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3253 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3254 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3255 ;;Total ram usage:        0 bytes
  3256 ;; Hardware stack levels used: 1
  3257 ;; Hardware stack levels required when called: 2
  3258 ;; This function calls:
  3259 ;;		_Lcd_Cmd
  3260 ;; This function is called by:
  3261 ;;		_main
  3262 ;; This function uses a non-reentrant model
  3263 ;;
  3264                           
  3265                           	psect	text20
  3266   001764                     __ptext20:
  3267                           	callstack 0
  3268   001764                     _Lcd_Clear:
  3269                           	callstack 28
  3270   001764                     
  3271                           ;lcd.c: 37:  Lcd_Cmd(0);
  3272   001764  0E00               	movlw	0
  3273   001766  EC7B  F00B         	call	_Lcd_Cmd
  3274                           
  3275                           ;lcd.c: 38:  Lcd_Cmd(1);
  3276   00176A  0E01               	movlw	1
  3277   00176C  EC7B  F00B         	call	_Lcd_Cmd
  3278   001770  0012               	return		;funcret
  3279   001772                     __end_of_Lcd_Clear:
  3280                           	callstack 0
  3281                           
  3282 ;; *************** function _Lcd_Cmd *****************
  3283 ;; Defined at:
  3284 ;;		line 26 in file "lcd.c"
  3285 ;; Parameters:    Size  Location     Type
  3286 ;;  a               1    wreg     unsigned char 
  3287 ;; Auto vars:     Size  Location     Type
  3288 ;;  a               1    2[COMRAM] unsigned char 
  3289 ;; Return value:  Size  Location     Type
  3290 ;;                  1    wreg      void 
  3291 ;; Registers used:
  3292 ;;		wreg, status,2, cstack
  3293 ;; Tracked objects:
  3294 ;;		On entry : 0/0
  3295 ;;		On exit  : 0/0
  3296 ;;		Unchanged: 0/0
  3297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3298 ;;      Params:         0       0       0       0       0       0       0       0       0
  3299 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3300 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3301 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3302 ;;Total ram usage:        2 bytes
  3303 ;; Hardware stack levels used: 1
  3304 ;; Hardware stack levels required when called: 1
  3305 ;; This function calls:
  3306 ;;		_Lcd_Port
  3307 ;; This function is called by:
  3308 ;;		_Lcd_Clear
  3309 ;;		_Lcd_Set_Cursor
  3310 ;;		_Lcd_Init
  3311 ;;		_Lcd_Shift_Right
  3312 ;;		_Lcd_Shift_Left
  3313 ;; This function uses a non-reentrant model
  3314 ;;
  3315                           
  3316                           	psect	text21
  3317   0016F6                     __ptext21:
  3318                           	callstack 0
  3319   0016F6                     _Lcd_Cmd:
  3320                           	callstack 28
  3321                           
  3322                           ;incstack = 0
  3323                           ;Lcd_Cmd@a stored from wreg
  3324   0016F6  6E03               	movwf	Lcd_Cmd@a^0,c
  3325   0016F8                     
  3326                           ;lcd.c: 26: void Lcd_Cmd(unsigned char a);lcd.c: 27: {;lcd.c: 28:  LATDbits.LATD2 = 0;
  3327   0016F8  948C               	bcf	140,2,c	;volatile
  3328   0016FA                     
  3329                           ;lcd.c: 29:  Lcd_Port(a);
  3330   0016FA  5003               	movf	Lcd_Cmd@a^0,w,c
  3331   0016FC  EC33  F00A         	call	_Lcd_Port
  3332   001700                     
  3333                           ;lcd.c: 30:  LATDbits.LATD3 = 1;
  3334   001700  868C               	bsf	140,3,c	;volatile
  3335   001702                     
  3336                           ;lcd.c: 31:         _delay((unsigned long)((4)*(16000000/4000.0)));
  3337   001702  0E15               	movlw	21
  3338   001704  6E02               	movwf	??_Lcd_Cmd^0,c
  3339   001706  0EC6               	movlw	198
  3340   001708                     u1277:
  3341   001708  2EE8               	decfsz	wreg,f,c
  3342   00170A  D7FE               	bra	u1277
  3343   00170C  2E02               	decfsz	??_Lcd_Cmd^0,f,c
  3344   00170E  D7FC               	bra	u1277
  3345   001710  D000               	nop2	
  3346   001712                     
  3347                           ;lcd.c: 32:         LATDbits.LATD3 = 0;
  3348   001712  968C               	bcf	140,3,c	;volatile
  3349   001714  0012               	return		;funcret
  3350   001716                     __end_of_Lcd_Cmd:
  3351                           	callstack 0
  3352                           
  3353 ;; *************** function _Lcd_Port *****************
  3354 ;; Defined at:
  3355 ;;		line 3 in file "lcd.c"
  3356 ;; Parameters:    Size  Location     Type
  3357 ;;  a               1    wreg     unsigned char 
  3358 ;; Auto vars:     Size  Location     Type
  3359 ;;  a               1    0[COMRAM] unsigned char 
  3360 ;; Return value:  Size  Location     Type
  3361 ;;                  1    wreg      void 
  3362 ;; Registers used:
  3363 ;;		wreg
  3364 ;; Tracked objects:
  3365 ;;		On entry : 0/0
  3366 ;;		On exit  : 0/0
  3367 ;;		Unchanged: 0/0
  3368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3369 ;;      Params:         0       0       0       0       0       0       0       0       0
  3370 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3371 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3372 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3373 ;;Total ram usage:        1 bytes
  3374 ;; Hardware stack levels used: 1
  3375 ;; This function calls:
  3376 ;;		Nothing
  3377 ;; This function is called by:
  3378 ;;		_Lcd_Cmd
  3379 ;;		_Lcd_Init
  3380 ;;		_Lcd_Write_Char
  3381 ;; This function uses a non-reentrant model
  3382 ;;
  3383                           
  3384                           	psect	text22
  3385   001466                     __ptext22:
  3386                           	callstack 0
  3387   001466                     _Lcd_Port:
  3388                           	callstack 28
  3389                           
  3390                           ;incstack = 0
  3391                           ;Lcd_Port@a stored from wreg
  3392   001466  6E01               	movwf	Lcd_Port@a^0,c
  3393   001468                     
  3394                           ;lcd.c: 3: void Lcd_Port(unsigned char a);lcd.c: 4: {;lcd.c: 5:  if(a & 1)
  3395   001468  A001               	btfss	Lcd_Port@a^0,0,c
  3396   00146A  EF39  F00A         	goto	u1051
  3397   00146E  EF3B  F00A         	goto	u1050
  3398   001472                     u1051:
  3399   001472  EF3E  F00A         	goto	l73
  3400   001476                     u1050:
  3401   001476                     
  3402                           ;lcd.c: 6:   LATDbits.LATD4 = 1;
  3403   001476  888C               	bsf	140,4,c	;volatile
  3404   001478  EF3F  F00A         	goto	l1685
  3405   00147C                     l73:
  3406                           
  3407                           ;lcd.c: 8:   LATDbits.LATD4 = 0;
  3408   00147C  988C               	bcf	140,4,c	;volatile
  3409   00147E                     l1685:
  3410                           
  3411                           ;lcd.c: 10:  if(a & 2)
  3412   00147E  A201               	btfss	Lcd_Port@a^0,1,c
  3413   001480  EF44  F00A         	goto	u1061
  3414   001484  EF46  F00A         	goto	u1060
  3415   001488                     u1061:
  3416   001488  EF49  F00A         	goto	l75
  3417   00148C                     u1060:
  3418   00148C                     
  3419                           ;lcd.c: 11:   LATDbits.LATD5 = 1;
  3420   00148C  8A8C               	bsf	140,5,c	;volatile
  3421   00148E  EF4A  F00A         	goto	l1689
  3422   001492                     l75:
  3423                           
  3424                           ;lcd.c: 13:   LATDbits.LATD5 = 0;
  3425   001492  9A8C               	bcf	140,5,c	;volatile
  3426   001494                     l1689:
  3427                           
  3428                           ;lcd.c: 15:  if(a & 4)
  3429   001494  A401               	btfss	Lcd_Port@a^0,2,c
  3430   001496  EF4F  F00A         	goto	u1071
  3431   00149A  EF51  F00A         	goto	u1070
  3432   00149E                     u1071:
  3433   00149E  EF54  F00A         	goto	l77
  3434   0014A2                     u1070:
  3435   0014A2                     
  3436                           ;lcd.c: 16:   LATDbits.LATD6 = 1;
  3437   0014A2  8C8C               	bsf	140,6,c	;volatile
  3438   0014A4  EF55  F00A         	goto	l1693
  3439   0014A8                     l77:
  3440                           
  3441                           ;lcd.c: 18:   LATDbits.LATD6 = 0;
  3442   0014A8  9C8C               	bcf	140,6,c	;volatile
  3443   0014AA                     l1693:
  3444                           
  3445                           ;lcd.c: 20:  if(a & 8)
  3446   0014AA  A601               	btfss	Lcd_Port@a^0,3,c
  3447   0014AC  EF5A  F00A         	goto	u1081
  3448   0014B0  EF5C  F00A         	goto	u1080
  3449   0014B4                     u1081:
  3450   0014B4  EF5F  F00A         	goto	l79
  3451   0014B8                     u1080:
  3452   0014B8                     
  3453                           ;lcd.c: 21:   LATDbits.LATD7 = 1;
  3454   0014B8  8E8C               	bsf	140,7,c	;volatile
  3455   0014BA  EF60  F00A         	goto	l81
  3456   0014BE                     l79:
  3457                           
  3458                           ;lcd.c: 23:   LATDbits.LATD7 = 0;
  3459   0014BE  9E8C               	bcf	140,7,c	;volatile
  3460   0014C0                     l81:
  3461   0014C0  0012               	return		;funcret
  3462   0014C2                     __end_of_Lcd_Port:
  3463                           	callstack 0
  3464                           
  3465 ;; *************** function _Config_Port *****************
  3466 ;; Defined at:
  3467 ;;		line 50 in file "main.c"
  3468 ;; Parameters:    Size  Location     Type
  3469 ;;		None
  3470 ;; Auto vars:     Size  Location     Type
  3471 ;;		None
  3472 ;; Return value:  Size  Location     Type
  3473 ;;                  1    wreg      void 
  3474 ;; Registers used:
  3475 ;;		wreg, status,2
  3476 ;; Tracked objects:
  3477 ;;		On entry : 0/0
  3478 ;;		On exit  : 0/0
  3479 ;;		Unchanged: 0/0
  3480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3481 ;;      Params:         0       0       0       0       0       0       0       0       0
  3482 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3483 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3484 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3485 ;;Total ram usage:        0 bytes
  3486 ;; Hardware stack levels used: 1
  3487 ;; This function calls:
  3488 ;;		Nothing
  3489 ;; This function is called by:
  3490 ;;		_main
  3491 ;; This function uses a non-reentrant model
  3492 ;;
  3493                           
  3494                           	psect	text23
  3495   00174C                     __ptext23:
  3496                           	callstack 0
  3497   00174C                     _Config_Port:
  3498                           	callstack 30
  3499   00174C                     
  3500                           ;main.c: 52:     LATD=0x00;
  3501   00174C  0E00               	movlw	0
  3502   00174E  6E8C               	movwf	140,c	;volatile
  3503                           
  3504                           ;main.c: 55:     SLRCON=0b00000000;
  3505   001750  0E00               	movlw	0
  3506   001752  6E7A               	movwf	122,c	;volatile
  3507   001754                     
  3508                           ;main.c: 58:     ANSELAbits.ANSA0=1;
  3509   001754  010F               	movlb	15	; () banked
  3510   001756  815B               	bsf	91,0,b	;volatile
  3511                           
  3512                           ;main.c: 59:     ANSELD = 0x00;
  3513   001758  0E00               	movlw	0
  3514   00175A  6F5E               	movwf	94,b	;volatile
  3515                           
  3516                           ;main.c: 62:     TRISD=0x00;
  3517   00175C  0E00               	movlw	0
  3518   00175E  6E95               	movwf	149,c	;volatile
  3519   001760                     
  3520                           ; BSR set to: 15
  3521                           ;main.c: 63:     TRISAbits.TRISA0 = 1;
  3522   001760  8092               	bsf	146,0,c	;volatile
  3523   001762                     
  3524                           ; BSR set to: 15
  3525   001762  0012               	return		;funcret
  3526   001764                     __end_of_Config_Port:
  3527                           	callstack 0
  3528                           
  3529 ;; *************** function _Config_Clock *****************
  3530 ;; Defined at:
  3531 ;;		line 45 in file "main.c"
  3532 ;; Parameters:    Size  Location     Type
  3533 ;;		None
  3534 ;; Auto vars:     Size  Location     Type
  3535 ;;		None
  3536 ;; Return value:  Size  Location     Type
  3537 ;;                  1    wreg      void 
  3538 ;; Registers used:
  3539 ;;		wreg, status,2
  3540 ;; Tracked objects:
  3541 ;;		On entry : 0/0
  3542 ;;		On exit  : 0/0
  3543 ;;		Unchanged: 0/0
  3544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3545 ;;      Params:         0       0       0       0       0       0       0       0       0
  3546 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3547 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3548 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3549 ;;Total ram usage:        0 bytes
  3550 ;; Hardware stack levels used: 1
  3551 ;; This function calls:
  3552 ;;		Nothing
  3553 ;; This function is called by:
  3554 ;;		_main
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558                           	psect	text24
  3559   001772                     __ptext24:
  3560                           	callstack 0
  3561   001772                     _Config_Clock:
  3562                           	callstack 30
  3563   001772                     
  3564                           ;main.c: 46:     OSCCONbits.IRCF=0b111;
  3565   001772  0E70               	movlw	112
  3566   001774  12D3               	iorwf	211,f,c	;volatile
  3567                           
  3568                           ;main.c: 47:     OSCCONbits.SCS=0b10;
  3569   001776  50D3               	movf	211,w,c	;volatile
  3570   001778  0BFC               	andlw	-4
  3571   00177A  0902               	iorlw	2
  3572   00177C  6ED3               	movwf	211,c	;volatile
  3573   00177E  0012               	return		;funcret
  3574   001780                     __end_of_Config_Clock:
  3575                           	callstack 0
  3576                           
  3577 ;; *************** function _Config_ADC *****************
  3578 ;; Defined at:
  3579 ;;		line 67 in file "main.c"
  3580 ;; Parameters:    Size  Location     Type
  3581 ;;		None
  3582 ;; Auto vars:     Size  Location     Type
  3583 ;;		None
  3584 ;; Return value:  Size  Location     Type
  3585 ;;                  1    wreg      void 
  3586 ;; Registers used:
  3587 ;;		wreg, status,2
  3588 ;; Tracked objects:
  3589 ;;		On entry : 0/0
  3590 ;;		On exit  : 0/0
  3591 ;;		Unchanged: 0/0
  3592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3593 ;;      Params:         0       0       0       0       0       0       0       0       0
  3594 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3595 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3596 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3597 ;;Total ram usage:        0 bytes
  3598 ;; Hardware stack levels used: 1
  3599 ;; This function calls:
  3600 ;;		Nothing
  3601 ;; This function is called by:
  3602 ;;		_main
  3603 ;; This function uses a non-reentrant model
  3604 ;;
  3605                           
  3606                           	psect	text25
  3607   001716                     __ptext25:
  3608                           	callstack 0
  3609   001716                     _Config_ADC:
  3610                           	callstack 30
  3611   001716                     
  3612                           ;main.c: 69:     ADCON1bits.PVCFG = 0b00;
  3613   001716  0EF3               	movlw	-13
  3614   001718  16C1               	andwf	193,f,c	;volatile
  3615                           
  3616                           ;main.c: 70:     ADCON1bits.NVCFG = 0b00;
  3617   00171A  0EFC               	movlw	-4
  3618   00171C  16C1               	andwf	193,f,c	;volatile
  3619   00171E                     
  3620                           ;main.c: 71:     ADCON2bits.ADFM = 1;
  3621   00171E  8EC0               	bsf	192,7,c	;volatile
  3622                           
  3623                           ;main.c: 72:     ADCON2bits.ACQT = 0b100;
  3624   001720  50C0               	movf	192,w,c	;volatile
  3625   001722  0BC7               	andlw	-57
  3626   001724  0920               	iorlw	32
  3627   001726  6EC0               	movwf	192,c	;volatile
  3628                           
  3629                           ;main.c: 73:     ADCON2bits.ADCS = 0b101;
  3630   001728  50C0               	movf	192,w,c	;volatile
  3631   00172A  0BF8               	andlw	-8
  3632   00172C  0905               	iorlw	5
  3633   00172E  6EC0               	movwf	192,c	;volatile
  3634   001730                     
  3635                           ;main.c: 74:     ADCON0bits.ADON = 1;
  3636   001730  80C2               	bsf	194,0,c	;volatile
  3637   001732  0012               	return		;funcret
  3638   001734                     __end_of_Config_ADC:
  3639                           	callstack 0
  3640                           
  3641                           	psect	rparam
  3642   000000                     
  3643                           	psect	idloc
  3644                           
  3645                           ;Config register IDLOC0 @ 0x200000
  3646                           ;	unspecified, using default values
  3647   200000                     	org	2097152
  3648   200000  FF                 	db	255
  3649                           
  3650                           ;Config register IDLOC1 @ 0x200001
  3651                           ;	unspecified, using default values
  3652   200001                     	org	2097153
  3653   200001  FF                 	db	255
  3654                           
  3655                           ;Config register IDLOC2 @ 0x200002
  3656                           ;	unspecified, using default values
  3657   200002                     	org	2097154
  3658   200002  FF                 	db	255
  3659                           
  3660                           ;Config register IDLOC3 @ 0x200003
  3661                           ;	unspecified, using default values
  3662   200003                     	org	2097155
  3663   200003  FF                 	db	255
  3664                           
  3665                           ;Config register IDLOC4 @ 0x200004
  3666                           ;	unspecified, using default values
  3667   200004                     	org	2097156
  3668   200004  FF                 	db	255
  3669                           
  3670                           ;Config register IDLOC5 @ 0x200005
  3671                           ;	unspecified, using default values
  3672   200005                     	org	2097157
  3673   200005  FF                 	db	255
  3674                           
  3675                           ;Config register IDLOC6 @ 0x200006
  3676                           ;	unspecified, using default values
  3677   200006                     	org	2097158
  3678   200006  FF                 	db	255
  3679                           
  3680                           ;Config register IDLOC7 @ 0x200007
  3681                           ;	unspecified, using default values
  3682   200007                     	org	2097159
  3683   200007  FF                 	db	255
  3684                           
  3685                           	psect	config
  3686                           
  3687                           ;Config register CONFIG1L @ 0x300000
  3688                           ;	PLL Selection
  3689                           ;	PLLSEL = PLL4X, 4x clock multiplier
  3690                           ;	PLL Enable Configuration bit
  3691                           ;	CFGPLLEN = OFF, PLL Disabled (firmware controlled)
  3692                           ;	CPU System Clock Postscaler
  3693                           ;	CPUDIV = NOCLKDIV, CPU uses system clock (no divide)
  3694                           ;	Low Speed USB mode with 48 MHz system clock
  3695                           ;	LS48MHZ = SYS24X4, System clock at 24 MHz, USB clock divider is set to 4
  3696   300000                     	org	3145728
  3697   300000  00                 	db	0
  3698                           
  3699                           ;Config register CONFIG1H @ 0x300001
  3700                           ;	Oscillator Selection
  3701                           ;	FOSC = INTOSCIO, Internal oscillator
  3702                           ;	Primary Oscillator Shutdown
  3703                           ;	PCLKEN = ON, Primary oscillator enabled
  3704                           ;	Fail-Safe Clock Monitor
  3705                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3706                           ;	Internal/External Oscillator Switchover
  3707                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3708   300001                     	org	3145729
  3709   300001  28                 	db	40
  3710                           
  3711                           ;Config register CONFIG2L @ 0x300002
  3712                           ;	Power-up Timer Enable
  3713                           ;	nPWRTEN = ON, Power up timer enabled
  3714                           ;	Brown-out Reset Enable
  3715                           ;	BOREN = SBORDIS, BOR enabled in hardware (SBOREN is ignored)
  3716                           ;	Brown-out Reset Voltage
  3717                           ;	BORV = 190, BOR set to 1.9V nominal
  3718                           ;	Low-Power Brown-out Reset
  3719                           ;	nLPBOR = OFF, Low-Power Brown-out Reset disabled
  3720   300002                     	org	3145730
  3721   300002  5E                 	db	94
  3722                           
  3723                           ;Config register CONFIG2H @ 0x300003
  3724                           ;	Watchdog Timer Enable bits
  3725                           ;	WDTEN = OFF, WDT disabled in hardware (SWDTEN ignored)
  3726                           ;	Watchdog Timer Postscaler
  3727                           ;	WDTPS = 32768, 1:32768
  3728   300003                     	org	3145731
  3729   300003  3C                 	db	60
  3730                           
  3731                           ; Padding undefined space
  3732   300004                     	org	3145732
  3733   300004  FF                 	db	255
  3734                           
  3735                           ;Config register CONFIG3H @ 0x300005
  3736                           ;	CCP2 MUX bit
  3737                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  3738                           ;	PORTB A/D Enable bit
  3739                           ;	PBADEN = ON, PORTB<5:0> pins are configured as analog input channels on Reset
  3740                           ;	Timer3 Clock Input MUX bit
  3741                           ;	T3CMX = RC0, T3CKI function is on RC0
  3742                           ;	SDO Output MUX bit
  3743                           ;	SDOMX = RB3, SDO function is on RB3
  3744                           ;	Master Clear Reset Pin Enable
  3745                           ;	MCLRE = OFF, RE3 input pin enabled; external MCLR disabled
  3746   300005                     	org	3145733
  3747   300005  53                 	db	83
  3748                           
  3749                           ;Config register CONFIG4L @ 0x300006
  3750                           ;	Stack Full/Underflow Reset
  3751                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3752                           ;	Single-Supply ICSP Enable bit
  3753                           ;	LVP = OFF, Single-Supply ICSP disabled
  3754                           ;	Dedicated In-Circuit Debug/Programming Port Enable
  3755                           ;	ICPRT = OFF, ICPORT disabled
  3756                           ;	Extended Instruction Set Enable bit
  3757                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled
  3758                           ;	Background Debugger Enable bit
  3759                           ;	DEBUG = 0x1, unprogrammed default
  3760   300006                     	org	3145734
  3761   300006  81                 	db	129
  3762                           
  3763                           ; Padding undefined space
  3764   300007                     	org	3145735
  3765   300007  FF                 	db	255
  3766                           
  3767                           ;Config register CONFIG5L @ 0x300008
  3768                           ;	Block 0 Code Protect
  3769                           ;	CP0 = OFF, Block 0 is not code-protected
  3770                           ;	Block 1 Code Protect
  3771                           ;	CP1 = OFF, Block 1 is not code-protected
  3772                           ;	Block 2 Code Protect
  3773                           ;	CP2 = OFF, Block 2 is not code-protected
  3774                           ;	Block 3 Code Protect
  3775                           ;	CP3 = OFF, Block 3 is not code-protected
  3776   300008                     	org	3145736
  3777   300008  0F                 	db	15
  3778                           
  3779                           ;Config register CONFIG5H @ 0x300009
  3780                           ;	Boot Block Code Protect
  3781                           ;	CPB = OFF, Boot block is not code-protected
  3782                           ;	Data EEPROM Code Protect
  3783                           ;	CPD = OFF, Data EEPROM is not code-protected
  3784   300009                     	org	3145737
  3785   300009  C0                 	db	192
  3786                           
  3787                           ;Config register CONFIG6L @ 0x30000A
  3788                           ;	Block 0 Write Protect
  3789                           ;	WRT0 = OFF, Block 0 (0800-1FFFh) is not write-protected
  3790                           ;	Block 1 Write Protect
  3791                           ;	WRT1 = OFF, Block 1 (2000-3FFFh) is not write-protected
  3792                           ;	Block 2 Write Protect
  3793                           ;	WRT2 = OFF, Block 2 (04000-5FFFh) is not write-protected
  3794                           ;	Block 3 Write Protect
  3795                           ;	WRT3 = OFF, Block 3 (06000-7FFFh) is not write-protected
  3796   30000A                     	org	3145738
  3797   30000A  0F                 	db	15
  3798                           
  3799                           ;Config register CONFIG6H @ 0x30000B
  3800                           ;	Configuration Registers Write Protect
  3801                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  3802                           ;	Boot Block Write Protect
  3803                           ;	WRTB = OFF, Boot block (0000-7FFh) is not write-protected
  3804                           ;	Data EEPROM Write Protect
  3805                           ;	WRTD = OFF, Data EEPROM is not write-protected
  3806   30000B                     	org	3145739
  3807   30000B  E0                 	db	224
  3808                           
  3809                           ;Config register CONFIG7L @ 0x30000C
  3810                           ;	Block 0 Table Read Protect
  3811                           ;	EBTR0 = OFF, Block 0 is not protected from table reads executed in other blocks
  3812                           ;	Block 1 Table Read Protect
  3813                           ;	EBTR1 = OFF, Block 1 is not protected from table reads executed in other blocks
  3814                           ;	Block 2 Table Read Protect
  3815                           ;	EBTR2 = OFF, Block 2 is not protected from table reads executed in other blocks
  3816                           ;	Block 3 Table Read Protect
  3817                           ;	EBTR3 = OFF, Block 3 is not protected from table reads executed in other blocks
  3818   30000C                     	org	3145740
  3819   30000C  0F                 	db	15
  3820                           
  3821                           ;Config register CONFIG7H @ 0x30000D
  3822                           ;	Boot Block Table Read Protect
  3823                           ;	EBTRB = OFF, Boot block is not protected from table reads executed in other blocks
  3824   30000D                     	org	3145741
  3825   30000D  40                 	db	64
  3826                           tosu	equ	0xFFF
  3827                           tosh	equ	0xFFE
  3828                           tosl	equ	0xFFD
  3829                           stkptr	equ	0xFFC
  3830                           pclatu	equ	0xFFB
  3831                           pclath	equ	0xFFA
  3832                           pcl	equ	0xFF9
  3833                           tblptru	equ	0xFF8
  3834                           tblptrh	equ	0xFF7
  3835                           tblptrl	equ	0xFF6
  3836                           tablat	equ	0xFF5
  3837                           prodh	equ	0xFF4
  3838                           prodl	equ	0xFF3
  3839                           indf0	equ	0xFEF
  3840                           postinc0	equ	0xFEE
  3841                           postdec0	equ	0xFED
  3842                           preinc0	equ	0xFEC
  3843                           plusw0	equ	0xFEB
  3844                           fsr0h	equ	0xFEA
  3845                           fsr0l	equ	0xFE9
  3846                           wreg	equ	0xFE8
  3847                           indf1	equ	0xFE7
  3848                           postinc1	equ	0xFE6
  3849                           postdec1	equ	0xFE5
  3850                           preinc1	equ	0xFE4
  3851                           plusw1	equ	0xFE3
  3852                           fsr1h	equ	0xFE2
  3853                           fsr1l	equ	0xFE1
  3854                           bsr	equ	0xFE0
  3855                           indf2	equ	0xFDF
  3856                           postinc2	equ	0xFDE
  3857                           postdec2	equ	0xFDD
  3858                           preinc2	equ	0xFDC
  3859                           plusw2	equ	0xFDB
  3860                           fsr2h	equ	0xFDA
  3861                           fsr2l	equ	0xFD9
  3862                           status	equ	0xFD8

Data Sizes:
    Strings     10
    Constant    0
    Data        0
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     93      94
    BANK0           160     19      73
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S888$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> str_buffeLcd(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S835$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S835$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 16
		 -> str_buffeLcd(BANK0[16]), 


Critical Paths under _main in COMRAM

    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->___wmul
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    8448
                                             91 COMRAM     2     2      0
                         _Config_ADC
                       _Config_Clock
                        _Config_Port
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    15      6    7340
                                              0 BANK0     19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    6987
                                             83 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           24    18      6    6626
                                             62 COMRAM    21    15      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    3867
                                             27 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2195
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1083
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     682
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                 9     7      2    1080
                                              6 COMRAM     9     7      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              5     3      2     207
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              4     2      2     237
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     4     2      2     344
                                              4 COMRAM     4     2      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     178
                                              1 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     456
                                              3 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     198
                                              3 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              1 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Config_Port                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Config_Clock                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Config_ADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Config_ADC
   _Config_Clock
   _Config_Port
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
         _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      30        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     13      49       5       45.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5D      5E       1       98.9%
BITBIGSFRhhh        2C      0       0      20        0.0%
BITBIGSFRlhh        2A      0       0      22        0.0%
BITBIGSFRlllhh      1B      0       0      26        0.0%
BITBIGSFRllh        11      0       0      25        0.0%
BITBIGSFRhhl         E      0       0      21        0.0%
BITBIGSFRllll        8      0       0      28        0.0%
BITBIGSFRlhll        5      0       0      24        0.0%
BITBIGSFRlhlh        2      0       0      23        0.0%
BITBIGSFRlllhl       2      0       0      27        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A7      29        0.0%
DATA                 0      0      A7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sat Aug 06 20:50:03 2022

                      l60 177E                        l52 1322                        l63 1762  
                      l81 14C0                        l73 147C                        l66 1732  
                      l75 1492                        l84 1714                        l77 14A8  
                      l93 1464                        l79 14BE                        l87 1770  
                      l96 13FE                        l99 16A2       ___wmul@multiplicand 0003  
                     l105 166A                       l114 16F4                       l241 1048  
                     l228 0EE4                       l822 12E4                       l830 08A8  
                     l903 118A                       l824 1306                       l832 08B0  
                     l833 08F6                       l906 1192                       l819 12A2  
                     l932 125C                       l940 15EA                       l909 16CE  
                     l917 15A6                       l846 0ABE                       l943 1780  
                     l792 1512                       l881 162A                       l874 1560  
                     l868 0D5C                       l878 1622                       u610 11A6  
                     u611 11A2                       u700 0E1A                       u620 11B8  
                     u701 0E16                       u621 11B4                       u710 0E5A  
                     u630 11E0                       u711 0E56                       u631 11DC  
                     u720 0EA4                       u640 1216                       u800 128E  
                     u721 0EA0                       u641 1212                       u801 128A  
                     u730 0EF8                       u650 15EA                       u810 12E4  
                     u731 0EF4                       u651 15E6                       u811 12E0  
                     u660 0D70                       u740 0F2A                       u820 12F2  
                     u900 0850                       u661 0D6C                       u741 0F26  
                     u821 12EE                       u901 084C                       u670 0DA2  
                     u750 0F68                       u830 1606                       u910 0880  
                     u671 0D9E                       u751 0F64                       u831 1602  
                     u911 087C                       u840 16C8                       u760 0F92  
                     u920 089C                       u841 16C2                       u681 0DCC  
                     u761 0F8E                       u921 0898                       u850 16CA  
                     u690 0DF0                       u770 0FC0                       u930 08C8  
                     u691 0DEC                       u771 0FBC                       u931 08C4  
                     u860 157A                       u780 1008                       u940 08DE  
                     u861 1576                       u781 1004                       u941 08DA  
                     u870 159C                       u790 126C                       u950 0A18  
                     u871 1598                       u791 1268                       u951 0A14  
                     u960 0A36                       u880 083C                       u961 0A32  
                     u881 0836                       u970 0A50                       u890 083E  
                     u971 0A4C                       u980 0A6A                       u981 0A66  
                     u990 0A78                       u991 0A74                       _abs 15EC  
                     _pad 125E                       wreg 000FE8                      ?_abs 0013  
                    l1501 0E7A                      l1511 0EC4                      l1503 0E7C  
                    l1505 0E8E                      l1521 0F18                      l1601 0882  
                    l1507 0E94                      l1531 0F70                      l1523 0F1C  
                    l1515 0EE6                      l1451 11E0                      l1443 1194  
                    l1611 08DE                      l1603 089C                      l1509 0EA4  
                    l1541 0FF2                      l1533 0F84                      l1525 0F2A  
                    l1517 0EEA                      l1453 1216                      l1445 11A6  
                    l1461 15C6                      l1621 090C                      l1613 08EA  
                    l1605 08B8                      l1701 0AF2                      l1471 0D5E  
                    l1535 0F92                      l1543 0FF8                      l1527 0F4A  
                    l1519 0EF8                      l1447 11B8                      l1463 15CA  
                    l1551 125E                      l1631 0A18                      l1623 098E  
                    l1615 08F2                      l1607 08C8                      l1711 0B24  
                    l1703 0B00                      l1801 1772                      l1465 16D0  
                    l1481 0DA2                      l1473 0D62                      l1545 1008  
                    l1537 0FC0                      l1529 0F68                      l1449 11C2  
                    l1457 15A8                      l1561 12AE                      l1553 126C  
                    l1641 0A88                      l1633 0A36                      l1625 0994  
                    l1617 08FE                      l1609 08CE                      l1721 0B9A  
                    l1705 0B04                      l1803 174C                      l1811 1392  
                    l1467 16EC                      l1651 105E                      l1491 0DF8  
                    l1483 0DC2                      l1475 0D70                      l1547 1028  
                    l1539 0FE0                      l1571 1606                      l1459 15B4  
                    l1563 12C2                      l1555 1280                      l1643 0A8E  
                    l1635 0A50                      l1627 099A                      l1619 0906  
                    l1723 0BD0                      l1715 0B30                      l1707 0B10  
                    l1805 1754                      l1821 13CE                      l1813 13A2  
                    l1573 16A4                      l1581 157A                      l1661 10BA  
                    l1493 0E0C                      l1485 0DC6                      l1477 0D90  
                    l1565 12C6                      l1557 128E                      l1645 0A9E  
                    l1637 0A6A                      l1629 09FE                      l1741 0C9C  
                    l1733 0C1C                      l1725 0BE0                      l1709 0B12  
                    l1717 0B64                      l1807 1760                      l1831 13EC  
                    l1823 13D4                      l1815 13A8                      l1583 159C  
                    l1671 112C                      l1663 10C2                      l1655 1062  
                    l1495 0E1A                      l1487 0DD2                      l1479 0D94  
                    l1567 12F2                      l1559 129A                      l1639 0A78  
                    l1591 082C                      l1743 0CF2                      l1735 0C54  
                    l1727 0BEE                      l1719 0B76                      l1751 0D34  
                    l1841 171E                      l1681 1468                      l1761 16F8  
                    l1833 13F2                      l1825 13DA                      l1817 13B8  
                    l1809 138C                      l1585 15A0                      l1577 1562  
                    l1673 115C                      l1665 10F6                      l1657 107E  
                    l1649 104A                      l1497 0E2C                      l1489 0DF0  
                    l1569 15EC                      l1593 0840                      l1737 0C64  
                    l1729 0C0E                      l1843 1730                      l1691 14A2  
                    l1683 1476                      l1763 16FA                      l1835 13F8  
                    l1827 13E0                      l1819 13BE                      l1771 166E  
                    l1579 1566                      l1675 116E                      l1659 10B2  
                    l1499 0E5A                      l1595 0850                      l1747 0D22  
                    l1739 0C80                      l1851 14E4                      l1693 14AA  
                    l1685 147E                      l1765 1700                      l1837 1764  
                    l1829 13E6                      l1861 1424                      l1781 168E  
                    l1773 167A                      l1597 0870                      l1589 080C  
                    l1941 0B56                      l1853 1500                      l1845 14C2  
                    l1839 1716                      l1695 14B8                      l1687 148C  
                    l1767 1702                      l1871 145E                      l1863 142A  
                    l1783 1690                      l1775 167C                      l1943 10E0  
                    l1599 0880                      l1791 1514                      l1847 14D4  
                    l1689 1494                      l1769 1712                      l1865 1434  
                    l1857 1402                      l1785 1696                      l1777 1684  
                    l1873 162C                      l1697 0AC0                      l1793 1520  
                    l1849 14DC                      l1881 1308                      l1867 1446  
                    l1859 1412                      l1787 1698                      l1779 1686  
                    l1875 1638                      l1699 0AE4                      l1795 153C  
                    l1891 1360                      l1883 131C                      l1869 1458  
                    l1789 16A0                      l1877 164A                      l1797 1558  
                    l1893 136A                      l1885 1320                      ?_pad 0011  
                    l1879 164E                      l1895 1376                      l1887 1330  
                    l1889 1344                      STR_1 0801                      u1000 0A88  
                    u1001 0A84                      u1010 107E                      u1011 107A  
                    u1020 10AE                      u1100 0B76                      u1021 10AA  
                    u1101 0B72                      u1030 115C                      u1110 0B9A  
                    u1031 1158                      u1111 0B96                      u1040 116E  
                    u1120 0BE0                      u1200 1330                      u1041 116A  
                    u1121 0BDC                      u1201 132C                      u1050 1476  
                    u1130 0C54                      u1051 1472                      u1131 0C50  
                    u1060 148C                      u1140 0C80                      u1061 1488  
                    u1141 0C7C                      u1070 14A2                      u1150 0C9C  
                    u1071 149E                      u1151 0C98                      u1080 14B8  
                    u1160 1558                      u1081 14B4                      u1161 1554  
                    u1217 137C                      u1170 1412                      u1090 0AE4  
                    u1171 140E                      u1227 1688                      u1091 0AE0  
                    u1180 1446                      u1181 1442                      u1237 169A  
                    u1190 166A                      u1247 1398                      u1191 1666  
                    _LATD 000F8C                      u1257 13AE                      u1267 13C4  
                    u1277 1708                      abs@a 0013         ?_Lcd_Write_String 0005  
                    _dbuf 0066                      _atoi 104A                      _main 1308  
                    _dtoa 080C                      _prec 0062                      pad@i 0018  
                    pad@p 0015                      fsr1h 000FE2                      fsr2h 000FDA  
                    indf2 000FDF                      fsr1l 000FE1                      pad@w 001A  
                    fsr2l 000FD9                      prodh 000FF4                      prodl 000FF3  
                    start 0000        ??_Lcd_Write_String 0007           __end_of_Lcd_Cmd 1716  
            ___param_bank 000000       __end_of_Config_Port 1764                     ??_abs 0015  
                   ??_pad 0017           __end_of___aodiv 0EE6                     ?_atoi 0007  
                   ?_main 0001                     ?_dtoa 001C           __end_of___aomod 104A  
              _Config_ADC 1716              vfpfcnvrt@fmt 0041              _str_buffeLcd 0086  
                   _TRISD 000F95                     _dato1 0064                     _flags 005E  
                   _fputc 1194                     _fputs 15A8           __end_of_isdigit 16D0  
                   atoi@n 000E                     pad@fp 0011                     atoi@s 0007  
                   _width 0060                     _putch 1780                     dtoa@d 001E  
                   dtoa@i 003C                     dtoa@n 0034                     dtoa@p 0030  
                   dtoa@s 003E                     dtoa@w 0032           __end_of_isspace 15A8  
                   tablat 000FF5                     status 000FD8           __end_of_sprintf 1514  
        __end_of_Lcd_Init 1400          __end_of_Lcd_Port 14C2           __initialization 1734  
    __end_of_Config_Clock 1780              __end_of_atoi 1194              __end_of_main 138C  
            __end_of_dtoa 0AC0                    ??_atoi 0009                    ??_main 005C  
                  ??_dtoa 0026             __activetblptr 000002                    ?_fputc 0001  
                  ?_fputs 000A                    _ADRESH 000FC4                    _ADRESL 000FC3  
                  ?_putch 0001                    _ANSELD 000F5E                 ??_Lcd_Cmd 0002  
           vfpfcnvrt@done 0050                    _SLRCON 000F7A               _Config_Port 174C  
            vfprintf@cfmt 005A                 ??___aodiv 0011                 ??___aomod 0011  
                  ___wmul 16D0                    clear_0 173A                    isa$std 000001  
                  pad@buf 0013                    dtoa@fp 001C               ?_Config_ADC 0001  
                  fputc@c 0001                    fputs@c 000E                    fputs@i 000F  
                  fputs@s 000A                 ??_isdigit 0003              __mediumconst 0000  
               ??_isspace 0003                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8                    putch@c 0001          __end_of_vfprintf 1562  
               ??_sprintf 005C           Lcd_Set_Cursor@a 0005           Lcd_Set_Cursor@b 0004  
         Lcd_Set_Cursor@y 0007           Lcd_Set_Cursor@z 0006                __accesstop 0060  
 __end_of__initialization 1742         __end_of_Lcd_Clear 1772             ___rparam_used 000001  
          __pcstackCOMRAM 0001             __end_of_fputc 125E             __end_of_fputs 15EC  
           __end_of_putch 1782            _Lcd_Set_Cursor 1400                 ?_Lcd_Init 0001  
               ?_Lcd_Port 0001                   ??_fputc 0005                   ??_fputs 000E  
                 ??_putch 0001                __pbssBANK0 0060                   ?___wmul 0001  
  __end_of_Lcd_Set_Cursor 1466                ??_Lcd_Init 0004              _Config_Clock 1772  
              ??_Lcd_Port 0001            _Lcd_Write_Char 166C                   _Lcd_Cmd 16F6  
                 __Hparam 0000                   __Lparam 0000                   ___aodiv 0D5E  
                 ___aomod 0EE6                 ?_vfprintf 0054              __psmallconst 0800  
                 __pcinit 1734                   __ramtop 0800           ?_Lcd_Set_Cursor 0004  
                 __ptext0 1308                   __ptext1 14C2                   __ptext2 1514  
                 __ptext3 0AC0                   __ptext4 080C                   __ptext5 125E  
                 __ptext6 15A8                   __ptext7 1194                   __ptext8 1780  
                 __ptext9 15EC                   _isdigit 16A4                   _isspace 1562  
                 atoi@neg 000C                   _sprintf 14C2    __end_of_Lcd_Write_Char 16A4  
    end_of_initialization 1742                   fputc@fp 0003             __Lmediumconst 0000  
            ?_Config_Port 0001                   fputs@fp 000C         __end_of_vfpfcnvrt 0D5E  
                 postdec2 000FDD                   postinc0 000FEE                   postinc1 000FE6  
                 postinc2 000FDE          vfpfcnvrt@convarg 0048                 Lcd_Port@a 0001  
              ??_vfprintf 005A              ??_Config_ADC 0001                 _TRISAbits 000F92  
         ?_Lcd_Write_Char 0001         Lcd_Write_String@a 0005         Lcd_Write_String@i 0007  
      __end_of_Config_ADC 1734                 _Lcd_Clear 1764               vfpfcnvrt@ap 0043  
             vfpfcnvrt@cp 0052               vfpfcnvrt@fp 003F            __end_of___wmul 16F6  
        _Lcd_Write_String 162C       start_initialization 1734               __end_of_abs 162C  
             __end_of_pad 1308               vfprintf@fmt 0056                ?_Lcd_Clear 0001  
                ??___wmul 0005           Lcd_Write_Char@a 0004           Lcd_Write_Char@y 0003  
             __pbssCOMRAM 005E             __pcstackBANK0 0096          ___aodiv@dividend 0001  
                ?_Lcd_Cmd 0001          ??_Lcd_Set_Cursor 0005                  ?___aodiv 0001  
                ?___aomod 0001          ___aodiv@quotient 0013               __smallconst 0800  
                ?_isdigit 0001                  ?_isspace 0001                  ?_sprintf 0096  
          ___wmul@product 0005                  _LATDbits 000F8C                  Lcd_Cmd@a 0003  
             ??_Lcd_Clear 0004                 _vfpfcnvrt 0AC0                _ADCON0bits 000FC2  
              _ADCON1bits 000FC1                _ADCON2bits 000FC0         ___wmul@multiplier 0001  
        ??_Lcd_Write_Char 0002                  _Lcd_Init 138C                  _Lcd_Port 1466  
__end_of_Lcd_Write_String 166C                  __Hrparam 0000                vfprintf@ap 0058  
                __Lrparam 0000                vfprintf@fp 0054                ?_vfpfcnvrt 003F  
         ___aodiv@divisor 0009           ___aodiv@counter 0011                _ANSELAbits 000F5B  
              sprintf@fmt 0098                  _dtoa$926 002E                  __ptext10 0EE6  
                __ptext11 0D5E                  __ptext20 1764                  __ptext12 104A  
                __ptext21 16F6                  __ptext13 1562                  __ptext22 1466  
                __ptext14 16A4                  __ptext23 174C                  __ptext15 16D0  
                __ptext24 1772                  __ptext16 162C                  __ptext25 1716  
                __ptext17 166C                  __ptext18 1400                  __ptext19 138C  
                isa$xinst 000000                  _vfprintf 1514               _isspace$975 0005  
        ___aomod@dividend 0001             ?_Config_Clock 0001                  isdigit@c 0001  
      Lcd_Write_Char@temp 0002                 sprintf@ap 009C                  isspace@c 0001  
              _OSCCONbits 000FD3           ___aomod@divisor 0009               ??_vfpfcnvrt 0045  
         ___aomod@counter 0011        Lcd_Set_Cursor@temp 0008                  sprintf@f 009E  
                sprintf@s 0096            ??_Config_Clock 0001              ___aodiv@sign 0012  
           ??_Config_Port 0001              ___aomod@sign 0012  
